<?xml version="1.0"?>
<doc>
    <assembly>
        <name>obj/Mono/RhinoCommon</name>
    </assembly>
    <members>
        <member name="P:Rhino.Runtime.PythonScript.Output">
            <summary>
            By default string output goes to the Rhino.RhinoApp.Write function
            Set Output if you want to redirect the output from python to a different function
            while this script executes.
            </summary>
        </member>
        <member name="P:Rhino.Runtime.PythonScript.ScriptContextDoc">
            <summary>
            object set to variable held in scriptcontext.doc
            </summary>
        </member>
        <member name="P:Rhino.Runtime.HostUtils.SendDebugToCommandLine">
            <summary>
            Gets or sets whether debug messages are printed to the command line.
            </summary>
        </member>
        <member name="M:Rhino.Runtime.HostUtils.DebugString(System.String)">
            <summary>
            Print a debug message to the Rhino Command Line.
            The messae will only appear if the SendDebugToCommandLine property is set to True.
            </summary>
            <param name="msg">Message to print.</param>
        </member>
        <member name="M:Rhino.Runtime.HostUtils.DebugString(System.String,System.Object[])">
            <summary>
            Print a debug message to the Rhino Command Line.
            The messae will only appear if the SendDebugToCommandLine property is set to True.
            </summary>
            <param name="format">Message to format and print.</param>
            <param name="args">An Object array containing zero or more objects to format.</param>
        </member>
        <member name="M:Rhino.Runtime.HostUtils.CreateCommands(Rhino.PlugIns.PlugIn)">
            <summary>
            Parse a plugin and create all the commands defined therein.
            </summary>
            <param name="plugin">Plugin to harvest for commands.</param>
            <returns>The number of newly created commands.</returns>
        </member>
        <member name="M:Rhino.Runtime.HostUtils.CreateCommands(System.IntPtr,System.Reflection.Assembly)">
            <summary>
            Parse a plugin and create all the commands defined therein.
            </summary>
            <param name="pPlugIn">Plugin to harvest for commands.</param>
            <param name="pluginAssembly">Assembly associated with the plugin.</param>
            <returns>The number of newly created commands.</returns>
        </member>
        <member name="M:Rhino.Runtime.HostUtils.RegisterDynamicCommand(Rhino.PlugIns.PlugIn,Rhino.Commands.Command)">
            <summary>
            Add a new dynamic command to Rhino.
            </summary>
            <param name="plugin">Plugin that owns the command.</param>
            <param name="cmd">Command to add.</param>
            <returns>True on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Runtime.HostUtils.InitializeRhinoCommon">
            <summary>
            Makes sure all static RhinoCommon components is set up correctly.
            This happens automatically when a plug-in is loaded, so you probably won't
            have to call this method.
            </summary>
            <remarks>Subsequent calls to this method will be ignored.</remarks>
        </member>
        <member name="M:Rhino.Runtime.HostUtils.DisplayOleAlerts(System.Boolean)">
            <summary>
            This function makes no sense on Mono
            </summary>
            <param name="display">
            </param>
        </member>
        <member name="T:Rhino.Runtime.Interop">
            <summary>
            Use for moving object types between RhinoCommon and legacy Rhino_DotNet or C++
            </summary>
        </member>
        <member name="M:Rhino.Runtime.Interop.NativeGeometryConstPointer(Rhino.Geometry.GeometryBase)">
            <summary>
            Return the underlying const ON_Geometry* for a RhinoCommon class
            </summary>
            <param name="geometry">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Rhino.Runtime.Interop.CreateFromNativePointer(System.IntPtr)">
            <summary>
            Create a RhinoCommon Geometry class from a given ON_Geomety*. The ON_Geometry*
            must be declared on the heap and it's lifetime becomes controlled by RhinoCommon
            </summary>
            <param name="pGeometry">ON_Geometry*</param>
            <returns>The appropriate geometry class in RhinoCommon on success</returns>
        </member>
        <member name="M:Rhino.Runtime.Interop.TryCopyFromOnArc(System.Object,Rhino.Geometry.Arc@)">
            <summary>
            Attempts to copy the contents of a RMA.OpenNURBS.OnArc to a Rhino.Geometry.Arc
            </summary>
            <param name="source">
            </param>
            <param name="destination">
            </param>
            <returns>true on success</returns>
        </member>
        <member name="M:Rhino.Runtime.Interop.TryCopyToOnArc(Rhino.Geometry.Arc,System.Object)">
            <summary>
            Attempts to copy the contents of a Rhino.Geometry.Arc to a RMA.OpenNURBS.OnArc
            </summary>
            <param name="source">
            </param>
            <param name="destination">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Rhino.Runtime.Interop.FromOnBrep(System.Object)">
            <summary>
            Copy a Rhino_DotNet brep to a RhinoCommon Brep class
            </summary>
            <param name="source">
            RMA.OpenNURBS.IOnBrep or RMA.OpenNURBS.OnBrep
            </param>
            <returns>
            RhinoCommon Brep on success. This will be an independent copy
            </returns>
        </member>
        <member name="M:Rhino.Runtime.Interop.FromOnSurface(System.Object)">
            <summary>
            Copy a Rhino_DotNet surface to a RhinoCommon Surface class.
            </summary>
            <param name="source">
            Any of the following in the RMA.OpenNURBS namespace are acceptable.
            IOnSurface, OnSurface, IOnPlaneSurface, OnPlaneSurface, IOnClippingPlaneSurface,
            OnClippingPlaneSurface, IOnNurbsSurface, OnNurbsSurfac, IOnRevSurface, OnRevSurface,
            IOnSumSurface, OnSumSurface
            </param>
            <returns>
            RhinoCommon Surface on success. This will be an independent copy
            </returns>
        </member>
        <member name="M:Rhino.Runtime.Interop.FromOnMesh(System.Object)">
            <summary>
            Copy a Rhino_DotNet Mesh to a RhinoCommon Mesh class.
            </summary>
            <param name="source">
            RMA.OpenNURBS.IOnMesh or RMA.OpenNURBS.OnMesh
            </param>
            <returns>
            RhinoCommon Mesh on success. This will be an independent copy
            </returns>
        </member>
        <member name="M:Rhino.Runtime.Interop.ToIRhinoViewport(Rhino.Display.RhinoViewport)">
            <summary>
            Convert a Rhino.Display.Viewport to an RMA.Rhino.IRhinoViewport
            </summary>
            <param name="source">
            </param>
            <returns>
            </returns>
        </member>
        <member name="T:Rhino.Runtime.MonoHost">
            <summary>
            This class should only ever be called from the MonoManager.rhp. Luckily
            when embedding mono, you can call private classes with no problem so we
            don't need to expose this to the SDK
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.ConstructionPlane.GridSpacing">
            <summary>distance between grid lines</summary>
        </member>
        <member name="P:Rhino.DocObjects.ConstructionPlane.GridLineCount">
            <summary>number of grid lines in each direction</summary>
        </member>
        <member name="P:Rhino.DocObjects.ConstructionPlane.ThickLineFrequency">
            <summary>
            0: none,
            1: all lines are thick,
            2: every other is thick, ...
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.ConstructionPlane.DepthBuffered">
            <summary>
            false=grid is always drawn behind 3d geometry
            true=grid is drawn at its depth as a 3d plane and grid lines obscure things behind the grid.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.AnnotationBase.NumericValue">
            <summary>
            Return depends on geometry type.
            LinearDimension = Distance between arrow tips,
            RadialDimension = radius or diamater depending on type
            AngularDimension = angle in degrees
            Leader or Text = UnsetValue
            </summary>
        </member>
        <member name="P:Rhino.Geometry.AnnotationBase.TextHeight">
            <summary>
            Text height in model units
            </summary>
        </member>
        <member name="P:Rhino.Geometry.AnnotationBase.Plane">
            <summary>
            Plane containing the annotation
            </summary>
        </member>
        <member name="M:Rhino.Geometry.LinearDimension.#ctor(Rhino.Geometry.Plane,Rhino.Geometry.Point2d,Rhino.Geometry.Point2d,Rhino.Geometry.Point2d)">
            <example>
                <code source="examples\vbnet\ex_addlineardimension2.vb" lang="vbnet" />
                <code source="examples\cs\ex_addlineardimension2.cs" lang="cs" />
                <code source="examples\py\ex_addlineardimension2.py" lang="py" />
            </example>
        </member>
        <member name="P:Rhino.Geometry.LinearDimension.DimensionStyleIndex">
            <summary>
            Index of DimensionStyle in document DimStyle table used by the dimension
            </summary>
        </member>
        <member name="P:Rhino.Geometry.TextEntity.FontIndex">
            <summary>
            Index of font in document font table used by the text
            </summary>
        </member>
        <member name="T:Rhino.Geometry.ArcCurve">
            <summary>
            ArcCurve is used to represent arcs and circles.
            ArcCurve.IsCircle returns true if the curve is a complete circle.
            Details:
            an ArcCurve is a subcurve of a circle, with a constant speed
            parameterization. The parameterization is	an affine linear
            reparameterzation of the underlying arc	m_arc onto the domain m_t.
            A valid ArcCurve has Radius()&gt;0 and  0&lt;AngleRadians()&lt;=2*PI
            and a strictly increasing Domain().
            </summary>
        </member>
        <member name="P:Rhino.Geometry.ArcCurve.Arc">
            <summary>
            Gets or sets the Arc that is contained within this ArcCurve.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.ArcCurve.IsCompleteCircle">
            <summary>
            Gets a value indicating whether or not this curve can be represented by a complete circle.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.ArcCurve.Radius">
            <summary>
            Gets the radius of this ArcCurve.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.ArcCurve.AngleRadians">
            <summary>
            Gets the angles of this arc in radians.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.ArcCurve.AngleDegrees">
            <summary>
            Gets the angles of this arc in degrees.
            </summary>
        </member>
        <member name="T:Rhino.Runtime.InteropWrappers.SimpleArrayInt">
            <summary>
            Wrapper for ON_SimpleArray&lt;int&gt;
            </summary>
        </member>
        <member name="T:Rhino.Runtime.InteropWrappers.SimpleArrayDouble">
            <summary>
            Wrapper for ON_SimpleArray&lt;double&gt;
            </summary>
        </member>
        <member name="T:Rhino.Runtime.InteropWrappers.SimpleArrayPoint3d">
            <summary>
            ON_SimpleArray&lt;ON_3dPoint&gt;, ON_3dPointArray, ON_PolyLine all have the same size
            This class wraps all of these C++ versions
            </summary>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayPoint3d.#ctor">
            <summary>
            Create with an initial capacity of 0
            </summary>
        </member>
        <member name="P:Rhino.Runtime.InteropWrappers.SimpleArrayPoint3d.Count">
            <summary>
            The number of actual points in this class
            </summary>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayPoint3d.ToArray">
            <summary>
            Copies the contents to an array of ON_3dPoints
            </summary>
            <returns>
            </returns>
        </member>
        <member name="T:Rhino.Runtime.InteropWrappers.SimpleArrayLine">
            <summary>
            Wrapper for ON_SimpleArray&lt;ON_Line&gt;
            </summary>
        </member>
        <member name="T:Rhino.Runtime.InteropWrappers.SimpleArrayCurvePointer">
            <summary>
            Wrapper for a C++ ON_SimpleArray of ON_Curve* or const ON_Curve*
            </summary>
        </member>
        <member name="T:Rhino.Runtime.InteropWrappers.SimpleArrayGeometryPointer">
            <summary>
            Wrapper for a C++ ON_SimpleArray of ON_Geometry* or const ON_Geometry*
            </summary>
        </member>
        <member name="T:Rhino.Runtime.InteropWrappers.SimpleArrayMeshPointer">
            <summary>
            Wrapper for a C++ ON_SimpleArray of ON_Mesh* or const ON_Mesh*
            </summary>
        </member>
        <member name="T:Rhino.Geometry.Box">
            <summary>
            Represents an orthogonal, oriented box that is not tied to the World Axis directions.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Box.#ctor(Rhino.Geometry.BoundingBox)">
            <summary>
            Create a new Box that mimics a BoundingBox struct.
            The orientation plane of the Box will be coincident with the
            World XY plane.
            </summary>
            <param name="bbox">BoundingBox to mimic.</param>
        </member>
        <member name="M:Rhino.Geometry.Box.#ctor(Rhino.Geometry.Plane,Rhino.Geometry.Interval,Rhino.Geometry.Interval,Rhino.Geometry.Interval)">
            <summary>
            Create a new box from a base Plane and three Intervals.
            </summary>
            <param name="basePlane">Orientation plane of the box.</param>
            <param name="xSize">Dimensions along the base plane X-Axis.</param>
            <param name="ySize">Dimensions along the base plane Y-Axis.</param>
            <param name="zSize">Dimensions along the base plane Z-Axis.</param>
        </member>
        <member name="M:Rhino.Geometry.Box.#ctor(Rhino.Geometry.Plane,System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d})">
            <summary>
            Create an aligned Boundingbox for a set of points.
            </summary>
            <param name="basePlane">Orientation of the box.</param>
            <param name="points">Points to include, Invalid points will be ignored.</param>
        </member>
        <member name="M:Rhino.Geometry.Box.#ctor(Rhino.Geometry.Plane,Rhino.Geometry.GeometryBase)">
            <summary>
            Create an aligned boundingbox for a generic piece of geometry.
            </summary>
            <param name="basePlane">Base plane for aligned bounding box.</param>
            <param name="geometry">Geometry to box.</param>
        </member>
        <member name="M:Rhino.Geometry.Box.#ctor(Rhino.Geometry.Plane,Rhino.Geometry.BoundingBox)">
            <summary>
            Create a world aligned box from a base plane and a boundingbox.
            </summary>
            <param name="basePlane">Base plane of bounging box.</param>
            <param name="boundingbox">Bounding Box in plane coordinates.</param>
        </member>
        <member name="P:Rhino.Geometry.Box.Empty">
            <summary>
            Empty Box. Empty boxes are considered to be invalid.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Box.Unset">
            <summary>
            Gets a Box whose base plane and axis dimensions are all Unset.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Box.IsValid">
            <summary>
            Gets the validity of this Box. Boxes are invalid when the base plane or any of
            the dimension intervals are invalid or decreasing.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Box.Plane">
            <summary>
            Gets or sets the orientation plane for this Box.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Box.X">
            <summary>
            Gets or sets the Interval that describes the dimension of the
            Box along the orientation plane X-Axis. Otherwise known as the Width of the Box.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Box.Y">
            <summary>
            Gets or sets the Interval that describes the dimension of the
            Box along the orientation plane Y-Axis. Otherwise known as the Depth of the Box.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Box.Z">
            <summary>
            Gets or sets the Interval that describes the dimension of the
            Box along the orientation plane Z-Axis. Otherwise known as the Height of the Box.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Box.Center">
            <summary>
            Gets the point that is in the center of the box.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Box.BoundingBox">
            <summary>
            Gets the world axis aligned Bounding box for this oriented box.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Box.Area">
            <summary>
            Gets the total surface area of this box.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Box.Volume">
            <summary>
            Gets the total volume of this box.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Box.PointAt(System.Double,System.Double,System.Double)">
            <summary>
            Evaluate the Box volume at the given unitized parameters.
            </summary>
            <param name="x">Unitized parameter along Box X direction.</param>
            <param name="y">Unitized parameter along Box Y direction.</param>
            <param name="z">Unitized parameter along Box Z direction.</param>
            <returns>The point at (x,y,z).</returns>
        </member>
        <member name="M:Rhino.Geometry.Box.ClosestPoint(Rhino.Geometry.Point3d)">
            <summary>
            Find the closest point on or in the Box. The box should be Valid for this to work.
            </summary>
            <param name="point">Sample point.</param>
            <returns>The point on or in the box that is closest to the sample point.</returns>
        </member>
        <member name="M:Rhino.Geometry.Box.FurthestPoint(Rhino.Geometry.Point3d)">
            <summary>
            Find the furthest point on the Box. The Box should be Valid for this to work properly.
            </summary>
            <param name="point">Sample point.</param>
            <returns>The point on the box that is furthest from the sample point.</returns>
        </member>
        <member name="M:Rhino.Geometry.Box.Inflate(System.Double)">
            <summary>
            Inflate the box with equal amounts in all directions.
            Inflating with negative amounts may result in decreasing boxes.
            InValid boxes can not be inflated.
            </summary>
            <param name="amount">Amount (in model units) to inflate this box in all directions.</param>
        </member>
        <member name="M:Rhino.Geometry.Box.Inflate(System.Double,System.Double,System.Double)">
            <summary>
            Inflate the box with custom amounts in all directions.
            Inflating with negative amounts may result in decreasing boxes.
            InValid boxes can not be inflated.
            </summary>
            <param name="xAmount">Amount (in model units) to inflate this box in the x direction.</param>
            <param name="yAmount">Amount (in model units) to inflate this box in the y direction.</param>
            <param name="zAmount">Amount (in model units) to inflate this box in the z direction.</param>
        </member>
        <member name="M:Rhino.Geometry.Box.Contains(Rhino.Geometry.Point3d)">
            <summary>
            Test a point for Box inclusion. This is the same as calling Contains(point,false)
            </summary>
            <param name="point">Point to test.</param>
            <returns>True if the point is on the inside of or coincident with this Box.</returns>
        </member>
        <member name="M:Rhino.Geometry.Box.Contains(Rhino.Geometry.Point3d,System.Boolean)">
            <summary>
            Test a point for Box inclusion.
            </summary>
            <param name="point">Point to test.</param>
            <param name="strict">If true, the point needs to be fully on the inside of the Box.
            I.e. coincident points will be considered 'outside'.</param>
            <returns>True if the point is (strictly) on the inside of this Box.</returns>
        </member>
        <member name="M:Rhino.Geometry.Box.Contains(Rhino.Geometry.BoundingBox)">
            <summary>
            Test a boundingbox for Box inclusion. This is the same as calling Contains(box,false)
            </summary>
            <param name="box">Box to test.</param>
            <returns>True if the box is on the inside of or coincident with this Box.</returns>
        </member>
        <member name="M:Rhino.Geometry.Box.Contains(Rhino.Geometry.BoundingBox,System.Boolean)">
            <summary>
            Test a boundingbox for Box inclusion.
            </summary>
            <param name="box">Box to test.</param>
            <param name="strict">If true, the boundingbox needs to be fully on the inside of this Box.
            I.e. coincident boxes will be considered 'outside'.</param>
            <returns>True if the box is (strictly) on the inside of this Box.</returns>
        </member>
        <member name="M:Rhino.Geometry.Box.Contains(Rhino.Geometry.Box)">
            <summary>
            Test a box for Box inclusion. This is the same as calling Contains(box,false)
            </summary>
            <param name="box">Box to test.</param>
            <returns>True if the box is on the inside of or coincident with this Box.</returns>
        </member>
        <member name="M:Rhino.Geometry.Box.Contains(Rhino.Geometry.Box,System.Boolean)">
            <summary>
            Test a box for Box inclusion.
            </summary>
            <param name="box">Box to test.</param>
            <param name="strict">If true, the box needs to be fully on the inside of this Box.
            I.e. coincident boxes will be considered 'outside'.</param>
            <returns>True if the box is (strictly) on the inside of this Box.</returns>
        </member>
        <member name="M:Rhino.Geometry.Box.Union(Rhino.Geometry.Point3d)">
            <summary>
            Create a union between this Box and the given point.
            This essentially grows the Box until it contains the point.
            </summary>
            <param name="point">Point to include.</param>
        </member>
        <member name="M:Rhino.Geometry.Box.MakeValid">
            <summary>
            Attempts to make the Box valid. This is not always possible.
            </summary>
            <returns>True if the box was made valid, or if it was valid to begin with.
            False if the box remains in a differently abled state.</returns>
        </member>
        <member name="M:Rhino.Geometry.Box.GetCorners">
            <summary>
            Gets an array of the 8 corner points of this box.
            </summary>
            <returns>An array of 8 corners.</returns>
        </member>
        <member name="M:Rhino.Geometry.Box.Transform(Rhino.Geometry.Transform)">
            <summary>
            Transform this Box using a Transformation matrix. If the Transform does not preserve
            Similarity, the dimensions of the resulting box cannot be trusted.
            </summary>
            <param name="xform">Transformation matrix to apply to this Box.</param>
            <returns>True if the Box was successfully transformed, False if otherwise.</returns>
        </member>
        <member name="M:Rhino.Geometry.Box.RepositionBasePlane(Rhino.Geometry.Point3d)">
            <summary>
            Reposition the origin of the Base plane for this box without affecting
            the physical dimensions.
            </summary>
            <param name="origin">The new base plane origin.</param>
        </member>
        <member name="M:Rhino.Geometry.Box.ToBrep">
            <summary>
            Create a Brep representation of this Box.
            </summary>
            <returns>A Brep representation of this box or null.</returns>
        </member>
        <member name="T:Rhino.Geometry.LoftType">
            <summary>
            Enumerates all possible Loft types.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.LoftType.Normal">
            <summary>
            Uses chord-length parameterization in the loft direction
            </summary>
        </member>
        <member name="F:Rhino.Geometry.LoftType.Loose">
            <summary>
            The surface is allowed to move away from the original curves to make a smoother surface.
            The surface control points are created at the same locations as the control points
            of the loft input curves.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.LoftType.Tight">
            <summary>
            The surface sticks closely to the original curves. Uses square root of chord-length
            parameterization in the loft direction
            </summary>
        </member>
        <member name="F:Rhino.Geometry.LoftType.Straight">
            <summary>
            The sections between the curves are straight. This is also known as a ruled surface.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.LoftType.Developable">
            <summary>
            Creates a separate developable surface or polysurface from each pair of curves.
            </summary>
        </member>
        <member name="T:Rhino.Geometry.Brep">
            <summary>
            Boundary Representation. A surface or polysurface along with trim curve information.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Brep.IsSolid">
            <summary>
            Test Brep to see if it is a solid. (A "solid" is a closed oriented manifold.)
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Brep.SolidOrientation">
            <summary>
            Gets the Solid orientation state of this Brep.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Brep.IsManifold">
            <summary>
            Gets a value indicating whether or not the Brep is Manifold.
            Non-Manifold breps have at least one edge that is shared among three or more faces.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Brep.IsSurface">
            <summary>
            Returns true if the Brep has a single face and that face is geometrically the same
            as the underlying surface.  I.e., the face has trivial trimming. In this case, the
            surface is m_S[0]. The flag m_F[0].m_bRev records the correspondence between the
            surface's natural parametric orientation and the orientation of the Brep.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Brep.TryConvertBrep(Rhino.Geometry.GeometryBase)">
            <summary>
            Attempts to convert a generic Geometry object into a Brep.
            </summary>
            <param name="geometry">Geometry to convert, not all types of GeometryBase can be represented by BReps.</param>
            <returns>Brep if a brep form could be created or null if this is not possible. If geometry was of type Brep to
            begin with, the same object is returned, i.e. it is not duplicated.</returns>
        </member>
        <member name="M:Rhino.Geometry.Brep.CreateTrimmedSurface(Rhino.Geometry.BrepFace,Rhino.Geometry.Surface)">
            <summary>
            Create a Brep using the trimming information of a brep face and a surface.
            Surface must be roughly the same shape and in the same location as the trimming brep face.
            </summary>
            <param name="trimSource">BrepFace which contains trimmingSource brep.</param>
            <param name="surfaceSource">Surface that trims of BrepFace will be applied to.</param>
            <returns>A brep with the shape of surfaceSource and the trims of trimSource or null on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Brep.CopyTrimCurves(Rhino.Geometry.BrepFace,Rhino.Geometry.Surface,System.Double)">
            <summary>
            Copy all trims from a Brep face onto a surface.
            </summary>
            <param name="trimSource">Brep face which defines the trimming curves.</param>
            <param name="surfaceSource">The surface to trim.</param>
            <param name="tolerance">Tolerance to use for rebuilding 3D trim curves.</param>
            <returns>A brep with the shape of surfaceSource and the trims of trimSource or null on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Brep.CreateFromBox(Rhino.Geometry.BoundingBox)">
            <summary>
            Create new Brep that matches a bounding box
            </summary>
            <param name="box">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Brep.CreateFromBox(Rhino.Geometry.Box)">
            <summary>
            Create new Brep that matches an aligned box.
            </summary>
            <param name="box">Box to match.</param>
            <returns>A Brep with 6 faces that is similar to the Box.</returns>
        </member>
        <member name="M:Rhino.Geometry.Brep.CreateFromBox(System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d})">
            <summary>
            Create new Brep from 8 corner points
            </summary>
            <param name="corners">
            8 points defining the box corners arranged as the vN lables indicate.
            v7_______e6_____v6
            |\             |\
            | e7           | e5
            |  \ ______e4_____\
            e11 v4         |   v5
            |   |        e10   |
            |   |          |   |
            v3--|---e2----v2   e9
            \   e8         \   |
            e3 |           e1 |
            \ |            \ |
            \v0_____e0_____\v1
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Brep.CreateFromCylinder(Rhino.Geometry.Cylinder,System.Boolean,System.Boolean)">
            <summary>
            Get a Brep definition of a cylinder
            </summary>
            <param name="cylinder">cylinder.IsFinite() must be true</param>
            <param name="capBottom">if true end at cylinder.m_height[0] should be capped</param>
            <param name="capTop">if true end at cylinder.m_height[1] should be capped</param>
            <returns>
            A Brep representation of the cylinder with a single face for the cylinder,
            an edge along the cylinder seam, and vertices at the bottom and top ends of this
            seam edge. The optional bottom/top caps are single faces with one circular edge
            starting and ending at the bottom/top vertex.
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Brep.CreateFromCone(Rhino.Geometry.Cone,System.Boolean)">
            <summary>
            Get a Brep representation of the cone with a single
            face for the cone, an edge along the cone seam,
            and vertices at the base and apex ends of this seam edge.
            The optional cap is a single face with one circular edge
            starting and ending at the base vertex.
            </summary>
            <param name="cone">
            </param>
            <param name="capBottom">if true the base of the cone should be capped</param>
            <returns>
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Brep.CreateFromRevSurface(Rhino.Geometry.RevSurface,System.Boolean,System.Boolean)">
            <summary>
            Get an Brep form of a surface of revolution.
            </summary>
            <param name="surface">
            </param>
            <param name="capStart">
            if true, the start of the revolute is not on the axis of revolution,
            and the surface of revolution is closed, then a circular cap will be
            added to close of the hole at the start of the revolute.
            </param>
            <param name="capEnd">
            if true, the end of the revolute is not on the axis of revolution,
            and the surface of revolution is closed, then a circular cap will be
            added to close of the hole at the end of the revolute.
            </param>
            <returns>
            </returns>
            <example>
                <code source="examples\vbnet\ex_addtruncatedcone.vb" lang="vbnet" />
                <code source="examples\cs\ex_addtruncatedcone.cs" lang="cs" />
                <code source="examples\py\ex_addtruncatedcone.py" lang="py" />
            </example>
        </member>
        <member name="M:Rhino.Geometry.Brep.CreateFromCornerPoints(Rhino.Geometry.Point3d,Rhino.Geometry.Point3d,Rhino.Geometry.Point3d,System.Double)">
            <summary>
            make a Brep with one face
            </summary>
            <param name="corner1">
            </param>
            <param name="corner2">
            </param>
            <param name="corner3">
            </param>
            <param name="tolerance">
            minimum edge length without collapsing to a singularity
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Brep.CreateFromCornerPoints(Rhino.Geometry.Point3d,Rhino.Geometry.Point3d,Rhino.Geometry.Point3d,Rhino.Geometry.Point3d,System.Double)">
            <summary>
            make a Brep with one face
            </summary>
            <param name="corner1">
            </param>
            <param name="corner2">
            </param>
            <param name="corner3">
            </param>
            <param name="corner4">
            </param>
            <param name="tolerance">
            minimum edge length without collapsing to a singularity
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Brep.CreateEdgeSurface(System.Collections.Generic.IEnumerable{Rhino.Geometry.Curve})">
            <summary>
            Creates a coons patch from 2, 3, or 4 curves
            </summary>
            <param name="curves">
            </param>
            <returns>resulting brep or null on failure</returns>
        </member>
        <member name="M:Rhino.Geometry.Brep.CreatePlanarBreps(Rhino.Collections.CurveList)">
            <summary>
            Create a set of planar Breps as outlines by the loops.
            </summary>
            <param name="inputLoops">Curve loops that delineate the planar boundaries.</param>
            <returns>An array of Planar Breps.</returns>
        </member>
        <member name="M:Rhino.Geometry.Brep.CreateFromSurface(Rhino.Geometry.Surface)">
            <summary>
            Create a Brep from a surface.  The resulting Brep has an outer boundary made
            from four trims. The trims are ordered so that they run along the south, east,
            north, and then west side of the surface's parameter space.
            </summary>
            <param name="surface">
            </param>
            <returns>resulting brep or null on failure</returns>
        </member>
        <member name="M:Rhino.Geometry.Brep.CreateFromLoft(System.Collections.Generic.IEnumerable{Rhino.Geometry.Curve},Rhino.Geometry.Point3d,Rhino.Geometry.Point3d,Rhino.Geometry.LoftType,System.Boolean)">
            <summary>
            Creates one or more Breps by lofting through a set of curves.
            </summary>
            <param name="curves">
            The curves to loft through. This function will not perform any curve sorting. You must pass in
            curves in the order you want them lofted. This function will not adjust the directions of open
            curves. Use Curve.DoDirectionsMatch and Curve.Reverse to adjust the directions of open curves.
            This function will not adjust the seams of closed curves. Use Curve.ChangeClosedCurveSeam to
            adjust the seam of closed curves.
            </param>
            <param name="start">
            Optional starting point of loft. Use Point3d.Unset if you do not want to include a start point
            </param>
            <param name="end">
            Optional ending point of loft. Use Point3d.Unset if you do not want to include an end point
            </param>
            <param name="loftType">type of loft to perform</param>
            <param name="closed">
            </param>
            <returns>
            Creates a closed surface, continuing the surface past the last curve around to the
            first curve. Available when you have selected three shape curves
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Brep.CreateFromLoftRebuild(System.Collections.Generic.IEnumerable{Rhino.Geometry.Curve},Rhino.Geometry.Point3d,Rhino.Geometry.Point3d,Rhino.Geometry.LoftType,System.Boolean,System.Int32)">
            <summary>
            Creates one or more Breps by lofting through a set of curves. Input for the loft is simplified by
            rebuilding to a specified number of control points.
            </summary>
            <param name="curves">
            The curves to loft through. This function will not perform any curve sorting. You must pass in
            curves in the order you want them lofted. This function will not adjust the directions of open
            curves. Use Curve.DoDirectionsMatch and Curve.Reverse to adjust the directions of open curves.
            This function will not adjust the seams of closed curves. Use Curve.ChangeClosedCurveSeam to
            adjust the seam of closed curves.
            </param>
            <param name="start">
            Optional starting point of loft. Use Point3d.Unset if you do not want to include a start point
            </param>
            <param name="end">
            Optional ending point of lost. Use Point3d.Unset if you do not want to include an end point
            </param>
            <param name="loftType">type of loft to perform</param>
            <param name="closed">
            </param>
            <param name="rebuildPointCount">
            </param>
            <returns>
            Creates a closed surface, continuing the surface past the last curve around to the
            first curve. Available when you have selected three shape curves
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Brep.CreateFromLoftRefit(System.Collections.Generic.IEnumerable{Rhino.Geometry.Curve},Rhino.Geometry.Point3d,Rhino.Geometry.Point3d,Rhino.Geometry.LoftType,System.Boolean,System.Double)">
            <summary>
            Creates one or more Breps by lofting through a set of curves. Input for the loft is simplified by
            refitting to a specified tolerance
            </summary>
            <param name="curves">
            The curves to loft through. This function will not perform any curve sorting. You must pass in
            curves in the order you want them lofted. This function will not adjust the directions of open
            curves. Use Curve.DoDirectionsMatch and Curve.Reverse to adjust the directions of open curves.
            This function will not adjust the seams of closed curves. Use Curve.ChangeClosedCurveSeam to
            adjust the seam of closed curves.
            </param>
            <param name="start">
            Optional starting point of loft. Use Point3d.Unset if you do not want to include a start point
            </param>
            <param name="end">
            Optional ending point of lost. Use Point3d.Unset if you do not want to include an end point
            </param>
            <param name="loftType">type of loft to perform</param>
            <param name="closed">
            </param>
            <param name="refitTolerance">
            </param>
            <returns>
            Creates a closed surface, continuing the surface past the last curve around to the
            first curve. Available when you have selected three shape curves
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Brep.CreateBooleanUnion(System.Collections.Generic.IEnumerable{Rhino.Geometry.Brep},System.Double)">
            <summary>
            Compute the Boolean Union of a set of Breps.
            </summary>
            <param name="breps">Breps to union.</param>
            <param name="tolerance">Tolerance to use for union operation.</param>
            <returns>An array of Brep results or null on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Brep.CreateBooleanIntersection(System.Collections.Generic.IEnumerable{Rhino.Geometry.Brep},System.Collections.Generic.IEnumerable{Rhino.Geometry.Brep},System.Double)">
            <summary>
            Compute the Solid Intersection of two sets of Breps.
            </summary>
            <param name="firstSet">First set of Breps.</param>
            <param name="secondSet">Second set of Breps.</param>
            <param name="tolerance">Tolerance to use for intersection operation.</param>
            <returns>An array of Brep results or null on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Brep.CreateBooleanDifference(System.Collections.Generic.IEnumerable{Rhino.Geometry.Brep},System.Collections.Generic.IEnumerable{Rhino.Geometry.Brep},System.Double)">
            <summary>
            Compute the Solid Difference of two sets of Breps.
            </summary>
            <param name="firstSet">First set of Breps (the set to subtract from).</param>
            <param name="secondSet">Second set of Breps (the set to subtract).</param>
            <param name="tolerance">Tolerance to use for difference operation.</param>
            <returns>An array of Brep results or null on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Brep.JoinBreps(System.Collections.Generic.IEnumerable{Rhino.Geometry.Brep},System.Double)">
            <summary>
            Joins the breps in the input array at any overlapping edges to form
            as few as possible resulting breps. There may be more than one brep in the result array
            </summary>
            <param name="brepsToJoin">
            </param>
            <param name="tolerance">3d distance tolerance for detecting overlapping edges</param>
            <returns>new joined breps on success, null on failure</returns>
        </member>
        <member name="M:Rhino.Geometry.Brep.Duplicate">
            <summary>
            Creates copy of this Brep
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Brep.DuplicateBrep">
            <summary>
            Same as Duplicate() function, but performs the casting to a Brep for you.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Brep.DuplicateEdgeCurves">
            <summary>
            Duplicate all the edges of this Brep.
            </summary>
            <returns>An array of edge curves.</returns>
        </member>
        <member name="M:Rhino.Geometry.Brep.GetWireframe(System.Int32)">
            <summary>
            Create all the Wireframe curves for this Brep.
            </summary>
            <param name="density">Wireframe density. Valid values range between -1 and 99.</param>
            <returns>An array of Wireframe curves or null on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Brep.DuplicateVertices">
            <summary>
            Duplicate all the corner vertices of this Brep.
            </summary>
            <returns>An array or corner vertices.</returns>
        </member>
        <member name="M:Rhino.Geometry.Brep.GetClosestPoint(Rhino.Geometry.Point3d)">
            <summary>
            This method is Obsolete, use ClosestPoint() instead.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Brep.ClosestPoint(Rhino.Geometry.Point3d)">
            <summary>
            Finds a point on the brep that is closest to testPoint.
            </summary>
            <param name="testPoint">Base point to project to brep.</param>
            <returns>The point on the Brep closest to testPoint or Point3d.Unset if the operation failed.</returns>
        </member>
        <member name="M:Rhino.Geometry.Brep.GetClosestPoint(Rhino.Geometry.Point3d,Rhino.Geometry.Point3d@,Rhino.Geometry.ComponentIndex@,System.Double@,System.Double@,System.Double,Rhino.Geometry.Vector3d@)">
            <summary>
            This method is Obsolete, use ClosestPoint() instead.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Brep.ClosestPoint(Rhino.Geometry.Point3d,Rhino.Geometry.Point3d@,Rhino.Geometry.ComponentIndex@,System.Double@,System.Double@,System.Double,Rhino.Geometry.Vector3d@)">
            <summary>
            Finds a point on a brep that is closest to testPoint.
            </summary>
            <param name="testPoint">base point to project to surface</param>
            <param name="closestPoint">location of the closest brep point</param>
            <param name="ci">Component index of the brep component that contains
            the closest point. Possible types are brep_face, brep_edge or brep_vertex</param>
            <param name="s">If the ci type is brep_edge, then s is the parameter
            of the closest edge point.</param>
            <param name="t">If the ci type is brep_face, then (s,t) is the parameter
            of the closest edge point.</param>
            <param name="maximumDistance">
            If maximumDistance &gt; 0, then only points whose distance
            is &lt;= maximumDistance will be returned. Using a positive
            value of maximumDistance can substantially speed up the search.</param>
            <param name="normal">The normal to the face if ci is a brep_face
            and the tangent to the edge if ci is brep_edge.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Brep.IsPointInside(Rhino.Geometry.Point3d,System.Double,System.Boolean)">
            <summary>
            Determine if a 3D point is inside of a brep. This
            function only makes sense for closed manifold Breps.
            </summary>
            <param name="point">3d point to test</param>
            <param name="tolerance">
            3d distance tolerance used for intersection and determining strict inclusion.
            A good default is RhinoMath.SqrtEpsilon
            </param>
            <param name="strictlyIn">
            if true, point is in if inside brep by at least tolerance.
            if false, point is in if truly in or within tolerance of boundary.
            </param>
            <returns>
            true if point is in, false if not
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Brep.Flip">
            <summary>
            Reverses entire brep orientation of all faces.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Brep.CapPlanarHoles(System.Double)">
            <summary>
            Return a new Brep that is equivalent to this Brep with all planar holes capped.
            </summary>
            <param name="tolerance">Tolerance to use for capping.</param>
            <returns>New brep on success. null on error.</returns>
        </member>
        <member name="M:Rhino.Geometry.Brep.Join(Rhino.Geometry.Brep,System.Double,System.Boolean)">
            <summary>
            If any edges of this brep overlap edges of otherBrep, merge a copy of otherBrep into this
            brep joining all edges that overlap within tolerance
            </summary>
            <param name="otherBrep">Brep to be added to this brep</param>
            <param name="tolerance">3d distance tolerance for detecting overlapping edges</param>
            <param name="compact">if true, set brep flags and tolerances, remove unused faces and edges</param>
            <returns>true if any edges were joined</returns>
            <remarks>
            if no edges overlap, this brep is unchanged.
            otherBrep is copied if it is merged with this, and otherBrep is always unchanged
            Use this to join a list of breps in a series.
            When joining multiple breps in series, compact should be set to false.
            Call compact on the last Join
            </remarks>
        </member>
        <member name="M:Rhino.Geometry.Brep.Split(Rhino.Geometry.Brep,System.Double)">
            <summary>
            Splits a Brep into pieces
            </summary>
            <param name="splitter">
            </param>
            <param name="intersectionTolerance">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Brep.Split(Rhino.Geometry.Brep,System.Double,System.Boolean@)">
            <summary>
            Splits a Brep into pieces
            </summary>
            <param name="splitter">
            </param>
            <param name="intersectionTolerance">
            </param>
            <param name="toleranceWasRaised">
            set to true if the split failed at intersectionTolerance but succeeded
            when the tolerance was increased to twice intersectionTolerance.
            </param>
            <returns>
            </returns>
        </member>
        <member name="T:Rhino.Geometry.PointFaceRelation">
            <summary>
            Enumerates the possible point/BrepFace spatial relationships.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.PointFaceRelation.Exterior">
            <summary>
            Point is on the exterior (the trimmed part) of the face.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.PointFaceRelation.Interior">
            <summary>
            Point is on the interior (the existing part) of the face.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.PointFaceRelation.Boundary">
            <summary>
            Point is in limbo.
            </summary>
        </member>
        <member name="T:Rhino.Geometry.BrepSolidOrientation">
            <summary>
            Enumerates all possible Solid Orientations for a Brep.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.BrepSolidOrientation.None">
            <summary>
            Brep is not a Solid.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.BrepSolidOrientation.Inward">
            <summary>
            Brep is a Solid with inward facing normals.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.BrepSolidOrientation.Outward">
            <summary>
            Brep is a Solid with outward facing normals.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.BrepSolidOrientation.Unknown">
            <summary>
            Breps is a Solid but no orientation could be computed.
            </summary>
        </member>
        <member name="T:Rhino.Geometry.EdgeAdjacency">
            <summary>
            Enumerates all possible Topological Edge adjacency types.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.EdgeAdjacency.None">
            <summary>
            Edge is not used by any faces and is therefore superfluous.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.EdgeAdjacency.Naked">
            <summary>
            Edge is used by a single face.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.EdgeAdjacency.Interior">
            <summary>
            Edge is used by two adjacent faces.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.EdgeAdjacency.NonManifold">
            <summary>
            Edge is used by three or more adjacent faces.
            </summary>
        </member>
        <member name="T:Rhino.Geometry.BrepEdge">
            <summary>
            Represents a single edge curve in a Brep object.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.BrepEdge.TrimCount">
            <summary>
            Number of trim-curves that use this edge.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.BrepEdge.Valence">
            <summary>
            Gets the topological valency of this edge. The topological valency
            is defined by how many adjacent faces share this edge.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.BrepEdge.AdjacentFaces">
            <summary>
            Gets the indices of all the BrepFaces that use this edge.
            </summary>
        </member>
        <member name="T:Rhino.Geometry.BrepFace">
            <summary>
            A Brep face is composed of one surface and trimming curves
            </summary>
        </member>
        <member name="P:Rhino.Geometry.BrepFace.OrientationIsReversed">
            <summary>
            True if face orientation is opposite of natural surface orientation.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.BrepFace.IsSurface">
            <summary>
            Gets a value indicating whether the face is synonymous with the underlying surface.
            If a Face has no trimming curves then it is considered a Surface.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.BrepFace.SetDomain(System.Int32,Rhino.Geometry.Interval)">
            <summary>
            Set the surface domain of this Face.
            </summary>
            <param name="direction">Direction of face to set (0 = U, 1 = V).</param>
            <param name="domain">Domain to apply.</param>
            <returns>True on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.BrepFace.DuplicateFace(System.Boolean)">
            <summary>
            Duplicate a face from the brep to create new single face brep.
            </summary>
            <param name="duplicateMeshes">If true, shading meshes will be copied as well.</param>
            <returns>A new single-face brep synonymous with the current Face.</returns>
        </member>
        <member name="M:Rhino.Geometry.BrepFace.DuplicateSurface">
            <summary>
            Get a copy to the untrimmed surface that this face is based on.
            </summary>
            <returns>A copy of this face's underlying surface.</returns>
        </member>
        <member name="M:Rhino.Geometry.BrepFace.Split(System.Collections.Generic.IEnumerable{Rhino.Geometry.Curve},System.Double)">
            <summary>
            Split this face using 3D trimming curves.
            </summary>
            <param name="curves">Curves to split with.</param>
            <param name="tolerance">Tolerance for splitting, when in doubt use the Document Absolute Tolerance.</param>
            <returns>A Brep consisting of all the split fragments, or null on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.BrepFace.IsPointOnFace(System.Double,System.Double)">
            <summary>
            Test if a parameter space point is on the interior of a trimmed face.
            </summary>
            <param name="u">Parameter space point u value.</param>
            <param name="v">Parameter space point v value.</param>
            <returns>A value describing the spatial relationship between the point and the face.</returns>
        </member>
        <member name="M:Rhino.Geometry.BrepFace.TrimAwareIsoCurve(System.Int32,System.Double)">
            <summary>
            Similar to IsoCurve function, except this function pays attention to trims on faces
            and may return multiple curves.
            </summary>
            <param name="direction">Direction of isocurve.
            <para>0 = Isocurve connects all points with a constant U value.</para><para>1 = Isocurve connects all points with a constant V value.</para></param>
            <param name="constantParameter">Surface parameter that remains identical along the isocurves.</param>
            <returns>Isoparametric curves connecting all points with the constantParameter value.</returns>
            <remarks>
            In this function "direction" indicates which direction the resulting curve runs.
            0: horizontal, 1: vertical
            In the other Surface functions that take a "direction" argument,
            "direction" indicates if "constantParameter" is a "u" or "v" parameter.
            </remarks>
        </member>
        <member name="M:Rhino.Geometry.BrepFace.GetMesh">
            <summary>
            Get the shading mesh that is associated with this Face.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.BrepFace.AdjacentEdges">
            <summary>
            Gets the indices of all the BrepEdges that delineate this Face.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.BrepFace.AdjacentFaces">
            <summary>
            Gets the indices of all the BrepFaces that surround (are adjacent to) this face.
            </summary>
        </member>
        <member name="T:Rhino.Geometry.Collections.BrepFaceList">
            <summary>
            Provides access to all the Faces in a Brep object.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Collections.BrepFaceList.Item(System.Int32)">
            <summary>
            Gets the BrepFace at the given index.
            The index must be valid or an IndexOutOfRangeException will be thrown.
            </summary>
            <param name="index">Index of BrepFace to access.</param>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when the index is invalid.</exception>
            <returns>The BrepFace at [index].</returns>
        </member>
        <member name="P:Rhino.Geometry.Collections.BrepFaceList.Count">
            <summary>
            Gets the number of brep faces.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Collections.BrepFaceList.ShrinkFaces">
            <summary>
            Shrink all the faces in this Brep. Sometimes the surfaces extend far beyond the trimming
            boundaries of the Brep Face. This function will remove those portions of the surfaces
            that are not used.
            </summary>
            <returns>True on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.BrepFaceList.SplitKinkyFaces">
            <summary>
            Split any faces with creases into G1 pieces.
            </summary>
            <returns>True on success, false on failure.</returns>
            <remarks>If you need to detect whether splitting occured,
            compare the before and after values of Faces.Count </remarks>
        </member>
        <member name="M:Rhino.Geometry.Collections.BrepFaceList.SplitKinkyFaces(System.Double)">
            <summary>
            Split any faces with creases into G1 pieces.
            </summary>
            <param name="kinkTolerance">Tolerance (in radians) to use for crease detection.</param>
            <returns>True on success, false on failure.</returns>
            <remarks>If you need to detect whether splitting occured,
            compare the before and after values of Faces.Count </remarks>
        </member>
        <member name="M:Rhino.Geometry.Collections.BrepFaceList.SplitKinkyFaces(System.Double,System.Boolean)">
            <summary>
            Split any faces with creases into G1 pieces.
            </summary>
            <param name="kinkTolerance">Tolerance (in radians) to use for crease detection.</param>
            <param name="compact">If true, the Brep will be compacted if possible.</param>
            <returns>True on success, false on failure.</returns>
            <remarks>If you need to detect whether splitting occured,
            compare the before and after values of Faces.Count </remarks>
        </member>
        <member name="T:Rhino.Geometry.Collections.BrepEdgeList">
            <summary>
            Provides access to all the Edges in a Brep object.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Collections.BrepEdgeList.Item(System.Int32)">
            <summary>
            Gets the BrepEdge at the given index.
            The index must be valid or an IndexOutOfRangeException will be thrown.
            </summary>
            <param name="index">Index of BrepEdge to access.</param>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when the index is invalid.</exception>
            <returns>The BrepEdge at [index].</returns>
        </member>
        <member name="P:Rhino.Geometry.Collections.BrepEdgeList.Count">
            <summary>
            Gets the number of brep edges.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.DetailView.SetScale(System.Double,Rhino.UnitSystem,System.Double,Rhino.UnitSystem)">
            <summary>
            Set the detail viewport's projection so geometry is displayed at a certain scale
            </summary>
            <param name="modelLength">reference model length</param>
            <param name="modelUnits">units for model length</param>
            <param name="pageLength">length on page that the modelLength should equal</param>
            <param name="pageUnits">units for page length</param>
            <returns>
            true on success
            false if the viewport's projection is perspective or the input values do not make sense
            </returns>
        </member>
        <member name="T:Rhino.Geometry.Hatch">
            <summary>
            Represents a hatch in planar boundary loop or loops.
            This is a 2d entity with a plane defining a local coordinate system.
            The loops, patterns, angles, etc are all in this local coordinate system.
            The Hatch object manages the plane and loop array
            Fill definitions are in the HatchPattern or class derived from HatchPattern
            Hatch has an index to get the pattern definition from the pattern table
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Intersect.Intersection.LineLine(Rhino.Geometry.Line,Rhino.Geometry.Line,System.Double@,System.Double@,System.Double,System.Boolean)">
            <summary>
            Intersect two lines.
            </summary>
            <param name="lineA">First line for intersection.</param>
            <param name="lineB">Second line for intersection.</param>
            <param name="a">
            Parameter on lineA that is closest to LineB.
            The shortest distance between the lines is the chord from lineA.PointAt(a) to lineB.PointAt(b)
            </param>
            <param name="b">
            Parameter on lineB that is closest to LineA.
            The shortest distance between the lines is the chord from lineA.PointAt(a) to lineB.PointAt(b)
            </param>
            <param name="tolerance">
            If tolerance &gt; 0.0, then an intersection is reported only if the distance between the points is &lt;= tolerance.
            If tolerance &lt;= 0.0, then the closest point between the lines is reported.
            </param>
            <param name="finiteSegments">
            If True, the input lines are treated as finite segments.
            If False, the input lines are treated as infinite lines.
            </param>
            <returns>
            True if a closest point can be calculated and the result passes the tolerance parameter test.
            </returns>
            <remarks>
            If the lines are exactly parallel, meaning the system of equations used to find a and b
            has no numerical solution, then false is returned. If the lines are nearly parallel, which
            is often numerically True even if you think the lines look exactly parallel, then the
            closest points are found and true is returned. So, if you care about weeding out "parallel"
            lines, then you need to do something like the following:
            <code lang="cs">
            bool rc = Intersect.LineLine(lineA, lineB, out a, out b, tolerance, segments);
            if (rc)
            {
            double angle_tol = RhinoMath.ToRadians(1.0); // or whatever
            double parallel_tol = Math.Cos(angle_tol);
            if ( Math.Abs(lineA.UnitTangent * lineB.UnitTangent) &gt;= parallel_tol )
            {
            ... do whatever you think is appropriate
            }
            }
            </code><code lang="vb">
            Dim rc As Boolean = Intersect.LineLine(lineA, lineB, a, b, tolerance, segments)
            If (rc) Then
            Dim angle_tol As Double = RhinoMath.ToRadians(1.0) 'or whatever
            Dim parallel_tolerance As Double = Math.Cos(angle_tol)
            If (Math.Abs(lineA.UnitTangent * lineB.UnitTangent) &gt;= parallel_tolerance) Then
            ... do whatever you think is appropriate
            End If
            End If
            </code></remarks>
        </member>
        <member name="M:Rhino.Geometry.Intersect.Intersection.LineLine(Rhino.Geometry.Line,Rhino.Geometry.Line,System.Double@,System.Double@)">
            <summary>
            Find the closest point between two infinite lines.
            </summary>
            <param name="lineA">First line.</param>
            <param name="lineB">Second line.</param>
            <param name="a">
            Parameter on lineA that is closest to lineB.
            The shortest distance between the lines is the chord from lineA.PointAt(a) to lineB.PointAt(b)
            </param>
            <param name="b">
            Parameter on lineB that is closest to lineA.
            The shortest distance between the lines is the chord from lineA.PointAt(a) to lineB.PointAt(b)
            </param>
            <returns>
            True if points are found and false if the lines are numerically parallel.
            Numerically parallel means the 2x2 matrix:
            <para>+AoA  -AoB</para><para>-AoB  +BoB</para>
            is numerically singular, where A = (lineA.To - lineA.From) and B = (lineB.To-lineB.From)
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Intersect.Intersection.LinePlane(Rhino.Geometry.Line,Rhino.Geometry.Plane,System.Double@)">
            <summary>
            Intersect a line and a plane. This function only returns true if the
            intersection result is a single point (i.e. if the line is coincident with
            the plane then no intersection is assumed).
            </summary>
            <param name="line">Line for intersection.</param>
            <param name="plane">Plane to intersect.</param>
            <param name="lineParameter">Parameter on line where intersection occurs.
            If the parameter is not within the {0, 1} Interval then the finite segment
            does not intersect the plane.</param>
            <returns>True on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Intersect.Intersection.PlanePlane(Rhino.Geometry.Plane,Rhino.Geometry.Plane,Rhino.Geometry.Line@)">
            <summary>
            Intersect two planes and return the intersection line. If the planes are
            parallel or coincident, no intersection is assumed.
            </summary>
            <param name="planeA">First plane for intersection.</param>
            <param name="planeB">Second plane for intersection.</param>
            <param name="intersectionLine">If this function returns true,
            the intersectionLine parameter will return the line where the planes intersect.</param>
            <returns>True on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Intersect.Intersection.PlanePlanePlane(Rhino.Geometry.Plane,Rhino.Geometry.Plane,Rhino.Geometry.Plane,Rhino.Geometry.Point3d@)">
            <summary>
            Intersect three planes to find the single point they all share.
            </summary>
            <param name="planeA">First plane for intersection.</param>
            <param name="planeB">Second plane for intersection.</param>
            <param name="planeC">Third plane for intersection.</param>
            <param name="intersectionPoint">Point where all three planes converge.</param>
            <returns>True on success, false on failure. If at least two out of the three planes
            are parallel or coincident, there will be no solution.</returns>
        </member>
        <member name="M:Rhino.Geometry.Intersect.Intersection.PlaneCircle(Rhino.Geometry.Plane,Rhino.Geometry.Circle,System.Double@,System.Double@)">
            <summary>
            Intersect a plane with a circle using exact calculations.
            </summary>
            <param name="plane">Plane to intersect.</param>
            <param name="circle">Circe to intersect.</param>
            <param name="firstCircleParameter">First intersection parameter on circle if successful or RhinoMath.UnsetValue if not.</param>
            <param name="secondCircleParameter">Second intersection parameter on circle if successful or RhinoMath.UnsetValue if not.</param>
            <returns>The type of intersection that occured.</returns>
        </member>
        <member name="M:Rhino.Geometry.Intersect.Intersection.PlaneSphere(Rhino.Geometry.Plane,Rhino.Geometry.Sphere,Rhino.Geometry.Circle@)">
            <summary>
            Intersect a plane with a sphere using exact calculations.
            </summary>
            <param name="plane">Plane to intersect.</param>
            <param name="sphere">Sphere to intersect.</param>
            <param name="intersectionCircle">Intersection result.</param>
            <returns>If None is returned, the intersectionCircle has a radius of zero and the center point
            is the point on the plane closest to the sphere.</returns>
        </member>
        <member name="M:Rhino.Geometry.Intersect.Intersection.LineCircle(Rhino.Geometry.Line,Rhino.Geometry.Circle,System.Double@,Rhino.Geometry.Point3d@,System.Double@,Rhino.Geometry.Point3d@)">
            <summary>
            Intersect a line with a circle using exact calculations.
            </summary>
            <param name="line">Line for intersection.</param>
            <param name="circle">Circle for intersection.</param>
            <param name="t1">Parameter on line for first intersection.</param>
            <param name="point1">Point on circle closest to first intersection.</param>
            <param name="t2">Parameter on line for second intersection.</param>
            <param name="point2">Point on circle closest to second intersection.</param>
            <returns>
            If Single is returned, only t1 and point1 will have valid values.
            If Multiple is returned, t2 and point2 will also be filled out.
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Intersect.Intersection.LineSphere(Rhino.Geometry.Line,Rhino.Geometry.Sphere,Rhino.Geometry.Point3d@,Rhino.Geometry.Point3d@)">
            <summary>
            Intersect a line with a sphere using exact calculations.
            </summary>
            <param name="line">Line for intersection.</param>
            <param name="sphere">Sphere for intersection.</param>
            <param name="intersectionPoint1">First intersection point.</param>
            <param name="intersectionPoint2">Second intersection point.</param>
            <returns>If None is returned, the first point is the point on the line closest to the sphere and
            the second point is the point on the sphere closest to the line.
            If Single is returned, the first point is the point on the line and the second point is the
            same point on the sphere.</returns>
        </member>
        <member name="M:Rhino.Geometry.Intersect.Intersection.LineCylinder(Rhino.Geometry.Line,Rhino.Geometry.Cylinder,Rhino.Geometry.Point3d@,Rhino.Geometry.Point3d@)">
            <summary>
            Intersect a line with a cylinder using exact calculations.
            </summary>
            <param name="line">Line for intersection.</param>
            <param name="cylinder">Cylinder for intersection.</param>
            <param name="intersectionPoint1">First intersection point.</param>
            <param name="intersectionPoint2">Second intersection point.</param>
            <returns>If None is returned, the first point is the point on the line closest to the cylinder and
            the second point is the point on the cylinder closest to the line.
            If Single is returned, the first point is the point on the line and the second point is the
            same point on the cylinder.</returns>
        </member>
        <member name="M:Rhino.Geometry.Intersect.Intersection.SphereSphere(Rhino.Geometry.Sphere,Rhino.Geometry.Sphere,Rhino.Geometry.Circle@)">
            <summary>
            Intersect two spheres using exact calculations.
            </summary>
            <param name="sphereA">First sphere to intersect.</param>
            <param name="sphereB">Second sphere to intersect.</param>
            <param name="intersectionCircle">
            If intersection is a point, then that point will be the center, radius 0.
            </param>
            <returns>
            The intersection type.
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Intersect.Intersection.LineBox(Rhino.Geometry.Line,Rhino.Geometry.BoundingBox,System.Double,Rhino.Geometry.Interval@)">
            <summary>
            Intersect an infinite line and an axis aligned bounding box.
            </summary>
            <param name="box">BoundingBox to intersect.</param>
            <param name="line">Line for intersection.</param>
            <param name="tolerance">
            If tolerance &gt; 0.0, then the intersection is performed against a box
            that has each side moved out by tolerance.
            </param>
            <param name="lineParameters">
            The chord from line.PointAt(lineParameters.T0) to line.PointAt(lineParameters.T1) is the intersection.
            </param>
            <returns>True if the line intersects the box, false if no intersection occurs.</returns>
        </member>
        <member name="M:Rhino.Geometry.Intersect.Intersection.LineBox(Rhino.Geometry.Line,Rhino.Geometry.Box,System.Double,Rhino.Geometry.Interval@)">
            <summary>
            Intersect an infinite line with a box volume.
            </summary>
            <param name="box">Box to intersect.</param>
            <param name="line">Line for intersection.</param>
            <param name="tolerance">
            If tolerance &gt; 0.0, then the intersection is performed against a box
            that has each side moved out by tolerance.
            </param>
            <param name="lineParameters">
            The chord from line.PointAt(lineParameters.T0) to line.PointAt(lineParameters.T1) is the intersection.
            </param>
            <returns>True if the line intersects the box, false if no intersection occurs.</returns>
        </member>
        <member name="M:Rhino.Geometry.Intersect.Intersection.MeshPlane(Rhino.Geometry.Mesh,Rhino.Geometry.Plane)">
            <summary>
            Intersect a mesh with an (infinite) plane.
            </summary>
            <param name="mesh">Mesh to intersect.</param>
            <param name="plane">Plane to intersect with.</param>
            <returns>An array of polylines describing the intersection loops or null (Nothing in Visual Basic) if no intersections could be found.</returns>
        </member>
        <member name="M:Rhino.Geometry.Intersect.Intersection.MeshPlane(Rhino.Geometry.Mesh,System.Collections.Generic.IEnumerable{Rhino.Geometry.Plane})">
            <summary>
            Intersect a mesh with a collection of (infinite) planes.
            </summary>
            <param name="mesh">Mesh to intersect.</param>
            <param name="planes">Planes to intersect with.</param>
            <returns>An array of polylines describing the intersection loops or null (Nothing in Visual Basic) if no intersections could be found.</returns>
        </member>
        <member name="M:Rhino.Geometry.Intersect.Intersection.CurvePlane(Rhino.Geometry.Curve,Rhino.Geometry.Plane,System.Double)">
            <summary>
            Intersect a curve with an (infinite) plane.
            </summary>
            <param name="curve">Curve to intersect.</param>
            <param name="plane">Plane to intersect with.</param>
            <param name="tolerance">Tolerance to use during intersection.</param>
            <returns>A list of intersection events or null if no intersections were recorded.</returns>
        </member>
        <member name="M:Rhino.Geometry.Intersect.Intersection.BrepPlane(Rhino.Geometry.Brep,Rhino.Geometry.Plane,System.Double,Rhino.Geometry.Curve[]@,Rhino.Geometry.Point3d[]@)">
            <summary>
            Intersect a Brep with an (infinite) plane.
            </summary>
            <param name="brep">Brep to intersect.</param>
            <param name="plane">Plane to intersect with.</param>
            <param name="tolerance">Tolerance to use for intersections.</param>
            <param name="intersectionCurves">The intersection curves will be returned here.</param>
            <param name="intersectionPoints">The intersection points will be returned here.</param>
            <returns>True on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Intersect.Intersection.ExtendThroughBox(Rhino.Geometry.Plane,Rhino.Geometry.BoundingBox,System.Double)">
            <summary>
            Utility function for creating a PlaneSurface through a Box.
            </summary>
            <param name="plane">Plane to extend.</param>
            <param name="box">Box to extend through.</param>
            <param name="fuzzyness">Box will be inflated by this amount.</param>
            <returns>A Plane surface through the box or null.</returns>
        </member>
        <member name="M:Rhino.Geometry.Intersect.Intersection.CurveSelf(Rhino.Geometry.Curve,System.Double)">
            <summary>
            Find the places where a curve intersects itself.
            </summary>
            <param name="curve">Curve for self-intersections.</param>
            <param name="tolerance">Intersection tolerance. If the curve approaches itself to within tolerance,
            an intersection is assumed.</param>
            <returns>A list of intersection events.</returns>
        </member>
        <member name="M:Rhino.Geometry.Intersect.Intersection.CurveCurve(Rhino.Geometry.Curve,Rhino.Geometry.Curve,System.Double,System.Double)">
            <summary>
            Find the intersections between two curves.
            </summary>
            <param name="curveA">First curve for intersection.</param>
            <param name="curveB">Second curve for intersection.</param>
            <param name="tolerance">Intersection tolerance. If the curves approach each other to within tolerance,
            an intersection is assumed.</param>
            <param name="overlapTolerance">
            </param>
            <returns>A list of intersection events.</returns>
        </member>
        <member name="M:Rhino.Geometry.Intersect.Intersection.CurveSurface(Rhino.Geometry.Curve,Rhino.Geometry.Surface,System.Double,System.Double)">
            <summary>
            Intersect a curve and a surface.
            </summary>
            <param name="curve">Curve for intersection.</param>
            <param name="surface">Surface for intersection.</param>
            <param name="tolerance">Intersection tolerance. If the curve approaches the surface to within tolerance,
            an intersection is assumed.</param>
            <param name="overlapTolerance">
            </param>
            <returns>A list of intersection events.</returns>
        </member>
        <member name="M:Rhino.Geometry.Intersect.Intersection.CurveSurface(Rhino.Geometry.Curve,Rhino.Geometry.Interval,Rhino.Geometry.Surface,System.Double,System.Double)">
            <summary>
            Intersect a (sub)curve and a surface.
            </summary>
            <param name="curve">Curve for intersection.</param>
            <param name="curveDomain">Domain of surbcurve to take into consideration for Intersections.</param>
            <param name="surface">Surface for intersection.</param>
            <param name="tolerance">Intersection tolerance. If the curve approaches the surface to within tolerance,
            an intersection is assumed.</param>
            <param name="overlapTolerance">
            </param>
            <returns>A list of intersection events.</returns>
        </member>
        <member name="M:Rhino.Geometry.Intersect.Intersection.CurveBrep(Rhino.Geometry.Curve,Rhino.Geometry.Brep,System.Double,Rhino.Geometry.Curve[]@,Rhino.Geometry.Point3d[]@)">
            <summary>
            Intersect a curve with a Brep. This function returns the 3D points of intersection
            and 3D overlap curves. If an error occurs while processing overlap curves, this function
            will return False, but it will still provide partial results.
            </summary>
            <param name="curve">Curve for intersection.</param>
            <param name="brep">Brep for intersection.</param>
            <param name="tolerance">Fitting and near miss tolerance.</param>
            <param name="overlapCurves">The overlap curves will be returned here.</param>
            <param name="intersectionPoints">The intersection points will be returned here.</param>
            <returns>True on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Intersect.Intersection.BrepBrep(Rhino.Geometry.Brep,Rhino.Geometry.Brep,System.Double,Rhino.Geometry.Curve[]@,Rhino.Geometry.Point3d[]@)">
            <summary>
            Intersect two Breps.
            </summary>
            <param name="brepA">First Brep for intersection.</param>
            <param name="brepB">Second Brep for intersection.</param>
            <param name="tolerance">Intersection tolerance.</param>
            <param name="intersectionCurves">The intersection curves will be returned here.</param>
            <param name="intersectionPoints">The intersection points will be returned here.</param>
            <returns>True on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Intersect.Intersection.MeshMeshFast(Rhino.Geometry.Mesh,Rhino.Geometry.Mesh)">
            <summary>
            Quickly intersect two meshes. Overlaps and near misses are ignored.
            </summary>
            <param name="meshA">First mesh for intersection.</param>
            <param name="meshB">Second mesh for intersection.</param>
            <returns>An array of intersection line segments.</returns>
        </member>
        <member name="M:Rhino.Geometry.Intersect.Intersection.MeshRay(Rhino.Geometry.Mesh,Rhino.Geometry.Ray3d)">
            <summary>Finds the first intersection of a ray with a mesh</summary>
            <param name="mesh">
            </param>
            <param name="ray">
            </param>
            <returns>
            &gt;= 0.0 parameter along ray if successful.
            &lt; 0.0 if no intersection found
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Intersect.Intersection.MeshRay(Rhino.Geometry.Mesh,Rhino.Geometry.Ray3d,System.Int32[]@)">
            <summary>Finds the first intersection of a ray with a mesh</summary>
            <param name="mesh">
            </param>
            <param name="ray">
            </param>
            <param name="meshFaceIndices">faces on mesh that ray intersects</param>
            <returns>
            &gt;= 0.0 parameter along ray if successful.
            &lt; 0.0 if no intersection found
            </returns>
            <remarks>
            The ray may intersect more than one face in cases where the ray hits
            the edge between two faces or the vertex corner shared by multiple faces.
            </remarks>
        </member>
        <member name="M:Rhino.Geometry.Intersect.Intersection.MeshPolyline(Rhino.Geometry.Mesh,Rhino.Geometry.PolylineCurve,System.Int32[]@)">
            <summary>
            Find the intersection of a mesh and a polyline
            </summary>
            <param name="mesh">
            </param>
            <param name="curve">
            </param>
            <param name="faceIds">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Intersect.Intersection.RayShoot(Rhino.Geometry.Ray3d,System.Collections.Generic.IEnumerable{Rhino.Geometry.GeometryBase},System.Int32)">
            <summary>
            Get point intersections by shooting a ray at a collection of surfaces
            </summary>
            <param name="ray">
            </param>
            <param name="geometry">Only Surface and Brep objects are currently supported. Trims are ignored on Breps</param>
            <param name="maxReflections">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Intersect.Intersection.ProjectPointsToMeshes(System.Collections.Generic.IEnumerable{Rhino.Geometry.Mesh},System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d},Rhino.Geometry.Vector3d,System.Double)">
            <summary>
            Projects points onto meshes
            </summary>
            <param name="meshes">the meshes to project on to</param>
            <param name="points">the points to project</param>
            <param name="direction">the direction to project</param>
            <param name="tolerance">
            Projection tolerances used for culling close points and for line-mesh intersection
            </param>
            <returns>
            Array of projected points.
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Intersect.Intersection.ProjectPointsToBreps(System.Collections.Generic.IEnumerable{Rhino.Geometry.Brep},System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d},Rhino.Geometry.Vector3d,System.Double)">
            <summary>
            Projects points onto breps
            </summary>
            <param name="breps">the breps to project on to</param>
            <param name="points">the points to project</param>
            <param name="direction">the direction to project</param>
            <param name="tolerance">
            </param>
            <returns>
            Array of projected points.
            </returns>
        </member>
        <member name="T:Rhino.Geometry.Intersect.PlaneCircleIntersection">
            <summary>
            Represents all possible cases of a Plane|Circle intersection event.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.Intersect.PlaneCircleIntersection.None">
            <summary>
            No intersections. Either because radius is too small or because circle plane is parallel but not coincident with the intersection plane.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.Intersect.PlaneCircleIntersection.Tangent">
            <summary>
            Tangent (one point) intersection
            </summary>
        </member>
        <member name="F:Rhino.Geometry.Intersect.PlaneCircleIntersection.Secant">
            <summary>
            Secant (two point) intersection.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.Intersect.PlaneCircleIntersection.Parallel">
            <summary>
            Circle and plane are planar but not coincident.
            Parallel indicates no intersection took place.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.Intersect.PlaneCircleIntersection.Coincident">
            <summary>
            Circle and plane are co-planar, they intersect everywhere.
            </summary>
        </member>
        <member name="T:Rhino.Geometry.Intersect.PlaneSphereIntersection">
            <summary>
            Represents all possible cases of a Plane|Sphere intersection event.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.Intersect.PlaneSphereIntersection.None">
            <summary>
            No intersections.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.Intersect.PlaneSphereIntersection.Point">
            <summary>
            Tangent intersection.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.Intersect.PlaneSphereIntersection.Circle">
            <summary>
            Circular intersection.
            </summary>
        </member>
        <member name="T:Rhino.Geometry.Intersect.LineCircleIntersection">
            <summary>
            Represents all possible cases of a Line|Circle intersection event.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.Intersect.LineCircleIntersection.None">
            <summary>
            No intersections.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.Intersect.LineCircleIntersection.Single">
            <summary>
            One intersection.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.Intersect.LineCircleIntersection.Multiple">
            <summary>
            Two intersections.
            </summary>
        </member>
        <member name="T:Rhino.Geometry.Intersect.LineSphereIntersection">
            <summary>
            Represents all possible cases of a Line|Sphere intersection event.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.Intersect.LineSphereIntersection.None">
            <summary>
            No intersections.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.Intersect.LineSphereIntersection.Single">
            <summary>
            One intersection.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.Intersect.LineSphereIntersection.Multiple">
            <summary>
            Two intersections.
            </summary>
        </member>
        <member name="T:Rhino.Geometry.Intersect.LineCylinderIntersection">
            <summary>
            Represents all possible cases of a Line|Cylinder intersection event.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.Intersect.LineCylinderIntersection.None">
            <summary>
            No intersections.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.Intersect.LineCylinderIntersection.Single">
            <summary>
            One intersection.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.Intersect.LineCylinderIntersection.Multiple">
            <summary>
            Two intersections.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.Intersect.LineCylinderIntersection.Overlap">
            <summary>
            Line lies on cylinder.
            </summary>
        </member>
        <member name="T:Rhino.Geometry.Intersect.SphereSphereIntersection">
            <summary>
            Represents all possible cases of a Sphere|Sphere intersection event.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.Intersect.SphereSphereIntersection.None">
            <summary>
            Spheres do not intersect.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.Intersect.SphereSphereIntersection.Point">
            <summary>
            Spheres touch at a single point.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.Intersect.SphereSphereIntersection.Circle">
            <summary>
            Spheres intersect at a circle.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.Intersect.SphereSphereIntersection.Overlap">
            <summary>
            Spheres are identical.
            </summary>
        </member>
        <member name="T:Rhino.Geometry.Intersect.IntersectionEvent">
            <summary>
            Provides all the information for a single Curve Intersection event.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Intersect.IntersectionEvent.IsPoint">
            <summary>
            All curve intersection events are either a single point or an overlap
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Intersect.IntersectionEvent.IsOverlap">
            <summary>
            All curve intersection events are either a single point or an overlap
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Intersect.IntersectionEvent.PointA">
            <summary>
            Gets the point on Curve A where the intersection occured.
            If the intersection type is overlap, then this will return the
            start of the overlap region.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Intersect.IntersectionEvent.PointA2">
            <summary>
            Gets the end point of the overlap on Curve A.
            If the intersection type is not overlap, this value is meaningless.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Intersect.IntersectionEvent.PointB">
            <summary>
            Gets the point on Curve B (or Surface B) where the intersection occured.
            If the intersection type is overlap, then this will return the
            start of the overlap region.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Intersect.IntersectionEvent.PointB2">
            <summary>
            Gets the end point of the overlap on Curve B (or Surface B).
            If the intersection type is not overlap, this value is meaningless.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Intersect.IntersectionEvent.ParameterA">
            <summary>
            Gets the parameter on Curve A where the intersection occured.
            If the intersection type is overlap, then this will return the
            start of the overlap region.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Intersect.IntersectionEvent.ParameterB">
            <summary>
            Gets the parameter on Curve A where the intersection occured.
            If the intersection type is overlap, then this will return the
            start of the overlap region.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Intersect.IntersectionEvent.OverlapA">
            <summary>
            Gets the interval on curve A where the overlap occurs.
            If the intersection type is not overlap, this value is meaningless.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Intersect.IntersectionEvent.OverlapB">
            <summary>
            Gets the interval on curve B where the overlap occurs.
            If the intersection type is not overlap, this value is meaningless.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Intersect.IntersectionEvent.SurfacePointParameter(System.Double@,System.Double@)">
            <summary>
            If this instance records a Curve|Surface intersection event,
            <i>and</i> the intersection type is <b>point</b>, then use this function
            to get the U and V parameters on the surface where the intersection occurs.
            </summary>
            <param name="u">Parameter on surface u direction where the intersection occurs.</param>
            <param name="v">Parameter on surface v direction where the intersection occurs.</param>
        </member>
        <member name="M:Rhino.Geometry.Intersect.IntersectionEvent.SurfaceOverlapParameter(Rhino.Geometry.Interval@,Rhino.Geometry.Interval@)">
            <summary>
            If this instance records a Curve|Surface intersection event,
            <i>and</i> the intersection type if <b>overlap</b>, then use this function
            to get the U and V domains on the surface where the overlap occurs.
            </summary>
            <param name="uDomain">Domain along surface U direction for overlap event.</param>
            <param name="vDomain">Domain along surface V direction for overlap event.</param>
        </member>
        <member name="T:Rhino.Geometry.Intersect.CurveIntersections">
            <summary>
            Maintains an ordered list of Curve Intersection results.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Intersect.CurveIntersections.#ctor(System.IntPtr,System.Int32)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Intersect.CurveIntersections.System#Collections#Generic#IList&lt;Rhino#Geometry#Intersect#IntersectionEvent&gt;#Item(System.Int32)">
            <summary>
            Gets the intersection event data at the given index; setting always throws an exception.
            </summary>
            <param name="index">Index of intersection event to retrieve.</param>
            <returns>The intersection event.</returns>
            <exception cref="T:System.NotSupportedException">NotSupportedException is always thrown when
            setting this indexer.</exception>
        </member>
        <member name="P:Rhino.Geometry.Intersect.CurveIntersections.Item(System.Int32)">
            <summary>
            Gets the intersection event data at the given index.
            </summary>
            <param name="index">Index of intersection event to retrieve.</param>
        </member>
        <member name="P:Rhino.Geometry.Intersect.CurveIntersections.System#Collections#Generic#ICollection&lt;Rhino#Geometry#Intersect#IntersectionEvent&gt;#IsReadOnly">
            <summary>
            This collection is readonly, so this property returns always true.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Intersect.CurveIntersections.Count">
            <summary>
            Gets the number of recorded intersection events.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Intersect.CurveIntersections.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns a non-generic enumerator that is capable of yielding all IntersectionEvents in the collection.
            </summary>
            <returns>The constructed non-generic enumerator.</returns>
        </member>
        <member name="M:Rhino.Geometry.Intersect.CurveIntersections.System#Collections#Generic#ICollection&lt;Rhino#Geometry#Intersect#IntersectionEvent&gt;#Remove(Rhino.Geometry.Intersect.IntersectionEvent)">
            <summary>
            Removal is not supported and this method always throws NotSupportedException.
            </summary>
            <exception cref="T:System.NotSupportedException">NotSupportedException is always thrown.</exception>
        </member>
        <member name="M:Rhino.Geometry.Intersect.CurveIntersections.System#Collections#Generic#ICollection&lt;Rhino#Geometry#Intersect#IntersectionEvent&gt;#Contains(Rhino.Geometry.Intersect.IntersectionEvent)">
            <summary>
            Allows to establish whether this collection contains and IntersectionEvent.
            </summary>
            <param name="item">Object to be found.</param>
            <returns>True if element is contained; otherwise false.</returns>
        </member>
        <member name="M:Rhino.Geometry.Intersect.CurveIntersections.System#Collections#Generic#ICollection&lt;Rhino#Geometry#Intersect#IntersectionEvent&gt;#Clear">
            <summary>
            Clearing is not supported and this method always throws NotSupportedException.
            </summary>
            <exception cref="T:System.NotSupportedException">NotSupportedException is always thrown.</exception>
        </member>
        <member name="M:Rhino.Geometry.Intersect.CurveIntersections.System#Collections#Generic#ICollection&lt;Rhino#Geometry#Intersect#IntersectionEvent&gt;#Add(Rhino.Geometry.Intersect.IntersectionEvent)">
            <summary>
            Addition is not supported and this method always throws NotSupportedException.
            </summary>
            <param name="item">Addition is not supported and this value is ignored.</param>
            <exception cref="T:System.NotSupportedException">NotSupportedException is always thrown.</exception>
        </member>
        <member name="M:Rhino.Geometry.Intersect.CurveIntersections.System#Collections#Generic#IList&lt;Rhino#Geometry#Intersect#IntersectionEvent&gt;#RemoveAt(System.Int32)">
            <summary>
            Removal is not supported and this method always throws NotSupportedException.
            </summary>
            <param name="index">Removal is not supported and this value is ignored.</param>
            <exception cref="T:System.NotSupportedException">NotSupportedException is always thrown.</exception>
        </member>
        <member name="M:Rhino.Geometry.Intersect.CurveIntersections.System#Collections#Generic#IList&lt;Rhino#Geometry#Intersect#IntersectionEvent&gt;#Insert(System.Int32,Rhino.Geometry.Intersect.IntersectionEvent)">
            <summary>
            Inserting is not supported and this method always throws NotSupportedException.
            </summary>
            <param name="index">Inserting is not supported and this value is ignored.</param>
            <param name="item">Inserting is not supported and this value is ignored.</param>
            <exception cref="T:System.NotSupportedException">NotSupportedException is always thrown.</exception>
        </member>
        <member name="M:Rhino.Geometry.Intersect.CurveIntersections.System#Collections#Generic#IList&lt;Rhino#Geometry#Intersect#IntersectionEvent&gt;#IndexOf(Rhino.Geometry.Intersect.IntersectionEvent)">
            <summary>
            Determines the index of an IntersectionEvent.
            </summary>
            <param name="item">The IntersectionEvent to be found.</param>
            <returns>The index in case the IntersectionEvent was found; -1 otherwise.</returns>
        </member>
        <member name="M:Rhino.Geometry.Intersect.CurveIntersections.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Intersect.CurveIntersections.CopyTo(Rhino.Geometry.Intersect.IntersectionEvent[],System.Int32)">
            <summary>
            Copies all intersection results into another array, departing at an index in the target array.
            </summary>
            <param name="array">The target array. This value cannot be null.</param>
            <param name="arrayIndex">Zero-based index in which to start the copy.</param>
            <exception cref="T:System.ArgumentNullException">If array is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If arrayIndex is less than 0.</exception>
            <exception cref="T:System.ArgumentException">If array is multi-dimensional; or if arrayIndex is
            larger than or equal to the length of this collection; or this collection contains more
            IntersectionEvents than the ones that can be stored in array after and including arrayIndex.
            </exception>
        </member>
        <member name="M:Rhino.Geometry.Intersect.CurveIntersections.GetEnumerator">
            <summary>
            Returns an enumerator that is capable of yielding all IntersectionEvents in the collection.
            </summary>
            <returns>The constructed enumerator.</returns>
        </member>
        <member name="P:Rhino.Geometry.Light.IsEnabled">
            <summary>
            Turn light on or off
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Light.CoordinateSystem">
            <summary>
            Determined by LightStyle
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Light.SpotAngleRadians">
            <summary>
            ignored for non-spot lights
            angle = 0 to pi/2  (0 to 90 degrees)
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Light.SpotExponent">
            <summary>
            The spot exponent varies from 0.0 to 128.0 and provides
            an exponential interface for controling the focus or
            concentration of a spotlight (like the
            OpenGL GL_SPOT_EXPONENT parameter).  The spot exponent
            and hot spot parameters are linked; changing one will
            change the other.
            A hot spot setting of 0.0 corresponds to a spot exponent of 128.
            A hot spot setting of 1.0 corresponds to a spot exponent of 0.0.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Light.HotSpot">
            <summary>
            The hot spot setting runs from 0.0 to 1.0 and is used to
            provides a linear interface for controling the focus or
            concentration of a spotlight.
            A hot spot setting of 0.0 corresponds to a spot exponent of 128.
            A hot spot setting of 1.0 corresponds to a spot exponent of 0.0.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Light.Length">
            <summary>
            linear and rectangular light parameter
            (ignored for non-linear/rectangular lights)
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Light.Width">
            <summary>
            linear and rectangular light parameter
            (ignored for non-linear/rectangular lights)
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Light.SetAttenuation(System.Double,System.Double,System.Double)">
            <summary>
            attenuation settings (ignored for "directional" and "ambient" lights)
            attenuation = 1/(a0 + d*a1 + d^2*a2) where d = distance to light
            </summary>
            <param name="a0">
            </param>
            <param name="a1">
            </param>
            <param name="a2">
            </param>
        </member>
        <member name="M:Rhino.Geometry.Light.GetAttenuation(System.Double)">
            <summary>
            attenuation settings (ignored for "directional" and "ambient" lights)
            attenuation = 1/(a0 + d*a1 + d^2*a2) where d = distance to light
            </summary>
            <param name="d">
            </param>
            <returns>0 if a0 + d*a1 + d^2*a2 &lt;= 0</returns>
        </member>
        <member name="M:Rhino.Geometry.LineCurve.#ctor(Rhino.Geometry.Point3d,Rhino.Geometry.Point3d)">
            <example>
                <code source="examples\vbnet\ex_addtruncatedcone.vb" lang="vbnet" />
                <code source="examples\cs\ex_addtruncatedcone.cs" lang="cs" />
                <code source="examples\py\ex_addtruncatedcone.py" lang="py" />
            </example>
        </member>
        <member name="P:Rhino.Geometry.LineCurve.Line">
            <summary>
            Gets or sets the Line data inside this curve.
            </summary>
        </member>
        <member name="T:Rhino.Collections.RhinoList`1">
            <summary>
            Represents a list of generic data. This class is similar to System.Collections.Generic.List(T)
            but exposes a few more methods.
            </summary>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.#ctor">
            <summary>
            Create a new, empty list.
            </summary>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.#ctor(System.Int32)">
            <summary>
            Create an empty list with a certain capacity.
            </summary>
            <param name="initialCapacity">Number of items this list can store without resizing.</param>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.#ctor(System.Int32,`0)">
            <summary>
            Create a new List with a specified amount of values.
            </summary>
            <param name="amount">Number of values to add to this list. Must be equal to or larger than zero.</param>
            <param name="defaultValue">Value to add, for reference types,
            the same item will be added over and over again.</param>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Create a list that is a shallow duplicate of a collection.
            </summary>
            <param name="collection">Collection of items to duplicate.</param>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.#ctor(Rhino.Collections.RhinoList{`0})">
            <summary>
            Copy constructor. Create a shallow duplicate of another list.
            </summary>
            <param name="list">List to mimic.</param>
        </member>
        <member name="T:Rhino.Collections.RhinoList`1.FunctorComparer`1">
            <summary>
            Utility class which ties together functionality in Comparer(T) and Comparison(T)
            </summary>
        </member>
        <member name="F:Rhino.Collections.RhinoList`1.m_items">
            <summary>
            Internal array of items. The array will contain trailing invalid items if Capacity &gt; Count.
            WARNING! Do not store a reference to this array anywhere! The List class may decide to replace
            the internal array with another one.
            </summary>
        </member>
        <member name="F:Rhino.Collections.RhinoList`1.m_size">
            <summary>
            The number of "valid" elements in m_items (same as m_count in ON_SimpleArray)
            </summary>
        </member>
        <member name="F:Rhino.Collections.RhinoList`1.m_version">
            <summary>
            The version counter is incremented whenever a change is made to the list.
            </summary>
        </member>
        <member name="P:Rhino.Collections.RhinoList`1.System#Collections#IList#Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <returns>The element at the specified index.</returns>
        </member>
        <member name="P:Rhino.Collections.RhinoList`1.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <returns>The element at the specified index.</returns>
        </member>
        <member name="P:Rhino.Collections.RhinoList`1.System#Collections#ICollection#SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the ICollection.
            </summary>
        </member>
        <member name="P:Rhino.Collections.RhinoList`1.System#Collections#ICollection#IsSynchronized">
            <summary>
            When implemented by a class, gets a value indicating whether access to the ICollection is synchronized (thread-safe).
            ON_List is never Synchronized.
            </summary>
        </member>
        <member name="P:Rhino.Collections.RhinoList`1.System#Collections#Generic#ICollection&lt;T&gt;#IsReadOnly">
            <summary>
            When implemented by a class, gets a value indicating whether the IList is read-only.
            RhinoList is never ReadOnly.
            </summary>
        </member>
        <member name="P:Rhino.Collections.RhinoList`1.System#Collections#IList#IsFixedSize">
            <summary>
            When implemented by a class, gets a value indicating whether the IList has a fixed size.
            RhinoList is never fixed.
            </summary>
        </member>
        <member name="P:Rhino.Collections.RhinoList`1.System#Collections#IList#IsReadOnly">
            <summary>
            When implemented by a class, gets a value indicating whether the IList is read-only.
            RhinoList is never ReadOnly.
            </summary>
        </member>
        <member name="P:Rhino.Collections.RhinoList`1.Capacity">
            <summary>
            Gets or sets the total number of elements the internal data structure can hold without resizing.
            </summary>
        </member>
        <member name="P:Rhino.Collections.RhinoList`1.Count">
            <summary>
            Gets the number of elements actually contained in the List.
            </summary>
        </member>
        <member name="P:Rhino.Collections.RhinoList`1.NullCount">
            <summary>
            Gets the number of null references (Nothing in Visual Basic) in this list.
            If T is a valuetype, this property always return zero.
            </summary>
        </member>
        <member name="P:Rhino.Collections.RhinoList`1.First">
            <summary>
            Gets or sets the first item in the list. This is synonymous to calling List[0].
            </summary>
        </member>
        <member name="P:Rhino.Collections.RhinoList`1.Last">
            <summary>
            Gets or sets the last item in the list. This is synonymous to calling List[Count-1].
            </summary>
        </member>
        <member name="P:Rhino.Collections.RhinoList`1.ListToString">
            <summary>
            Creates a multi-line string representation of all the items in this list.
            </summary>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the ICollection to an Array, starting at a particular Array index.
            </summary>
            <param name="array">The one-dimensional Array that is the destination of the elements
            copied from ICollection. The Array must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.System#Collections#IList#Contains(System.Object)">
            <summary>
            Determines whether an element is in the List.
            </summary>
            <param name="item">The object to locate in the List.
            The value can be a null reference (Nothing in Visual Basic) for reference types.</param>
            <returns>true if item is found in the List; otherwise, false.</returns>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.System#Collections#IList#IndexOf(System.Object)">
            <summary>
            Searches for the specified object and returns the zero-based index of the
            first occurrence within the entire List.
            </summary>
            <param name="item">The object to locate in the List.
            The value can be a null reference (Nothing in Visual Basic)
            for reference types.</param>
            <returns>The zero-based index of the first occurrence of item within
            the entire List, if found; otherwise, �1.</returns>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.System#Collections#IList#Remove(System.Object)">
            <summary>
            Removes the first occurrence of a specific object from the List.
            </summary>
            <param name="item">The object to remove from the List.
            The value can be a null reference (Nothing in Visual Basic) for reference types.</param>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.System#Collections#IList#Insert(System.Int32,System.Object)">
            <summary>
            Inserts an element into the List at the specified index.
            </summary>
            <param name="index">The zero-based index at which item should be inserted.</param>
            <param name="item">The object to insert. The value can be a null reference
            (Nothing in Visual Basic) for reference types.</param>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.System#Collections#IList#Add(System.Object)">
            <summary>
            Adds an item to the IList.
            </summary>
            <param name="item">The Object to add to the IList.</param>
            <returns>The position into which the new element was inserted.</returns>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.ToArray">
            <summary>
            Create a shallow copy of the items in this list.
            </summary>
            <returns>An array containing all the items in this list.
            Trailing items are not included.</returns>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.TrimExcess">
            <summary>
            Sets the capacity to the actual number of elements in the List,
            if that number is less than a threshold value.
            </summary>
            <remarks>This function differs from the DotNET implementation of List&lt;T&gt;
            since that one only trims the excess if the excess exceeds 10% of the list length.</remarks>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.RemapIndex(System.Int32)">
            <summary>
            Remap an index in the infinite range onto the List index range.
            </summary>
            <param name="index">Index to remap.</param>
            <returns>Remapped index</returns>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.Clear">
            <summary>
            Removes all elements from the List.
            </summary>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.Add(`0)">
            <summary>
            Adds an object to the end of the List.
            </summary>
            <param name="item">Item to append.</param>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds the elements of the specified collection to the end of the List.
            </summary>
            <param name="collection">The collection whose elements should be added to the end of the List.
            The collection itself cannot be a null reference (Nothing in Visual Basic),
            but it can contain elements that are a null reference (Nothing in Visual Basic),
            if type T is a reference type.
            </param>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.AddRange(System.Collections.IEnumerable)">
            <summary>
            Adds the elements of the specified collection to the end of the List.
            </summary>
            <param name="collection">The collection whose elements should be added to the end of the List.
            The collection itself cannot be a null reference (Nothing in Visual Basic),
            but it can contain elements that are a null reference (Nothing in Visual Basic).
            Objects in collection which cannot be represented as T will throw exceptions.
            </param>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an element into the List at the specified index.
            </summary>
            <param name="index">The zero-based index at which item should be inserted.</param>
            <param name="item">The object to insert. The value can be a null reference
            (Nothing in Visual Basic) for reference types.</param>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Inserts the elements of a collection into the List at the specified index.
            </summary>
            <param name="index">The zero-based index at which the new elements should be inserted.</param>
            <param name="collection">The collection whose elements should be inserted into the List.
            The collection itself cannot be a null reference (Nothing in Visual Basic),
            but it can contain elements that are a null reference (Nothing in Visual Basic),
            if type T is a reference type.</param>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the List.
            </summary>
            <param name="item">The object to remove from the List.
            The value can be a null reference (Nothing in Visual Basic) for reference types.</param>
            <returns>true if item is successfully removed; otherwise, false.
            This method also returns false if item was not found in the List.</returns>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.RemoveAll(System.Predicate{`0})">
            <summary>
            Removes the all the elements that match the conditions defined by the specified predicate.
            </summary>
            <param name="match">The Predicate(T) delegate that defines the conditions of the elements to remove.</param>
            <returns>The number of elements removed from the List.</returns>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.RemoveNulls">
            <summary>
            Removes all elements from the List that are null references (Nothing in Visual Basic).
            This function will not do anything if T is not a Reference type.
            </summary>
            <returns>The number of nulls removed from the List.</returns>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified index of the List.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes a range of elements from the List.
            </summary>
            <param name="index">The zero-based starting index of the range of elements to remove.</param>
            <param name="count">The number of elements to remove.</param>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.GetRange(System.Int32,System.Int32)">
            <summary>
            Creates a shallow copy of a range of elements in the source List.
            </summary>
            <param name="index">The zero-based List index at which the range starts.</param>
            <param name="count">The number of elements in the range.</param>
            <returns>A shallow copy of a range of elements in the source List.</returns>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.IndexOf(`0)">
            <summary>
            Searches for the specified object and returns the zero-based index of the
            first occurrence within the entire List.
            </summary>
            <param name="item">The object to locate in the List.
            The value can be a null reference (Nothing in Visual Basic)
            for reference types.</param>
            <returns>The zero-based index of the first occurrence of item within
            the entire List, if found; otherwise, �1.</returns>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.IndexOf(`0,System.Int32)">
            <summary>
            Searches for the specified object and returns the zero-based index of
            the first occurrence within the range of elements in the List that
            extends from the specified index to the last element.
            </summary>
            <param name="item">The object to locate in the List.
            The value can be a null reference (Nothing in Visual Basic)
            for reference types.</param>
            <param name="index">The zero-based starting index of the search.</param>
            <returns>The zero-based index of the first occurrence of item within
            the entire List, if found; otherwise, �1.</returns>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.IndexOf(`0,System.Int32,System.Int32)">
            <summary>
            Searches for the specified object and returns the zero-based index of the first
            occurrence within the range of elements in the List that starts at the specified
            index and contains the specified number of elements.
            </summary>
            <param name="item">The object to locate in the List.
            The value can be a null reference (Nothing in Visual Basic)
            for reference types.</param>
            <param name="index">The zero-based starting index of the search.</param>
            <param name="count">The number of elements in the section to search.</param>
            <returns>The zero-based index of the first occurrence of item within
            the entire List, if found; otherwise, �1.</returns>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.LastIndexOf(`0)">
            <summary>
            Searches for the specified object and returns the zero-based
            index of the last occurrence within the entire List.
            </summary>
            <param name="item">The object to locate in the List.
            The value can be a null reference (Nothing in Visual Basic) for reference types.</param>
            <returns>The zero-based index of the last occurrence of item within
            the entire the List, if found; otherwise, �1.</returns>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.LastIndexOf(`0,System.Int32)">
            <summary>
            Searches for the specified object and returns the zero-based index
            of the last occurrence within the range of elements in the List
            that extends from the first element to the specified index.
            </summary>
            <param name="item">The object to locate in the List.
            The value can be a null reference (Nothing in Visual Basic) for reference types.</param>
            <param name="index">The zero-based starting index of the backward search.</param>
            <returns>The zero-based index of the last occurrence of item within
            the entire the List, if found; otherwise, �1.</returns>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.LastIndexOf(`0,System.Int32,System.Int32)">
            <summary>
            Searches for the specified object and returns the zero-based index of the
            last occurrence within the range of elements in the List that contains
            the specified number of elements and ends at the specified index.
            </summary>
            <param name="item">The object to locate in the List.
            The value can be a null reference (Nothing in Visual Basic) for reference types.</param>
            <param name="index">The zero-based starting index of the backward search.</param>
            <param name="count">The number of elements in the section to search.</param>
            <returns>The zero-based index of the last occurrence of item within
            the entire the List, if found; otherwise, �1.</returns>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.BinarySearch(`0)">
            <summary>
            Searches the entire sorted List for an element using the default comparer
            and returns the zero-based index of the element.
            </summary>
            <param name="item">The object to locate. The value can be a null reference
            (Nothing in Visual Basic) for reference types.</param>
            <returns>The zero-based index of item in the sorted List, if item is found;
            otherwise, a negative number that is the bitwise complement of the index
            of the next element that is larger than item or, if there is no larger element,
            the bitwise complement of Count.</returns>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
            <summary>
            Searches the entire sorted List for an element using the specified
            comparer and returns the zero-based index of the element.
            </summary>
            <param name="item">The object to locate. The value can be a null reference
            (Nothing in Visual Basic) for reference types.</param>
            <param name="comparer">The IComparer(T) implementation to use when comparing elements.
            Or a null reference (Nothing in Visual Basic) to use the default comparer
            Comparer(T)::Default.</param>
            <returns>The zero-based index of item in the sorted List, if item is found;
            otherwise, a negative number that is the bitwise complement of the index
            of the next element that is larger than item or, if there is no larger element,
            the bitwise complement of Count.</returns>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
            <summary>
            Searches the entire sorted List for an element using the specified
            comparer and returns the zero-based index of the element.
            </summary>
            <param name="index">The zero-based starting index of the range to search.</param>
            <param name="count">The length of the range to search.</param>
            <param name="item">The object to locate. The value can be a null reference
            (Nothing in Visual Basic) for reference types.</param>
            <param name="comparer">The IComparer(T) implementation to use when comparing elements.
            Or a null reference (Nothing in Visual Basic) to use the default comparer
            Comparer(T)::Default.</param>
            <returns>The zero-based index of item in the sorted List, if item is found;
            otherwise, a negative number that is the bitwise complement of the index
            of the next element that is larger than item or, if there is no larger element,
            the bitwise complement of Count.</returns>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.Contains(`0)">
            <summary>
            Determines whether an element is in the List.
            </summary>
            <param name="item">The object to locate in the List.
            The value can be a null reference (Nothing in Visual Basic) for reference types.</param>
            <returns>true if item is found in the List; otherwise, false.</returns>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.Exists(System.Predicate{`0})">
            <summary>
            Determines whether the List contains elements that match the
            conditions defined by the specified predicate.
            </summary>
            <param name="match">The Predicate(T) delegate that defines the conditions of the elements to search for.</param>
            <returns>true if the List contains one or more elements that match the
            conditions defined by the specified predicate; otherwise, false.</returns>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.Find(System.Predicate{`0})">
            <summary>
            Searches for an element that matches the conditions defined by the
            specified predicate, and returns the first occurrence within the entire List.
            </summary>
            <param name="match">The Predicate(T) delegate that defines the conditions of the element to search for.</param>
            <returns>The first element that matches the conditions defined by the specified predicate,
            if found; otherwise, the default value for type T.</returns>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.FindLast(System.Predicate{`0})">
            <summary>
            Searches for an element that matches the conditions defined by the
            specified predicate, and returns the last occurrence within the entire List.
            </summary>
            <param name="match">The Predicate(T) delegate that defines the conditions of the element to search for.</param>
            <returns>The last element that matches the conditions defined by the specified predicate,
            if found; otherwise, the default value for type T.</returns>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.FindAll(System.Predicate{`0})">
            <summary>
            Retrieves all the elements that match the conditions defined by the specified predicate.
            </summary>
            <param name="match">The Predicate(T) delegate that defines the conditions of the elements to search for.</param>
            <returns>A ON_List(T) containing all the elements that match the conditions
            defined by the specified predicate, if found; otherwise, an empty ON_List(T).</returns>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.TrueForAll(System.Predicate{`0})">
            <summary>
            Determines whether every element in the List matches the conditions defined by the specified predicate.
            </summary>
            <param name="match">The Predicate(T) delegate that defines the conditions to check against the elements.</param>
            <returns>true if every element in the List matches the conditions defined by
            the specified predicate; otherwise, false. If the list has no elements, the return value is true.</returns>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.ForEach(System.Action{`0})">
            <summary>
            Performs the specified action on each element of the List.
            </summary>
            <param name="action">The Action(T) delegate to perform on each element of the List.</param>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.FindIndex(System.Predicate{`0})">
            <summary>
            Searches for an element that matches the conditions defined by the
            specified predicate, and returns the zero-based index of the first
            occurrence within the entire List.
            </summary>
            <param name="match">The Predicate(T) delegate that defines the conditions of the element to search for.</param>
            <returns>The zero-based index of the first occurrence of an element that
            matches the conditions defined by match, if found; otherwise, �1.</returns>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.FindIndex(System.Int32,System.Predicate{`0})">
            <summary>
            Searches for an element that matches the conditions defined by the
            specified predicate, and returns the zero-based index of the first
            occurrence within the entire List.
            </summary>
            <param name="startIndex">The zero-based starting index of the search.</param>
            <param name="match">The Predicate(T) delegate that defines the conditions of the element to search for.</param>
            <returns>The zero-based index of the first occurrence of an element that
            matches the conditions defined by match, if found; otherwise, �1.</returns>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
            <summary>
            Searches for an element that matches the conditions defined by the specified predicate,
            and returns the zero-based index of the first occurrence within the range of elements
            in the List that extends from the specified index to the last element.
            </summary>
            <param name="startIndex">The zero-based starting index of the search.</param>
            <param name="count">The number of elements in the section to search.</param>
            <param name="match">The Predicate(T) delegate that defines the conditions of the element to search for.</param>
            <returns>The zero-based index of the first occurrence of an element that
            matches the conditions defined by match, if found; otherwise, �1.</returns>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.FindLastIndex(System.Predicate{`0})">
            <summary>
            Searches for an element that matches the conditions defined by the
            specified predicate, and returns the zero-based index of the last
            occurrence within the entire List.
            </summary>
            <param name="match">The Predicate(T) delegate that defines the conditions of the element to search for.</param>
            <returns>The zero-based index of the last occurrence of an element that matches
            the conditions defined by match, if found; otherwise, �1.</returns>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.FindLastIndex(System.Int32,System.Predicate{`0})">
            <summary>
            Searches for an element that matches the conditions defined by the
            specified predicate, and returns the zero-based index of the last
            occurrence within the entire List.
            </summary>
            <param name="startIndex">The zero-based starting index of the backward search.</param>
            <param name="match">The Predicate(T) delegate that defines the conditions of the element to search for.</param>
            <returns>The zero-based index of the last occurrence of an element that matches
            the conditions defined by match, if found; otherwise, �1.</returns>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
            <summary>
            Searches for an element that matches the conditions defined by the
            specified predicate, and returns the zero-based index of the last
            occurrence within the entire List.
            </summary>
            <param name="startIndex">The zero-based starting index of the backward search.</param>
            <param name="count">The number of elements in the section to search.</param>
            <param name="match">The Predicate(T) delegate that defines the conditions of the element to search for.</param>
            <returns>The zero-based index of the last occurrence of an element that matches
            the conditions defined by match, if found; otherwise, �1.</returns>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.Sort">
            <summary>
            Sorts the elements in the entire List using the default comparer.
            </summary>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.Sort(System.Collections.Generic.IComparer{`0})">
            <summary>
            Sorts the elements in the entire list using the specified System.Comparison(T)
            </summary>
            <param name="comparer">The IComparer(T) implementation to use when comparing elements,
            or a null reference (Nothing in Visual Basic) to use the default comparer Comparer(T).Default.</param>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.Sort(System.Comparison{`0})">
            <summary>
            Sorts the elements in the entire list using the specified comparer.
            </summary>
            <param name="comparison">The System.Comparison(T) to use when comparing elements.</param>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
            <summary>
            Sorts the elements in a range of elements in list using the specified comparer.
            </summary>
            <param name="index">The zero-based starting index of the range to sort.</param>
            <param name="count">The length of the range to sort.</param>
            <param name="comparer">The IComparer(T) implementation to use when comparing
            elements, or a null reference (Nothing in Visual Basic) to use the default
            comparer Comparer(T).Default.</param>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.Sort(System.Double[])">
            <summary>
            Sort this list based on a list of numeric keys of equal length.
            The keys array will not be altered.
            </summary>
            <param name="keys">Numeric keys to sort with.</param>
            <remarks>This function does not exist on the DotNET List class.
            David thought it was a good idea.</remarks>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.Sort(System.Int32[])">
            <summary>
            Sort this list based on a list of numeric keys of equal length.
            The keys array will not be altered.
            </summary>
            <param name="keys">Numeric keys to sort with.</param>
            <remarks>This function does not exist on the DotNET List class.
            David thought it was a good idea.</remarks>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.Reverse">
            <summary>
            Reverses the order of the elements in the entire List.
            </summary>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.Reverse(System.Int32,System.Int32)">
            <summary>
            Reverses the order of the elements in the specified range.
            </summary>
            <param name="index">The zero-based starting index of the range to reverse.</param>
            <param name="count">The number of elements in the range to reverse.</param>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.CopyTo(`0[])">
            <summary>
            Copies the entire List to a compatible one-dimensional array,
            starting at the beginning of the target array.
            </summary>
            <param name="array">The one-dimensional Array that is the destination
            of the elements copied from List. The Array must have zero-based indexing.</param>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the entire List to a compatible one-dimensional array,
            starting at the specified index of the target array.
            </summary>
            <param name="array">The one-dimensional Array that is the destination
            of the elements copied from List. The Array must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
            <summary>
            Copies a range of elements from the List to a compatible one-dimensional array,
            starting at the specified index of the target array.
            </summary>
            <param name="index">The zero-based index in the source List at which copying begins.</param>
            <param name="array">The one-dimensional Array that is the destination of the elements
            copied from List. The Array must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
            <param name="count">The number of elements to copy.</param>
        </member>
        <member name="T:Rhino.Collections.ListDebuggerDisplayProxy`1">
            <summary>
            Utility class for displaying ON_List contents in the VS debugger.
            </summary>
        </member>
        <member name="M:Rhino.Collections.Point3dList.#ctor(System.Int32)">
            <summary>
            Create a new pointlist with a preallocated initial capacity.
            </summary>
            <example>
                <code source="examples\vbnet\ex_addnurbscurve.vb" lang="vbnet" />
                <code source="examples\cs\ex_addnurbscurve.cs" lang="cs" />
                <code source="examples\py\ex_addnurbscurve.py" lang="py" />
            </example>
        </member>
        <member name="M:Rhino.Collections.Point3dList.#ctor(Rhino.Geometry.Point3d[])">
            <summary>
            Construct a new Point3dList from a given number of points.
            </summary>
            <param name="initialPoints">Points to add to the list.</param>
        </member>
        <member name="T:Rhino.Collections.Point3dList.XAccess">
            <summary>
            Utility class for easy-access of x-components of points inside an ON_3dPointList.
            </summary>
        </member>
        <member name="M:Rhino.Collections.Point3dList.XAccess.#ctor(Rhino.Collections.Point3dList)">
            <summary>
            XAccess constructor.
            </summary>
        </member>
        <member name="P:Rhino.Collections.Point3dList.XAccess.Item(System.Int32)">
            <summary>
            Gets or sets the x-coordinate of the specified point.
            </summary>
            <param name="index">Index of point.</param>
        </member>
        <member name="T:Rhino.Collections.Point3dList.YAccess">
            <summary>
            Utility class for easy-access of x-components of points inside an ON_3dPointList.
            </summary>
        </member>
        <member name="M:Rhino.Collections.Point3dList.YAccess.#ctor(Rhino.Collections.Point3dList)">
            <summary>
            XAccess constructor.
            </summary>
        </member>
        <member name="P:Rhino.Collections.Point3dList.YAccess.Item(System.Int32)">
            <summary>
            Gets or sets the y-coordinate of the specified point.
            </summary>
            <param name="index">Index of point.</param>
        </member>
        <member name="T:Rhino.Collections.Point3dList.ZAccess">
            <summary>
            Utility class for easy-access of z-components of points inside an ON_3dPointList.
            </summary>
        </member>
        <member name="M:Rhino.Collections.Point3dList.ZAccess.#ctor(Rhino.Collections.Point3dList)">
            <summary>
            XAccess constructor.
            </summary>
        </member>
        <member name="P:Rhino.Collections.Point3dList.ZAccess.Item(System.Int32)">
            <summary>
            Gets or sets the z-coordinate of the specified point.
            </summary>
            <param name="index">Index of point.</param>
        </member>
        <member name="M:Rhino.Collections.Point3dList.GetConstPointArray(System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d},System.Int32@)">
            <summary>
            Anything calling this function should not be modifying the contents of the array
            </summary>
            <param name="points">
            </param>
            <param name="count">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Rhino.Collections.Point3dList.ClosestIndex(Rhino.Geometry.Point3d)">
            <summary>
            Find the index of the point that is closest to a test point in this list
            </summary>
            <param name="testPoint">point to compare against</param>
            <returns>index of closest point in the list on success. -1 on error</returns>
        </member>
        <member name="M:Rhino.Collections.Point3dList.Add(System.Double,System.Double,System.Double)">
            <summary>
            Adds a ON_3dPoint to the end of the List with given x,y,z coordinates
            </summary>
            <param name="x">
            </param>
            <param name="y">
            </param>
            <param name="z">
            </param>
            <example>
                <code source="examples\vbnet\ex_addnurbscurve.vb" lang="vbnet" />
                <code source="examples\cs\ex_addnurbscurve.cs" lang="cs" />
                <code source="examples\py\ex_addnurbscurve.py" lang="py" />
            </example>
        </member>
        <member name="M:Rhino.Collections.Point3dList.Transform(Rhino.Geometry.Transform)">
            <summary>
            Apply a transform to all the points in the list.
            </summary>
            <param name="xform">Transform to apply.</param>
        </member>
        <member name="M:Rhino.Collections.Point3dList.ClosestIndexInList(System.Collections.Generic.IList{Rhino.Geometry.Point3d},Rhino.Geometry.Point3d)">
            <summary>
            Find the index of the point in a list of points that is closest to a test point.
            </summary>
            <param name="list">A list of points.</param>
            <param name="testPoint">Point to compare against.</param>
            <returns>Index of closest point in the list on success or -1 on error.</returns>
        </member>
        <member name="M:Rhino.Collections.Point3dList.ClosestPointInList(System.Collections.Generic.IList{Rhino.Geometry.Point3d},Rhino.Geometry.Point3d)">
            <summary>
            Find the point in a list of points that is closest to a test point.
            </summary>
            <param name="list">A list of points.</param>
            <param name="testPoint">Point to compare against.</param>
            <returns>
            </returns>
            <exception cref="T:System.ArgumentException">
            list must contain at least one point and testPoint must be valid
            </exception>
        </member>
        <member name="M:Rhino.Collections.CurveList.Transform(Rhino.Geometry.Transform)">
            <summary>
            Transform all the curves in this list. If at least a single transform failed
            this function returns False.
            </summary>
            <param name="xform">Transformation to apply to all curves.</param>
        </member>
        <member name="P:Rhino.Geometry.AreaMassProperties.Area">
            <summary>
            Gets the area solution.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.AreaMassProperties.AreaError">
            <summary>
            Gets the uncertainty in the area calculation.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.AreaMassProperties.Centroid">
            <summary>
            Gets the area centroid in the world coordinate system.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.AreaMassProperties.CentroidError">
            <summary>
            Gets the uncertainty in the centroid calculation.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.AreaMassProperties.WorldCoordinatesFirstMoments">
            <summary>
            Returns the world coordinate first moments if they were able to be calculated.
            X is integral of "x dm" over the area
            Y is integral of "y dm" over the area
            Z is integral of "z dm" over the area
            </summary>
        </member>
        <member name="P:Rhino.Geometry.AreaMassProperties.WorldCoordinatesFirstMomentsError">
            <summary>
            Uncertainty in world coordinates first moments calculation
            </summary>
        </member>
        <member name="P:Rhino.Geometry.AreaMassProperties.WorldCoordinatesSecondMoments">
            <summary>
            Returns the world coordinate first moments if they were able to be calculated.
            X is integral of "xx dm" over the area
            Y is integral of "yy dm" over the area
            Z is integral of "zz dm" over the area
            </summary>
        </member>
        <member name="P:Rhino.Geometry.AreaMassProperties.WorldCoordinatesSecondMomentsError">
            <summary>
            Uncertainty in world coordinates second moments calculation
            </summary>
        </member>
        <member name="P:Rhino.Geometry.AreaMassProperties.WorldCoordinatesProductMoments">
            <summary>
            Returns the world coordinate product moments if they were able to be calculated.
            X is integral of "xy dm" over the area
            Y is integral of "yz dm" over the area
            Z is integral of "zx dm" over the area
            </summary>
        </member>
        <member name="P:Rhino.Geometry.AreaMassProperties.WorldCoordinatesProductMomentsError">
            <summary>
            Uncertainty in world coordinates second moments calculation
            </summary>
        </member>
        <member name="P:Rhino.Geometry.AreaMassProperties.WorldCoordinatesMomentsOfInertia">
            <summary>
            The moments of inertia about the world coordinate axes.
            X = integral of (y^2 + z^2) dm
            Y = integral of (z^2 + x^2) dm
            Z = integral of (z^2 + y^2) dm
            </summary>
            <remarks>
            What is meant by "moments of intertia" varies widely in textbooks and papers.
            The values returned here are the integrals listed in the Summary section.
            Some applications may want the values from WorldCoordinatesSecondMoments
            instead of the values returned here.
            </remarks>
        </member>
        <member name="P:Rhino.Geometry.AreaMassProperties.WorldCoordinatesMomentsOfInertiaError">
            <summary>
            Uncertainty in world coordinates moments of inertia calculation
            </summary>
        </member>
        <member name="P:Rhino.Geometry.AreaMassProperties.WorldCoordinatesRadiiOfGyration">
            <summary>
            Radii of gyration with respect to world coordinate system.
            X = sqrt(integral of (y^2 + z^2) dm/M)
            Y = sqrt(integral of (z^2 + x^2) dm/M)
            Z = sqrt(integral of (z^2 + y^2) dm/M)
            </summary>
            <remarks>
            What is meant by "radii of gyration" varies widely in textbooks and papers.
            The values returned here are the integrals listed in the Returns section.
            </remarks>
        </member>
        <member name="P:Rhino.Geometry.AreaMassProperties.CentroidCoordinatesSecondMoments">
            <summary>
            Second moments with respect to centroid coordinate system.
            X = integral of (x-x0)^2 dm
            Y = integral of (y-y0)^2 dm
            Z = integral of (z-z0)^2 dm
            where (x0,y0,z0) = centroid.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.AreaMassProperties.CentroidCoordinatesSecondMomentsError">
            <summary>
            Uncertainty in centroid coordinates second moments calculation
            </summary>
        </member>
        <member name="P:Rhino.Geometry.AreaMassProperties.CentroidCoordinatesMomentsOfInertia">
            <summary>
            Moments of inertia with respect to centroid coordinate system.
            X = integral of ((y-y0)^2 + (z-z0)^2) dm
            Y = integral of ((z-z0)^2 + (x-x0)^2) dm
            Z = integral of ((z-z0)^2 + (y-y0)^2) dm
            where (x0,y0,z0) = centroid.
            </summary>
            <remarks>
            What is meant by "moments of intertia" varies widely in textbooks and papers.
            The values returned here are the integrals listed in the Summary section.
            Some applications may want the values from WorldCoordinatesSecondMoments
            instead of the values returned here.
            </remarks>
        </member>
        <member name="P:Rhino.Geometry.AreaMassProperties.CentroidCoordinatesMomentsOfInertiaError">
            <summary>
            Uncertainty in centroid coordinates moments of inertia calculation
            </summary>
        </member>
        <member name="P:Rhino.Geometry.AreaMassProperties.CentroidCoordinatesRadiiOfGyration">
            <summary>
            Radii of gyration with respect to centroid coordinate system.
            X = sqrt(integral of ((y-y0)^2 + (z-z0)^2) dm/M)
            Y = sqrt(integral of ((z-z0)^2 + (x-x0)^2) dm/M)
            Z = sqrt(integral of ((z-z0)^2 + (y-y0)^2) dm/M)
            where (x0,y0,z0) = centroid.
            </summary>
            <remarks>
            What is meant by "radii of gyration" varies widely in textbooks and papers.
            The values returned here are the integrals listed in the Returns section.
            </remarks>
        </member>
        <member name="M:Rhino.Geometry.AreaMassProperties.Compute(Rhino.Geometry.Curve)">
            <summary>
            Compute an AreaMassProperties for a single closed planar curve.
            </summary>
            <param name="closedPlanarCurve">Curve to measure.</param>
            <returns>The AreaMassProperties for the given curve or null on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.AreaMassProperties.Compute(Rhino.Geometry.Hatch)">
            <summary>
            Compute an AreaMassProperties for a hatch
            </summary>
            <param name="hatch">Hatch to measure</param>
            <returns>The AreaMassProperties for the given hatch or null on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.AreaMassProperties.Compute(Rhino.Geometry.Mesh)">
            <summary>
            Compute an AreaMassProperties for a single mesh.
            </summary>
            <param name="mesh">Mesh to measure.</param>
            <returns>The AreaMassProperties for the given Mesh or null on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.AreaMassProperties.Compute(Rhino.Geometry.Brep)">
            <summary>
            Compute an AreaMassProperties for a single Brep.
            </summary>
            <param name="brep">Brep to measure.</param>
            <returns>The AreaMassProperties for the given Brep or null on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.AreaMassProperties.Compute(Rhino.Geometry.Surface)">
            <summary>
            Compute an AreaMassProperties for a single Surface.
            </summary>
            <param name="surface">Surface to measure.</param>
            <returns>The AreaMassProperties for the given Surface or null on failure.</returns>
        </member>
        <member name="P:Rhino.Geometry.VolumeMassProperties.Volume">
            <summary>
            Gets the volume solution.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.VolumeMassProperties.VolumeError">
            <summary>
            Gets the uncertainty in the volume calculation.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.VolumeMassProperties.Centroid">
            <summary>
            Gets the volume centroid in the world coordinate system.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.VolumeMassProperties.CentroidError">
            <summary>
            Gets the uncertainty in the Centroid calculation.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.VolumeMassProperties.WorldCoordinatesFirstMoments">
            <summary>
            Returns the world coordinate first moments if they were able to be calculated.
            X is integral of "x dm" over the volume
            Y is integral of "y dm" over the volume
            Z is integral of "z dm" over the volume
            </summary>
        </member>
        <member name="P:Rhino.Geometry.VolumeMassProperties.WorldCoordinatesFirstMomentsError">
            <summary>
            Uncertainty in world coordinates first moments calculation
            </summary>
        </member>
        <member name="P:Rhino.Geometry.VolumeMassProperties.WorldCoordinatesSecondMoments">
            <summary>
            Returns the world coordinate first moments if they were able to be calculated.
            X is integral of "xx dm" over the area
            Y is integral of "yy dm" over the area
            Z is integral of "zz dm" over the area
            </summary>
        </member>
        <member name="P:Rhino.Geometry.VolumeMassProperties.WorldCoordinatesSecondMomentsError">
            <summary>
            Uncertainty in world coordinates second moments calculation
            </summary>
        </member>
        <member name="P:Rhino.Geometry.VolumeMassProperties.WorldCoordinatesProductMoments">
            <summary>
            Returns the world coordinate product moments if they were able to be calculated.
            X is integral of "xy dm" over the area
            Y is integral of "yz dm" over the area
            Z is integral of "zx dm" over the area
            </summary>
        </member>
        <member name="P:Rhino.Geometry.VolumeMassProperties.WorldCoordinatesProductMomentsError">
            <summary>
            Uncertainty in world coordinates second moments calculation
            </summary>
        </member>
        <member name="P:Rhino.Geometry.VolumeMassProperties.WorldCoordinatesMomentsOfInertia">
            <summary>
            The moments of inertia about the world coordinate axes.
            X = integral of (y^2 + z^2) dm
            Y = integral of (z^2 + x^2) dm
            Z = integral of (z^2 + y^2) dm
            </summary>
            <remarks>
            What is meant by "moments of intertia" varies widely in textbooks and papers.
            The values returned here are the integrals listed in the Summary section.
            Some applications may want the values from WorldCoordinatesSecondMoments
            instead of the values returned here.
            </remarks>
        </member>
        <member name="P:Rhino.Geometry.VolumeMassProperties.WorldCoordinatesMomentsOfInertiaError">
            <summary>
            Uncertainty in world coordinates moments of inertia calculation
            </summary>
        </member>
        <member name="P:Rhino.Geometry.VolumeMassProperties.WorldCoordinatesRadiiOfGyration">
            <summary>
            Radii of gyration with respect to world coordinate system.
            X = sqrt(integral of (y^2 + z^2) dm/M)
            Y = sqrt(integral of (z^2 + x^2) dm/M)
            Z = sqrt(integral of (z^2 + y^2) dm/M)
            </summary>
            <remarks>
            What is meant by "radii of gyration" varies widely in textbooks and papers.
            The values returned here are the integrals listed in the Returns section.
            </remarks>
        </member>
        <member name="P:Rhino.Geometry.VolumeMassProperties.CentroidCoordinatesSecondMoments">
            <summary>
            Second moments with respect to centroid coordinate system.
            X = integral of (x-x0)^2 dm
            Y = integral of (y-y0)^2 dm
            Z = integral of (z-z0)^2 dm
            where (x0,y0,z0) = centroid.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.VolumeMassProperties.CentroidCoordinatesSecondMomentsError">
            <summary>
            Uncertainty in centroid coordinates second moments calculation
            </summary>
        </member>
        <member name="P:Rhino.Geometry.VolumeMassProperties.CentroidCoordinatesMomentsOfInertia">
            <summary>
            Moments of inertia with respect to centroid coordinate system.
            X = integral of ((y-y0)^2 + (z-z0)^2) dm
            Y = integral of ((z-z0)^2 + (x-x0)^2) dm
            Z = integral of ((z-z0)^2 + (y-y0)^2) dm
            where (x0,y0,z0) = centroid.
            </summary>
            <remarks>
            What is meant by "moments of intertia" varies widely in textbooks and papers.
            The values returned here are the integrals listed in the Summary section.
            Some applications may want the values from WorldCoordinatesSecondMoments
            instead of the values returned here.
            </remarks>
        </member>
        <member name="P:Rhino.Geometry.VolumeMassProperties.CentroidCoordinatesMomentsOfInertiaError">
            <summary>
            Uncertainty in centroid coordinates moments of inertia calculation
            </summary>
        </member>
        <member name="P:Rhino.Geometry.VolumeMassProperties.CentroidCoordinatesRadiiOfGyration">
            <summary>
            Radii of gyration with respect to centroid coordinate system.
            X = sqrt(integral of ((y-y0)^2 + (z-z0)^2) dm/M)
            Y = sqrt(integral of ((z-z0)^2 + (x-x0)^2) dm/M)
            Z = sqrt(integral of ((z-z0)^2 + (y-y0)^2) dm/M)
            where (x0,y0,z0) = centroid.
            </summary>
            <remarks>
            What is meant by "radii of gyration" varies widely in textbooks and papers.
            The values returned here are the integrals listed in the Returns section.
            </remarks>
        </member>
        <member name="M:Rhino.Geometry.VolumeMassProperties.Compute(Rhino.Geometry.Mesh)">
            <summary>
            Compute the VolumeMassProperties for a single Mesh.
            </summary>
            <param name="mesh">Mesh to measure.</param>
            <returns>The VolumeMassProperties for the given Mesh or null on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.VolumeMassProperties.Compute(Rhino.Geometry.Brep)">
            <summary>
            Compute the VolumeMassProperties for a single Brep.
            </summary>
            <param name="brep">Brep to measure.</param>
            <returns>The VolumeMassProperties for the given Brep or null on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.VolumeMassProperties.Compute(Rhino.Geometry.Surface)">
            <summary>
            Compute the VolumeMassProperties for a single Surface.
            </summary>
            <param name="surface">Surface to measure.</param>
            <returns>The VolumeMassProperties for the given Surface or null on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.VolumeMassProperties.Sum(Rhino.Geometry.VolumeMassProperties)">
            <summary>
            Sum mass properties together to get an aggregate mass.
            </summary>
            <param name="summand">mass properties to add</param>
            <returns>True if successful.</returns>
        </member>
        <member name="T:Rhino.DocObjects.MaterialInfo">
            <summary>
            Provides material definition information
            </summary>
        </member>
        <member name="M:Rhino.DocObjects.MaterialInfo.Default">
            <summary>
            Set material to default settings
            </summary>
        </member>
        <member name="M:Rhino.DocObjects.MaterialInfo.FindBitmapTexture(System.String)">
            <summary>
            Searches for a texure with matching filename and type. If more
            than one texture matches, the first match is returned.
            </summary>
            <param name="filename">if null then any filename matches</param>
            <returns>-1 if no match is found</returns>
        </member>
        <member name="M:Rhino.DocObjects.MaterialInfo.FindBitmapTexture">
            <summary>
            Searches for any bitmap texture
            </summary>
            <returns>-1 if no match is found</returns>
        </member>
        <member name="T:Rhino.Geometry.MeshingParameters">
            <summary>
            Settings used for creating a Mesh representation of a Brep
            </summary>
        </member>
        <member name="M:Rhino.Geometry.MeshingParameters.#ctor">
            <summary>
            Initial values are same as "Default"
            </summary>
        </member>
        <member name="P:Rhino.Geometry.MeshingParameters.Minimal">
            <summary>Gets minimal meshing parameters</summary>
        </member>
        <member name="P:Rhino.Geometry.MeshingParameters.Default">
            <summary>
            Gets default meshing parameters
            </summary>
        </member>
        <member name="P:Rhino.Geometry.MeshingParameters.Coarse">
            <summary>
            Gets meshing parameters for coarse meshing.
            This corresponds with the "Jagged and Faster" default in Rhino.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.MeshingParameters.Smooth">
            <summary>
            Gets meshing parameters for smooth meshing.
            This corresponds with the "Smooth and Slower" default in Rhino.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.MeshingParameters.JaggedSeams">
            <summary>
            Gets or sets whether or not the mesh is allowed to have jagged seams.
            When this flag is set to True, meshes on either side of a Brep Edge will not match up.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.MeshingParameters.RefineGrid">
            <summary>
            Gets or sets a value indicating whether or not the sampling grid can be refined
            when certain tolerances are not met.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.MeshingParameters.SimplePlanes">
            <summary>
            Gets or sets a value indicating whether or not planar areas are allowed
            to be meshed in a simplified manner.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.MeshingParameters.ComputeCurvature">
            <summary>
            Gets or sets a value indicating whether or not surface curvature
            data will be embedded in the mesh.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.MeshingParameters.GridMinCount">
            <summary>
            Gets or sets the minimum number of grid quads in the initial sampling grid.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.MeshingParameters.GridMaxCount">
            <summary>
            Gets or sets the maximum number of grid quads in the initial sampling grid.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.MeshingParameters.GridAngle">
            <summary>
            Gets or sets the maximum allowed angle difference (in radians)
            for a single sampling quad. The angle pertains to the surface normals.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.MeshingParameters.GridAspectRatio">
            <summary>
            Gets or sets the maximum allowed aspect ratio of sampling quads.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.MeshingParameters.GridAmplification">
            <summary>
            Gets or sets the grid amplification factor.
            Values lower than 1.0 will decrease the number of initial quads,
            values higher than 1.0 will increase the number of initial quads.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.MeshingParameters.Tolerance">
            <summary>
            Gets or sets the maximum allowed edge deviation.
            This tolerance is measured between the center of the mesh edge and the surface.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.MeshingParameters.MinimumTolerance">
            <summary>
            Gets or sets the minimum tolerance.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.MeshingParameters.RelativeTolerance">
            <summary>
            Gets or sets the relative tolerance.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.MeshingParameters.MinimumEdgeLength">
            <summary>
            Gets or sets the minimum allowed mesh edge length.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.MeshingParameters.MaximumEdgeLength">
            <summary>
            Gets or sets the maximum allowed mesh edge length.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.MeshingParameters.DocumentCurrentSetting(Rhino.RhinoDoc)">
            <summary>
            Gets the MeshingParameters that are currently set for a document.
            These are the same settings that are shown in the DocumentProperties
            Mesh settings user interface.
            </summary>
            <param name="doc">
            </param>
            <returns>
            </returns>
        </member>
        <member name="T:Rhino.Geometry.MeshParameters">
            <summary>
            Represents mesher settings for Brep-&gt;Mesh conversions.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.MeshParameters.Minimal">
            <summary>
            Gets minimal meshing parameters.
            Use this rather than the default constructor as it
            initialized important fields properly.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.MeshParameters.Default">
            <summary>
            Gets default meshing parameters.
            Use this rather than the default constructor as it
            initialized important fields properly.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.MeshParameters.Coarse">
            <summary>
            Gets meshing parameters for coarse meshing.
            This corresponds with the "Jagged and Faster" default in Rhino.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.MeshParameters.Smooth">
            <summary>
            Gets meshing parameters for smooth meshing.
            This corresponds with the "Smooth and Slower" default in Rhino.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.MeshParameters.JaggedSeams">
            <summary>
            Gets or sets whether or not the mesh is allowed to have jagged seams.
            When this flag is set to True, meshes on either side of a Brep Edge will not match up.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.MeshParameters.RefineGrid">
            <summary>
            Gets or sets a value indicating whether or not the sampling grid can be refined
            when certain tolerances are not met.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.MeshParameters.SimplePlanes">
            <summary>
            Gets or sets a value indicating whether or not planar areas are allowed
            to be meshed in a simplified manner.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.MeshParameters.ComputeCurvature">
            <summary>
            Gets or sets a value indicating whether or not surface curvature
            data will be embedded in the mesh.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.MeshParameters.GridMinCount">
            <summary>
            Gets or sets the minimum number of grid quads in the initial sampling grid.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.MeshParameters.GridMaxCount">
            <summary>
            Gets or sets the maximum number of grid quads in the initial sampling grid.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.MeshParameters.GridAngle">
            <summary>
            Gets or sets the maximum allowed angle difference (in radians)
            for a single sampling quad. The angle pertains to the surface normals.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.MeshParameters.GridAspectRatio">
            <summary>
            Gets or sets the maximum allowed aspect ratio of sampling quads.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.MeshParameters.GridAmplification">
            <summary>
            Gets or sets the grid amplification factor.
            Values lower than 1.0 will decrease the number of initial quads,
            values higher than 1.0 will increase the number of initial quads.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.MeshParameters.Tolerance">
            <summary>
            Gets or sets the maximum allowed edge deviation.
            This tolerance is measured between the center of the mesh edge and the surface.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.MeshParameters.MinimumTolerance">
            <summary>
            Gets or sets the minimum tolerance.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.MeshParameters.RelativeTolerance">
            <summary>
            Gets or sets the relative tolerance.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.MeshParameters.MinimumEdgeLength">
            <summary>
            Gets or sets the minimum allowed mesh edge length.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.MeshParameters.MaximumEdgeLength">
            <summary>
            Gets or sets the maximum allowed mesh edge length.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Mesh.#ctor">
            <example>
                <code source="examples\vbnet\ex_addmesh.vb" lang="vbnet" />
                <code source="examples\cs\ex_addmesh.cs" lang="cs" />
                <code source="examples\py\ex_addmesh.py" lang="py" />
            </example>
        </member>
        <member name="P:Rhino.Geometry.Mesh.DisjointMeshCount">
            <summary>
            Gets the number of disjoint (topologically unconnected) pieces in this mesh.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Mesh.IsClosed">
            <summary>
            A mesh is considered to be closed when every mesh "edge" has
            two or more faces.
            </summary>
            <returns>True if the mesh is closed, false if it is not.</returns>
        </member>
        <member name="P:Rhino.Geometry.Mesh.Vertices">
            <summary>
            Gets access to the Vertices of this mesh.
            </summary>
            <example>
                <code source="examples\vbnet\ex_addmesh.vb" lang="vbnet" />
                <code source="examples\cs\ex_addmesh.cs" lang="cs" />
                <code source="examples\py\ex_addmesh.py" lang="py" />
            </example>
        </member>
        <member name="P:Rhino.Geometry.Mesh.Normals">
            <summary>
            Gets access to the vertex normal vectors of this mesh.
            </summary>
            <example>
                <code source="examples\vbnet\ex_addmesh.vb" lang="vbnet" />
                <code source="examples\cs\ex_addmesh.cs" lang="cs" />
                <code source="examples\py\ex_addmesh.py" lang="py" />
            </example>
        </member>
        <member name="P:Rhino.Geometry.Mesh.Faces">
            <summary>
            Gets access to the Faces of this mesh.
            </summary>
            <example>
                <code source="examples\vbnet\ex_addmesh.vb" lang="vbnet" />
                <code source="examples\cs\ex_addmesh.cs" lang="cs" />
                <code source="examples\py\ex_addmesh.py" lang="py" />
            </example>
        </member>
        <member name="P:Rhino.Geometry.Mesh.FaceNormals">
            <summary>
            Gets access to the Face normals of this mesh.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Mesh.VertexColors">
            <summary>
            Gets access to the (optional) vertex colors of this mesh
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Mesh.TextureCoordinates">
            <summary>
            Gets access to the Vertex texture coordinates of this mesh.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Mesh.CreateFromPlane(Rhino.Geometry.Plane,Rhino.Geometry.Interval,Rhino.Geometry.Interval,System.Int32,System.Int32)">
            <summary>
            Create a planar mesh grid.
            </summary>
            <param name="plane">Plane of mesh.</param>
            <param name="xInterval">Interval describing size and extends of mesh along plane x-direction.</param>
            <param name="yInterval">Interval describing size and extends of mesh along plane y-direction.</param>
            <param name="xCount">Number of faces in x-direction.</param>
            <param name="yCount">Number of faces in y-direction.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when plane is a null reference.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when xInterval is a null reference.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when yInterval is a null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when xCount is less than or equal to zero.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when yCount is less than or equal to zero.</exception>
        </member>
        <member name="M:Rhino.Geometry.Mesh.CreateFromSphere(Rhino.Geometry.Sphere,System.Int32,System.Int32)">
            <summary>
            Create a mesh sphere.
            </summary>
            <param name="sphere">Base sphere for mesh.</param>
            <param name="xCount">Number of faces in the around direction.</param>
            <param name="yCount">Number of faces in the top-to-bottom direction.</param>
            <exception cref="T:System.ArgumentNullException">Thrown when sphere is invalid.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when xCount is less than or equal to two.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when yCount is less than or equal to two.</exception>
        </member>
        <member name="M:Rhino.Geometry.Mesh.CreateFromPlanarBoundary(Rhino.Geometry.Curve)">
            <summary>
            Attempt to create a mesh from a closed planar curve
            </summary>
            <param name="boundary">must be a closed planar curve</param>
            <returns>
            new Mesh on success
            null on failure
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Mesh.CreateFromPlanarBoundary(Rhino.Geometry.Curve,Rhino.Geometry.MeshingParameters)">
            <summary>
            Attempt to create a mesh from a closed planar curve
            </summary>
            <param name="boundary">must be a closed planar curve</param>
            <param name="parameters">parameters used for creating the mesh</param>
            <returns>
            new Mesh on success
            null on failure
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Mesh.CreateFromBrep(Rhino.Geometry.Brep)">
            <summary>
            Create a mesh from a Brep.
            </summary>
            <param name="brep">Brep to approximate.</param>
            <returns>An array of meshes.</returns>
        </member>
        <member name="M:Rhino.Geometry.Mesh.CreateFromBrep(Rhino.Geometry.Brep,Rhino.Geometry.MeshParameters)">
            <summary>
            Create a mesh from a Brep.
            </summary>
            <param name="brep">Brep to approximate.</param>
            <param name="meshParameters">Parameters to use during meshing.</param>
            <returns>An array of meshes.</returns>
        </member>
        <member name="M:Rhino.Geometry.Mesh.CreateFromBrep(Rhino.Geometry.Brep,Rhino.Geometry.MeshingParameters)">
            <summary>
            Create a mesh from a Brep.
            </summary>
            <param name="brep">Brep to approximate.</param>
            <param name="meshingParameters">Parameters to use during meshing.</param>
            <returns>An array of meshes.</returns>
        </member>
        <member name="M:Rhino.Geometry.Mesh.CreateBooleanUnion(System.Collections.Generic.IEnumerable{Rhino.Geometry.Mesh})">
            <summary>
            Compute the Solid Union of a set of Meshes.
            </summary>
            <param name="meshes">Meshes to union.</param>
            <returns>An array of Mesh results or null on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Mesh.CreateBooleanDifference(System.Collections.Generic.IEnumerable{Rhino.Geometry.Mesh},System.Collections.Generic.IEnumerable{Rhino.Geometry.Mesh})">
            <summary>
            Compute the Solid Difference of two sets of Meshes.
            </summary>
            <param name="firstSet">First set of Meshes (the set to subtract from).</param>
            <param name="secondSet">Second set of Meshes (the set to subtract).</param>
            <returns>An array of Mesh results or null on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Mesh.CreateBooleanIntersection(System.Collections.Generic.IEnumerable{Rhino.Geometry.Mesh},System.Collections.Generic.IEnumerable{Rhino.Geometry.Mesh})">
            <summary>
            Compute the Solid Intersection of two sets of Meshes.
            </summary>
            <param name="firstSet">First set of Meshes.</param>
            <param name="secondSet">Second set of Meshes.</param>
            <returns>An array of Mesh results or null on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Mesh.DuplicateMesh">
            <summary>
            Create an exact duplicate of this Mesh.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Mesh.IsManifold(System.Boolean,System.Boolean@,System.Boolean@)">
            <summary>
            Gets a value indicating whether or not the mesh is manifold.
            A manifold mesh does not have any "edges" that are part of three or more faces.
            </summary>
            <param name="topologicalTest">
            If true, the query treats coincident vertices as the same.
            </param>
            <param name="isOriented">
            isOriented will be set to True if the mesh is a manifold
            and adjacent faces have compatible face normals.
            </param>
            <param name="hasBoundary">
            hasBoundary will be set to True if the mesh is a manifold
            and there is at least one "edge" with no more than one adjacent face.
            </param>
            <returns>True if every mesh "edge" has at most two adjacent faces.</returns>
        </member>
        <member name="M:Rhino.Geometry.Mesh.Compact">
            <summary>
            Removes any unreferenced objects from arrays, reindexes as needed
            and shrinks arrays to minimum required size.
            </summary>
            <returns>True on success, false on failure.</returns>
            <example>
                <code source="examples\vbnet\ex_addmesh.vb" lang="vbnet" />
                <code source="examples\cs\ex_addmesh.cs" lang="cs" />
                <code source="examples\py\ex_addmesh.py" lang="py" />
            </example>
        </member>
        <member name="M:Rhino.Geometry.Mesh.Flip(System.Boolean,System.Boolean,System.Boolean)">
            <summary>Reverses the direction of the mesh.</summary>
            <param name="vertexNormals">If True, vertex normals will be reversed.</param>
            <param name="faceNormals">If True, face normals will be reversed.</param>
            <param name="faceOrientation">If True, face orientations will be reversed.</param>
        </member>
        <member name="M:Rhino.Geometry.Mesh.UnifyNormals">
            <summary>
            Attempts to fix inconsistencies in the directions of meshfaces for a mesh
            </summary>
            <returns>number of faces that were modified</returns>
        </member>
        <member name="M:Rhino.Geometry.Mesh.SplitDisjointPieces">
            <summary>
            Splits up the mesh into its unconnected pieces
            </summary>
            <returns>An array containing all the disjoint pieces that make up this Mesh.</returns>
        </member>
        <member name="M:Rhino.Geometry.Mesh.Split(Rhino.Geometry.Plane)">
            <summary>
            Split a mesh by an infinite plane
            </summary>
            <param name="plane">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Mesh.GetOutlines(Rhino.Geometry.Plane)">
            <summary>
            Create outlines of a mesh projected against a plane
            </summary>
            <param name="plane">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Mesh.GetOutlines(Rhino.Display.RhinoViewport)">
            <summary>
            Create outlines of a mesh. The projection information in the
            viewport is used to determine how the outlines are projected
            </summary>
            <param name="viewport">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Mesh.GetNakedEdges">
            <summary>
            Returns all edges of a mesh that are considered "naked" in the
            sense that the edge only has one face
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Mesh.ExplodeAtUnweldedEdges">
            <summary>
            Explode the mesh into submeshes where a submesh is a collection of faces that are contained
            within a closed loop of "unwelded" edges. Unwelded edges are edges where the faces that share
            the edge have unique mesh vertexes (not mesh topology vertexes) at both ends of the edge.
            </summary>
            <returns>
            Array of submeshes on success; null on error. If the count in the returned array is 1, then
            nothing happened and the ouput is essentially a copy of the input.
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Mesh.Append(Rhino.Geometry.Mesh)">
            <summary>
            Appends a copy of another mesh to this one and updates indices of appended mesh parts.
            </summary>
            <param name="other">Mesh to append to this one.</param>
        </member>
        <member name="M:Rhino.Geometry.Mesh.GetClosestPoint(Rhino.Geometry.Point3d)">
            <summary>
            This method is Obsolete, use ClosestPoint() instead.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Mesh.ClosestPoint(Rhino.Geometry.Point3d)">
            <summary>
            Get the point on the mesh that is closest to a given test point.
            </summary>
            <param name="testPoint">Point to seach for.</param>
            <returns>The point on the mesh closest to testPoint, or Point3d.Unset on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Mesh.GetClosestPoint(Rhino.Geometry.Point3d,Rhino.Geometry.Point3d@,System.Double)">
            <summary>
            This method is Obsolete, use ClosestPoint() instead.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Mesh.ClosestPoint(Rhino.Geometry.Point3d,Rhino.Geometry.Point3d@,System.Double)">
            <summary>
            Get the point on the mesh that is closest to a given test point.
            </summary>
            <param name="testPoint">Point to seach for.</param>
            <param name="pointOnMesh">Point on the mesh closest to testPoint.</param>
            <param name="maximumDistance">
            Optional upper bound on the distance from test point to the mesh.
            If you are only interested in finding a point Q on the mesh when
            testPoint.DistanceTo(Q) &lt; maximumDistance,
            then set maximumDistance to that value.
            This parameter is ignored if you pass 0.0 for a maximumDistance.
            </param>
            <returns>
            Index of face that the closest point lies on if successful.
            -1 if not successful; the value of pointOnMesh is undefined.
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Mesh.GetClosestPoint(Rhino.Geometry.Point3d,Rhino.Geometry.Point3d@,Rhino.Geometry.Vector3d@,System.Double)">
            <summary>
            This method is Obsolete, use ClosestPoint() instead.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Mesh.ClosestPoint(Rhino.Geometry.Point3d,Rhino.Geometry.Point3d@,Rhino.Geometry.Vector3d@,System.Double)">
            <summary>
            Get the point on the mesh that is closest to a given test point.
            </summary>
            <param name="testPoint">Point to seach for.</param>
            <param name="pointOnMesh">Point on the mesh closest to testPoint.</param>
            <param name="normalAtPoint">The normal vector of the mesh at the closest point.</param>
            <param name="maximumDistance">
            Optional upper bound on the distance from test point to the mesh.
            If you are only interested in finding a point Q on the mesh when
            testPoint.DistanceTo(Q) &lt; maximumDistance,
            then set maximumDistance to that value.
            This parameter is ignored if you pass 0.0 for a maximumDistance.
            </param>
            <returns>
            Index of face that the closest point lies on if successful.
            -1 if not successful; the value of pointOnMesh is undefined.
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Mesh.PullPointsToMesh(System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d})">
            <summary>
            Pull a collection of points to a mesh.
            </summary>
            <param name="points">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Mesh.Offset(System.Double)">
            <summary>
            Make a new mesh with vertices offset a distance in the opposite direction of the existing vertex normals.
            </summary>
            <param name="distance">
            </param>
            <returns>new mesh on success, null on failure</returns>
        </member>
        <member name="M:Rhino.Geometry.Mesh.GetNakedEdgePointStatus">
            <summary>
            Returns an array of bool values equal in length to the number of vertices in this
            mesh. Each value corresponds to a mesh vertex and is set to true if the vertex is
            not completely surrounded by faces.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="T:Rhino.Geometry.Collections.MeshVertexList">
            <summary>
            Provides access to the Vertices and Vertex related functionality of a Mesh.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Collections.MeshVertexList.Item(System.Int32)">
            <summary>
            Gets or sets the vertex at the given index.
            The index must be valid or an IndexOutOfRangeException will be thrown.
            </summary>
            <param name="index">Index of control vertex to access.</param>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when the index is invalid.</exception>
            <returns>The control vertex at [index].</returns>
        </member>
        <member name="P:Rhino.Geometry.Collections.MeshVertexList.Count">
            <summary>
            Gets or sets the number of mesh vertices.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshVertexList.Clear">
            <summary>
            Clear the Vertex list on the mesh.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshVertexList.Add(System.Single,System.Single,System.Single)">
            <summary>
            Adds a new vertex to the end of the Vertex list.
            </summary>
            <param name="x">X component of new vertex coordinate.</param>
            <param name="y">Y component of new vertex coordinate.</param>
            <param name="z">Z component of new vertex coordinate.</param>
            <returns>The index of the newly added vertex.</returns>
            <example>
                <code source="examples\vbnet\ex_addmesh.vb" lang="vbnet" />
                <code source="examples\cs\ex_addmesh.cs" lang="cs" />
                <code source="examples\py\ex_addmesh.py" lang="py" />
            </example>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshVertexList.Add(System.Double,System.Double,System.Double)">
            <summary>
            Adds a new vertex to the end of the Vertex list.
            </summary>
            <param name="x">X component of new vertex coordinate.</param>
            <param name="y">Y component of new vertex coordinate.</param>
            <param name="z">Z component of new vertex coordinate.</param>
            <returns>The index of the newly added vertex.</returns>
            <example>
                <code source="examples\vbnet\ex_addmesh.vb" lang="vbnet" />
                <code source="examples\cs\ex_addmesh.cs" lang="cs" />
                <code source="examples\py\ex_addmesh.py" lang="py" />
            </example>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshVertexList.Add(Rhino.Geometry.Point3f)">
            <summary>
            Adds a new vertex to the end of the Vertex list.
            </summary>
            <param name="vertex">Location of new vertex.</param>
            <returns>The index of the newly added vertex.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshVertexList.Add(Rhino.Geometry.Point3d)">
            <summary>
            Adds a new vertex to the end of the Vertex list.
            </summary>
            <param name="vertex">Location of new vertex.</param>
            <returns>The index of the newly added vertex.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshVertexList.SetVertex(System.Int32,System.Single,System.Single,System.Single)">
            <summary>
            Sets or adds a vertex to the Vertex List.
            <para>If [index] is less than [Count], the existing vertex at [index] will be modified.</para><para>If [index] equals [Count], a new vertex is appended to the end of the vertex list.</para><para>If [index] is larger than [Count], the function will return false.</para></summary>
            <param name="index">Index of vertex to set.</param>
            <param name="x">X component of vertex location.</param>
            <param name="y">Y component of vertex location.</param>
            <param name="z">Z component of vertex location.</param>
            <returns>True on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshVertexList.SetVertex(System.Int32,System.Double,System.Double,System.Double)">
            <summary>
            Sets or adds a vertex to the Vertex List.
            <para>If [index] is less than [Count], the existing vertex at [index] will be modified.</para><para>If [index] equals [Count], a new vertex is appended to the end of the vertex list.</para><para>If [index] is larger than [Count], the function will return false.</para></summary>
            <param name="index">Index of vertex to set.</param>
            <param name="x">X component of vertex location.</param>
            <param name="y">Y component of vertex location.</param>
            <param name="z">Z component of vertex location.</param>
            <returns>True on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshVertexList.SetVertex(System.Int32,Rhino.Geometry.Point3f)">
            <summary>
            Sets or adds a vertex to the Vertex List.
            <para>If [index] is less than [Count], the existing vertex at [index] will be modified.</para><para>If [index] equals [Count], a new vertex is appended to the end of the vertex list.</para><para>If [index] is larger than [Count], the function will return false.</para></summary>
            <param name="index">Index of vertex to set.</param>
            <param name="vertex">Vertex location.</param>
            <returns>True on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshVertexList.SetVertex(System.Int32,Rhino.Geometry.Point3d)">
            <summary>
            Sets or adds a vertex to the Vertex List.
            <para>If [index] is less than [Count], the existing vertex at [index] will be modified.</para><para>If [index] equals [Count], a new vertex is appended to the end of the vertex list.</para><para>If [index] is larger than [Count], the function will return false.</para></summary>
            <param name="index">Index of vertex to set.</param>
            <param name="vertex">Vertex location.</param>
            <returns>True on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshVertexList.IsHidden(System.Int32)">
            <summary>
            Gets a value indicating whether or not a vertex is hidden.
            </summary>
            <param name="vertexIndex">Index of vertex to query.</param>
            <returns>True if the vertex is hidden, false if it is not.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshVertexList.Hide(System.Int32)">
            <summary>
            Hide the vertex at the given index.
            </summary>
            <param name="vertexIndex">Index of vertex to hide.</param>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshVertexList.Show(System.Int32)">
            <summary>
            Show the vertex at the given index.
            </summary>
            <param name="vertexIndex">Index of vertex to show.</param>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshVertexList.HideAll">
            <summary>
            Hide all vertices in the mesh.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshVertexList.ShowAll">
            <summary>
            Show all vertices in the mesh.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshVertexList.CullUnused">
            <summary>
            Cull (remove) all vertices that are currently not used by the Face list.
            </summary>
            <returns>The number of unused vertices that were removed.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshVertexList.CombineIdentical(System.Boolean,System.Boolean)">
            <summary>
            Merge identical vertices.
            </summary>
            <param name="ignoreNormals">
            If true, vertex normals will not be taken into consideration when comparing vertices.
            </param>
            <param name="ignoreAdditional">
            If true, texture coordinates, colors, and principal curvatures
            will not be taken into consideration when comparing vertices.
            </param>
            <returns>
            True if the mesh is changed, in which case the mesh will have fewer vertices than before.
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshVertexList.GetVertexFaces(System.Int32)">
            <summary>
            Get a list of all of the faces that share a given vertex
            </summary>
            <param name="vertexIndex">
            </param>
            <returns>list of indices of faces on success, null on failure</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshVertexList.GetTopologicalIndenticalVertices(System.Int32)">
            <summary>
            Get a list of other vertices which a "topologically" identical
            to this vertex
            </summary>
            <param name="vertexIndex">
            </param>
            <returns>
            Array of indices of vertices that are topoligically the same as this vertex. The
            array includes vertexIndex. Returns null on failure
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshVertexList.GetConnectedVertices(System.Int32)">
            <summary>
            Gets indices of all vertices that form "edges" with a given vertex index.
            </summary>
            <param name="vertexIndex">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshVertexList.ToPoint3fArray">
            <summary>
            Copy all of the points in this vertex list to an array of Point3d
            </summary>
            <returns>
            </returns>
        </member>
        <member name="T:Rhino.Geometry.Collections.MeshTopologyVertexList">
            <summary>
            Provides access to the mesh topology vertices of a mesh. Topology vertices are
            sets of vertices in the MeshVertexList that can topologically be considered the
            same vertex
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Collections.MeshTopologyVertexList.Item(System.Int32)">
            <summary>
            Gets or sets the vertex at the given index. Setting a location adjusts all vertices
            in the mesh's vertex list that are defined by this topological vertex
            The index must be valid or an IndexOutOfRangeException will be thrown.
            </summary>
            <param name="index">Index of topology vertex to access.</param>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when the index is invalid.</exception>
            <returns>The topological vertex at [index].</returns>
        </member>
        <member name="P:Rhino.Geometry.Collections.MeshTopologyVertexList.Count">
            <summary>
            Gets or sets the number of mesh topology vertices.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshTopologyVertexList.TopologyVertexIndex(System.Int32)">
            <summary>
            Get the topology vertex index for an existing mesh vertex in the mesh's
            VertexList
            </summary>
            <param name="vertexIndex">index of a vertex in the Mesh.Vertices</param>
            <returns>index of a topology vertex in the Mesh.TopologyVertices</returns>
            <exception cref="T:System.IndexOutOfRangeException">
            </exception>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshTopologyVertexList.MeshVertexIndices(System.Int32)">
            <summary>
            Get indices of all mesh vertices that a given topology vertex represents
            </summary>
            <param name="topologyVertexIndex">index of a topology vertex in Mesh.TopologyVertices</param>
            <returns>
            Indices of all vertices that in Mesh.Vertices that a topology vertex represents.
            </returns>
            <exception cref="T:System.IndexOutOfRangeException">
            </exception>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshTopologyVertexList.ConnectedTopologyVertices(System.Int32)">
            <summary>
            Get all topological vertices that are connected to a given vertex
            </summary>
            <param name="topologyVertexIndex">index of a topology vertex in Mesh.TopologyVertices</param>
            <returns>
            Indices of all topological vertices that are connected to this topological vertex.
            null if no vertices are connected to this vertex
            </returns>
            <exception cref="T:System.IndexOutOfRangeException">
            </exception>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshTopologyVertexList.ConnectedFaces(System.Int32)">
            <summary>
            Get all faces that are connected to a given vertex
            </summary>
            <param name="topologyVertexIndex">index of a topology vertex in Mesh.TopologyVertices</param>
            <returns>
            Indices of all faces in Mesh.Faces that are connected to this topological vertex.
            null if no faces are connected to this vertex
            </returns>
            <exception cref="T:System.IndexOutOfRangeException">
            </exception>
        </member>
        <member name="T:Rhino.Geometry.Collections.MeshVertexNormalList">
            <summary>
            Provides access to the Vertex Normals of a Mesh.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Collections.MeshVertexNormalList.Item(System.Int32)">
            <summary>
            Gets or sets the vertex at the given index.
            The index must be valid or an IndexOutOfRangeException will be thrown.
            </summary>
            <param name="index">Index of control vertex to access.</param>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when the index is invalid.</exception>
            <returns>The control vertex at [index].</returns>
        </member>
        <member name="P:Rhino.Geometry.Collections.MeshVertexNormalList.Count">
            <summary>
            Gets or sets the number of mesh vertex normals.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshVertexNormalList.Clear">
            <summary>
            Clear the Vertex Normal list on the mesh.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshVertexNormalList.Add(System.Single,System.Single,System.Single)">
            <summary>
            Adds a new vertex normal to the end of the list.
            </summary>
            <param name="x">X component of new vertex normal.</param>
            <param name="y">Y component of new vertex normal.</param>
            <param name="z">Z component of new vertex normal.</param>
            <returns>The index of the newly added vertex normal.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshVertexNormalList.Add(System.Double,System.Double,System.Double)">
            <summary>
            Adds a new vertex normal to the end of the list.
            </summary>
            <param name="x">X component of new vertex normal.</param>
            <param name="y">Y component of new vertex normal.</param>
            <param name="z">Z component of new vertex normal.</param>
            <returns>The index of the newly added vertex normal.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshVertexNormalList.Add(Rhino.Geometry.Vector3f)">
            <summary>
            Adds a new vertex normal to the end of the list.
            </summary>
            <param name="normal">new vertex normal.</param>
            <returns>The index of the newly added vertex normal.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshVertexNormalList.Add(Rhino.Geometry.Vector3d)">
            <summary>
            Adds a new vertex normal to the end of the list.
            </summary>
            <param name="normal">new vertex normal.</param>
            <returns>The index of the newly added vertex normal.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshVertexNormalList.AddRange(Rhino.Geometry.Vector3f[])">
            <summary>
            Append a collection of normal vectors.
            </summary>
            <param name="normals">Normals to append.</param>
            <returns>True on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshVertexNormalList.SetNormal(System.Int32,System.Single,System.Single,System.Single)">
            <summary>
            Sets or adds a normal to the list.
            <para>If [index] is less than [Count], the existing vertex normal at [index] will be modified.</para><para>If [index] equals [Count], a new vertex normal is appended to the end of the list.</para><para>If [index] is larger than [Count], the function will return false.</para></summary>
            <param name="index">Index of vertex normal to set.</param>
            <param name="x">X component of vertex normal.</param>
            <param name="y">Y component of vertex normal.</param>
            <param name="z">Z component of vertex normal.</param>
            <returns>True on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshVertexNormalList.SetNormal(System.Int32,System.Double,System.Double,System.Double)">
            <summary>
            Sets or adds a vertex normal to the list.
            <para>If [index] is less than [Count], the existing vertex normal at [index] will be modified.</para><para>If [index] equals [Count], a new vertex normal is appended to the end of the list.</para><para>If [index] is larger than [Count], the function will return false.</para></summary>
            <param name="index">Index of vertex normal to set.</param>
            <param name="x">X component of vertex normal.</param>
            <param name="y">Y component of vertex normal.</param>
            <param name="z">Z component of vertex normal.</param>
            <returns>True on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshVertexNormalList.SetNormal(System.Int32,Rhino.Geometry.Vector3f)">
            <summary>
            Sets or adds a vertex normal to the list.
            <para>If [index] is less than [Count], the existing vertex normal at [index] will be modified.</para><para>If [index] equals [Count], a new vertex normal is appended to the end of the vertex list.</para><para>If [index] is larger than [Count], the function will return false.</para></summary>
            <param name="index">Index of vertex normal to set.</param>
            <param name="normal">
            </param>
            <returns>True on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshVertexNormalList.SetNormal(System.Int32,Rhino.Geometry.Vector3d)">
            <summary>
            Sets or adds a vertex normal to the list.
            <para>If [index] is less than [Count], the existing vertex normal at [index] will be modified.</para><para>If [index] equals [Count], a new vertex normal is appended to the end of the list.</para><para>If [index] is larger than [Count], the function will return false.</para></summary>
            <param name="index">Index of vertex normal to set.</param>
            <param name="normal">
            </param>
            <returns>True on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshVertexNormalList.SetNormals(Rhino.Geometry.Vector3f[])">
            <summary>
            Set all normal vectors in one go. This method destroys the current normal array if it exists.
            </summary>
            <param name="normals">Normals for the entire mesh.</param>
            <returns>True on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshVertexNormalList.ComputeNormals">
            <summary>
            Computes the vertex normals based on the physical shape of the mesh.
            </summary>
            <returns>True on success, false on failure.</returns>
            <example>
                <code source="examples\vbnet\ex_addmesh.vb" lang="vbnet" />
                <code source="examples\cs\ex_addmesh.cs" lang="cs" />
                <code source="examples\py\ex_addmesh.py" lang="py" />
            </example>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshVertexNormalList.UnitizeNormals">
            <summary>
            Unitize all vertex normals.
            </summary>
            <returns>True on success, false on failure.</returns>
        </member>
        <member name="T:Rhino.Geometry.Collections.MeshFaceList">
            <summary>
            Provides access to the Faces and Face related functionality of a Mesh.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Collections.MeshFaceList.Count">
            <summary>
            Gets or sets the number of mesh faces.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Collections.MeshFaceList.QuadCount">
            <summary>
            Gets the number of faces that are quads (4 corners).
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Collections.MeshFaceList.TriangleCount">
            <summary>
            Gets the number of faces that are triangles (3 corners).
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshFaceList.Clear">
            <summary>
            Clear the Face list on the mesh.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshFaceList.AddFace(Rhino.Geometry.MeshFace)">
            <summary>
            Append a new mesh face to the end of the mesh face list.
            </summary>
            <param name="face">Face to add.</param>
            <returns>The index of the newly added face.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshFaceList.AddFace(System.Int32,System.Int32,System.Int32)">
            <summary>
            Append a new triangular face to the end of the mesh face list.
            </summary>
            <param name="vertex1">Index of first face corner.</param>
            <param name="vertex2">Index of second face corner.</param>
            <param name="vertex3">Index of third face corner.</param>
            <returns>The index of the newly added triangle.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshFaceList.AddFace(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Append a new quadragular face to the end of the mesh face list.
            </summary>
            <param name="vertex1">Index of first face corner.</param>
            <param name="vertex2">Index of second face corner.</param>
            <param name="vertex3">Index of third face corner.</param>
            <param name="vertex4">Index of fourth face corner.</param>
            <returns>The index of the newly added quad.</returns>
            <example>
                <code source="examples\vbnet\ex_addmesh.vb" lang="vbnet" />
                <code source="examples\cs\ex_addmesh.cs" lang="cs" />
                <code source="examples\py\ex_addmesh.py" lang="py" />
            </example>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshFaceList.GetFace(System.Int32)">
            <summary>
            Returns the mesh face at the given index.
            </summary>
            <param name="index">Index of face to get. Must be larger than or equal to zero and
            smaller than the Face Count of the mesh.</param>
            <returns>The mesh face at the given index on success or MeshFace.Unset if the index is out of range.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshFaceList.DeleteFaces(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Removes a collection of faces from the mesh without affecting the remaining geometry.
            </summary>
            <param name="faceIndexes">An array containing all the face indices to be removed.</param>
            <returns>The number of faces deleted on success.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshFaceList.ConvertQuadsToTriangles">
            <summary>Splits all quads along the short diagonal.</summary>
            <returns>True on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshFaceList.ConvertTrianglesToQuads(System.Double,System.Double)">
            <summary>
            Joins adjacent triangles into quads if the resulting quad is 'nice'.
            </summary>
            <param name="angleToleranceRadians">
            Used to compare adjacent triangles' face normals. For two triangles
            to be considered, the angle between their face normals has to
            be &lt;= angleToleranceRadians. When in doubt use RhinoMath.PI/90.0 (2 degrees).
            </param>
            <param name="minimumDiagonalLengthRatio">
            ( &lt;= 1.0) For two triangles to be considered the ratio of the
            resulting quad's diagonals
            (length of the shortest diagonal)/(length of longest diagonal).
            has to be &gt;= minimumDiagonalLengthRatio. When in doubt us .875.
            </param>
            <returns>True on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshFaceList.CullDegenerateFaces">
            <summary>
            Cull (delete) all degenerate faces from the mesh.
            </summary>
            <returns>The number of degenerate faces that were removed.</returns>
        </member>
        <member name="T:Rhino.Geometry.Collections.MeshFaceNormalList">
            <summary>
            Provides access to the Face normals of a Mesh.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Collections.MeshFaceNormalList.Item(System.Int32)">
            <summary>
            Gets or sets the face normal at the given face index.
            The index must be valid or an IndexOutOfRangeException will be thrown.
            </summary>
            <param name="index">Index of face normal to access.</param>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when the index is invalid.</exception>
            <returns>The face normal at [index].</returns>
        </member>
        <member name="P:Rhino.Geometry.Collections.MeshFaceNormalList.Count">
            <summary>
            Gets or sets the number of mesh face normals.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshFaceNormalList.Clear">
            <summary>
            Clear the Face Normal list on the mesh.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshFaceNormalList.AddFaceNormal(System.Single,System.Single,System.Single)">
            <summary>
            Append a face normal to the list of mesh face normals.
            </summary>
            <param name="x">X component of face normal.</param>
            <param name="y">Y component of face normal.</param>
            <param name="z">Z component of face normal.</param>
            <returns>The index of the newly added face normal.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshFaceNormalList.AddFaceNormal(System.Double,System.Double,System.Double)">
            <summary>
            Append a face normal to the list of mesh face normals.
            </summary>
            <param name="x">X component of face normal.</param>
            <param name="y">Y component of face normal.</param>
            <param name="z">Z component of face normal.</param>
            <returns>The index of the newly added face normal.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshFaceNormalList.AddFaceNormal(Rhino.Geometry.Vector3d)">
            <summary>
            Append a face normal to the list of mesh face normals.
            </summary>
            <param name="normal">New face normal.</param>
            <returns>The index of the newly added face normal.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshFaceNormalList.AddFaceNormal(Rhino.Geometry.Vector3f)">
            <summary>
            Append a face normal to the list of mesh face normals.
            </summary>
            <param name="normal">New face normal.</param>
            <returns>The index of the newly added face normal.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshFaceNormalList.UnitizeFaceNormals">
            <summary>
            Unitize all the existing face normals.
            </summary>
            <returns>True on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshFaceNormalList.ComputeFaceNormals">
            <summary>
            Compute all the face normals for this mesh based on the physical shape of the mesh.
            </summary>
            <returns>True on success, false on failure.</returns>
        </member>
        <member name="T:Rhino.Geometry.Collections.MeshVertexColorList">
            <summary>
            Provides access to the vertex colors of a mesh object.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Collections.MeshVertexColorList.Item(System.Int32)">
            <summary>
            Gets or sets the vertex color at the given index.
            The index must be valid or an IndexOutOfRangeException will be thrown.
            </summary>
            <param name="index">Index of vertex control to access.</param>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when the index is invalid.</exception>
            <returns>The vertex color at [index].</returns>
        </member>
        <member name="P:Rhino.Geometry.Collections.MeshVertexColorList.Count">
            <summary>
            Gets or sets the number of mesh colors.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshVertexColorList.Clear">
            <summary>
            Clear the Vertex Color list on the mesh.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshVertexColorList.Add(System.Int32,System.Int32,System.Int32)">
            <summary>
            Adds a new vertex color to the end of the Color list.
            </summary>
            <param name="red">Red component of color, must be in the 0~255 range.</param>
            <param name="green">Green component of color, must be in the 0~255 range.</param>
            <param name="blue">Blue component of color, must be in the 0~255 range.</param>
            <returns>The index of the newly added color.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshVertexColorList.Add(System.Drawing.Color)">
            <summary>
            Adds a new vertex color to the end of the Color list.
            </summary>
            <param name="color">Color to append, Alpha channels will be ignored.</param>
            <returns>The index of the newly added color.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshVertexColorList.SetColor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets or adds a vertex color to the Color List.
            <para>If [index] is less than [Count], the existing vertex at [index] will be modified.</para><para>If [index] equals [Count], a new vertex is appended to the end of the vertex list.</para><para>If [index] is larger than [Count], the function will return false.</para></summary>
            <param name="index">Index of vertex color to set.
            If index equals Count, then the color will be appended.</param>
            <param name="red">Red component of vertex color. Value must be in the 0~255 range.</param>
            <param name="green">Green component of vertex color. Value must be in the 0~255 range.</param>
            <param name="blue">Blue component of vertex color. Value must be in the 0~255 range.</param>
            <returns>True on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshVertexColorList.SetColor(System.Int32,System.Drawing.Color)">
            <summary>
            Sets or adds a vertex to the Vertex List.
            <para>If [index] is less than [Count], the existing vertex at [index] will be modified.</para><para>If [index] equals [Count], a new vertex is appended to the end of the vertex list.</para><para>If [index] is larger than [Count], the function will return false.</para></summary>
            <param name="index">Index of vertex color to set.
            If index equals Count, then the color will be appended.</param>
            <param name="color">Color to set, Alpha channels will be ignored.</param>
            <returns>True on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshVertexColorList.CreateMonotoneMesh(System.Drawing.Color)">
            <summary>
            Create a valid vertex color list consisting of a single color.
            </summary>
            <param name="baseColor">Color to apply to every vertex.</param>
            <returns>True on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshVertexColorList.SetColors(System.Drawing.Color[])">
            <summary>
            Set all the vertex colors in one go. For the Mesh to be valid, the number
            of colors must match the number of vertices.
            </summary>
            <param name="colors">Colors to set.</param>
            <returns>True on success, False on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshVertexColorList.AppendColors(System.Drawing.Color[])">
            <summary>
            Append a collection of colors to the Vertex Color list.
            For the Mesh to be valid, the number of colors must match the number of vertices.
            </summary>
            <param name="colors">Colors to append.</param>
            <returns>True on success, false on failure.</returns>
        </member>
        <member name="T:Rhino.Geometry.Collections.MeshTextureCoordinateList">
            <summary>
            Provides access to the Vertex Texture coordinates of a Mesh.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Collections.MeshTextureCoordinateList.Item(System.Int32)">
            <summary>
            Gets or sets the texture coordinate at the given index.
            The index must be valid or an IndexOutOfRangeException will be thrown.
            </summary>
            <param name="index">Index of texture coordinates to access.</param>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when the index is invalid.</exception>
            <returns>The texture coordinate at [index].</returns>
        </member>
        <member name="P:Rhino.Geometry.Collections.MeshTextureCoordinateList.Count">
            <summary>
            Gets or sets the number of texture coordinates.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshTextureCoordinateList.Clear">
            <summary>
            Clear the Texture Coordinate list on the mesh.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshTextureCoordinateList.Add(System.Single,System.Single)">
            <summary>
            Adds a new texture coordinate to the end of the Texture list.
            </summary>
            <param name="s">S component of new texture coordinate.</param>
            <param name="t">T component of new texture coordinate.</param>
            <returns>The index of the newly added texture coordinate.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshTextureCoordinateList.Add(System.Double,System.Double)">
            <summary>
            Adds a new texture coordinate to the end of the Texture list.
            </summary>
            <param name="s">S component of new texture coordinate.</param>
            <param name="t">T component of new texture coordinate.</param>
            <returns>The index of the newly added texture coordinate.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshTextureCoordinateList.Add(Rhino.Geometry.Point2f)">
            <summary>
            Adds a new texture coordinate to the end of the Texture list.
            </summary>
            <param name="tc">Texture coordinate to add.</param>
            <returns>The index of the newly added texture coordinate.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshTextureCoordinateList.Add(Rhino.Geometry.Point3d)">
            <summary>
            Adds a new texture coordinate to the end of the Texture list.
            </summary>
            <param name="tc">Texture coordinate to add.</param>
            <returns>The index of the newly added texture coordinate.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshTextureCoordinateList.AddRange(Rhino.Geometry.Point2f[])">
            <summary>
            Append an array of texture coordinates.
            </summary>
            <param name="textureCoordinates">Texture coordinates to append.</param>
            <returns>True on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshTextureCoordinateList.SetTextureCoordinate(System.Int32,System.Single,System.Single)">
            <summary>
            Sets or adds a texture coordinate to the Texture Coordinate List.
            <para>If [index] is less than [Count], the existing coordinate at [index] will be modified.</para><para>If [index] equals [Count], a new coordinate is appended to the end of the coordinate list.</para><para>If [index] is larger than [Count], the function will return false.</para></summary>
            <param name="index">Index of texture coordinate to set.</param>
            <param name="s">S component of texture coordinate.</param>
            <param name="t">T component of texture coordinate.</param>
            <returns>True on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshTextureCoordinateList.SetTextureCoordinate(System.Int32,System.Double,System.Double)">
            <summary>
            Sets or adds a texture coordinate to the Texture Coordinate List.
            <para>If [index] is less than [Count], the existing coordinate at [index] will be modified.</para><para>If [index] equals [Count], a new coordinate is appended to the end of the coordinate list.</para><para>If [index] is larger than [Count], the function will return false.</para></summary>
            <param name="index">Index of texture coordinate to set.</param>
            <param name="s">S component of texture coordinate.</param>
            <param name="t">T component of texture coordinate.</param>
            <returns>True on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshTextureCoordinateList.SetTextureCoordinate(System.Int32,Rhino.Geometry.Point2f)">
            <summary>
            Sets or adds a texture coordinate to the Texture Coordinate List.
            <para>If [index] is less than [Count], the existing coordinate at [index] will be modified.</para><para>If [index] equals [Count], a new coordinate is appended to the end of the coordinate list.</para><para>If [index] is larger than [Count], the function will return false.</para></summary>
            <param name="index">Index of texture coordinate to set.</param>
            <param name="tc">Texture coordinate point.</param>
            <returns>True on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshTextureCoordinateList.SetTextureCoordinate(System.Int32,Rhino.Geometry.Point3f)">
            <summary>
            Sets or adds a texture coordinate to the Texture Coordinate List.
            <para>If [index] is less than [Count], the existing coordinate at [index] will be modified.</para><para>If [index] equals [Count], a new coordinate is appended to the end of the coordinate list.</para><para>If [index] is larger than [Count], the function will return false.</para></summary>
            <param name="index">Index of texture coordinate to set.</param>
            <param name="tc">Texture coordinate point.</param>
            <returns>True on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshTextureCoordinateList.SetTextureCoordinates(Rhino.Geometry.Point2f[])">
            <summary>
            Set all texture coordinates in one go.
            </summary>
            <param name="textureCoordinates">Texture coordinates to assign to the mesh.</param>
            <returns>True on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshTextureCoordinateList.NormalizeTextureCoordinates">
            <summary>
            Scale the texture coordinates so the texture domains are [0,1]
            and eliminate any texture rotations.
            </summary>
            <returns>True on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshTextureCoordinateList.TransposeTextureCoordinates">
            <summary>
            David: What does this do?
            </summary>
            <returns>True on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshTextureCoordinateList.ReverseTextureCoordinates(System.Int32)">
            <summary>
            Reverse one coordinate direction of the texture coordinates, within texture domain m_tex_domain
            </summary>
            <param name="direction">
            0 = first texture coordinate is reversed
            1 = second texture coordinate is reversed
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Rhino.Geometry.MeshFace.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Create a new triangular Mesh face.
            </summary>
            <param name="a">Index of first corner.</param>
            <param name="b">Index of second corner.</param>
            <param name="c">Index of third corner.</param>
        </member>
        <member name="M:Rhino.Geometry.MeshFace.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Create a new quadrangular Mesh face.
            </summary>
            <param name="a">Index of first corner.</param>
            <param name="b">Index of second corner.</param>
            <param name="c">Index of third corner.</param>
            <param name="d">Index of fourth corner.</param>
        </member>
        <member name="P:Rhino.Geometry.MeshFace.Unset">
            <summary>
            Gets an Unset MeshFace. Unset faces have Int32.MinValue for all corner indices.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.MeshFace.DebuggerDisplayUtil">
            <summary>
            Internal property that figures out the debugger display for Mesh Faces.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.MeshFace.A">
            <summary>
            Gets or sets the first corner index of the mesh face.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.MeshFace.B">
            <summary>
            Gets or sets the second corner index of the mesh face.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.MeshFace.C">
            <summary>
            Gets or sets the third corner index of the mesh face.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.MeshFace.D">
            <summary>
            Gets or sets the fourth corner index of the mesh face.
            If D equals C, the mesh face is considered to be a triangle
            rather than a quad.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.MeshFace.IsTriangle">
            <summary>
            Gets a value indicating whether or not this mesh face is a triangle.
            A mesh face is considered to be a triangle when C equals D, thus it is
            possible for an Invalid mesh face to also be a triangle.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.MeshFace.IsQuad">
            <summary>
            Gets a value indicating whether or not this mesh face is a quad.
            A mesh face is considered to be a triangle when C does not equal D,
            thus it is possible for an Invalid mesh face to also be a quad.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.MeshFace.IsValid">
            <summary>
            Gets a value indicating whether or not this mesh face
            is considered to be valid. Note that even valid mesh faces
            could potentially be invalid in the context of a specific Mesh,
            if one or more of the corner indices exceeds the number of
            vertices on the mesh. If you want to perform a complete
            validity check, use IsValid(int) instead.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.MeshFace.IsValid(System.Int32)">
            <summary>
            Gets a value indicating whether or not this mesh face
            is considered to be valid. Unlike the simple IsValid function,
            this function takes upper bound indices into account.
            </summary>
            <param name="vertexCount">Number of vertices in the mesh that this face is a part of.</param>
            <returns>True if the face is considered valid, false if not.</returns>
        </member>
        <member name="M:Rhino.Geometry.MeshFace.Set(System.Int32,System.Int32,System.Int32)">
            <summary>
            Set all the corners for this face as a triangle.
            </summary>
            <param name="a">Index of first corner.</param>
            <param name="b">Index of second corner.</param>
            <param name="c">Index of third corner.</param>
        </member>
        <member name="M:Rhino.Geometry.MeshFace.Set(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Set all the corners for this face as a quad.
            </summary>
            <param name="a">Index of first corner.</param>
            <param name="b">Index of second corner.</param>
            <param name="c">Index of third corner.</param>
            <param name="d">Index of fourth corner.</param>
        </member>
        <member name="M:Rhino.Geometry.MeshFace.Flip">
            <summary>
            Reverses the orientation of the face by swapping corners.
            The first corner is always maintained.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.NurbsSurface.KnotsU">
            <summary>
            The U direction knot vector
            </summary>
        </member>
        <member name="P:Rhino.Geometry.NurbsSurface.KnotsV">
            <summary>
            The V direction knot vector
            </summary>
        </member>
        <member name="P:Rhino.Geometry.NurbsSurface.IsRational">
            <summary>
            Gets a value indicating whether or not the nurbs surface is rational.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.NurbsSurface.CreateFromPoints(System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d},System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Create a surface from control-points.
            </summary>
            <param name="points">Control point locations.</param>
            <param name="uCount">Number of points in U direction.</param>
            <param name="vCount">Number of points in V direction.</param>
            <param name="uDegree">Degree of surface in U direction.</param>
            <param name="vDegree">Degree of surface in V direction.</param>
            <returns>A NurbsSurface on success or null on failure.</returns>
            <remarks>uCount multiplied by vCount must equal the number of points supplied.</remarks>
        </member>
        <member name="M:Rhino.Geometry.NurbsSurface.CreateThroughPoints(System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d},System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Create a surface from control-points.
            </summary>
            <param name="points">Control point locations.</param>
            <param name="uCount">Number of points in U direction.</param>
            <param name="vCount">Number of points in V direction.</param>
            <param name="uDegree">Degree of surface in U direction.</param>
            <param name="vDegree">Degree of surface in V direction.</param>
            <param name="uClosed">True if the surface should be closed in the U direction.</param>
            <param name="vClosed">True if the surface should be closed in the V direction.</param>
            <returns>A NurbsSurface on success or null on failure.</returns>
            <remarks>uCount multiplied by vCount must equal the number of points supplied.</remarks>
        </member>
        <member name="M:Rhino.Geometry.NurbsSurface.CreateRuledSurface(Rhino.Geometry.Curve,Rhino.Geometry.Curve)">
            <summary>
            Create a Ruled surface between two curves. Curves must share the same knot-vector.
            </summary>
            <param name="curveA">First curve.</param>
            <param name="curveB">Second curve.</param>
            <returns>A ruled surface on success or null on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.NurbsSurface.CreateFromCorners(Rhino.Geometry.Point3d,Rhino.Geometry.Point3d,Rhino.Geometry.Point3d,Rhino.Geometry.Point3d)">
            <summary>
            Make a surface from 4 corner points
            </summary>
            <param name="corner1">
            </param>
            <param name="corner2">
            </param>
            <param name="corner3">
            </param>
            <param name="corner4">
            </param>
            <returns>the resulting surface or null on error</returns>
        </member>
        <member name="M:Rhino.Geometry.NurbsSurface.CreateFromCorners(Rhino.Geometry.Point3d,Rhino.Geometry.Point3d,Rhino.Geometry.Point3d,Rhino.Geometry.Point3d,System.Double)">
            <summary>
            Make a surface from 4 corner points
            </summary>
            <param name="corner1">
            </param>
            <param name="corner2">
            </param>
            <param name="corner3">
            </param>
            <param name="corner4">
            </param>
            <param name="tolerance">minimum edge length without collapsing to a singularity</param>
            <returns>the resulting surface or null on error</returns>
        </member>
        <member name="M:Rhino.Geometry.NurbsSurface.CreateFromCorners(Rhino.Geometry.Point3d,Rhino.Geometry.Point3d,Rhino.Geometry.Point3d)">
            <summary>
            Make a surface from 3 corner points
            </summary>
            <param name="corner1">
            </param>
            <param name="corner2">
            </param>
            <param name="corner3">
            </param>
            <returns>the resulting surface or null on error</returns>
        </member>
        <member name="M:Rhino.Geometry.NurbsSurface.CreateRailRevolvedSurface(Rhino.Geometry.Curve,Rhino.Geometry.Curve,Rhino.Geometry.Line,System.Boolean)">
            <summary>
            Creates a railed Surface-of-Revolution.
            </summary>
            <param name="profile">Profile curve for revolution.</param>
            <param name="rail">Rail curve for revolution.</param>
            <param name="axis">Axis of revolution.</param>
            <param name="scaleHeight">If true, surface will be locally scaled.</param>
            <returns>A NurbsSurface or null on failure.</returns>
        </member>
        <member name="T:Rhino.Geometry.Collections.NurbsSurfacePointList">
            <summary>
            Provides access to the control points of a nurbs surface.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Collections.NurbsSurfacePointList.CountU">
            <summary>
            Gets the number of control points in the 'U' direction of this surface.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Collections.NurbsSurfacePointList.CountV">
            <summary>
            Gets the number of control points in the 'V' direction of this surface.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Collections.NurbsSurfacePointList.GetGrevillePoint(System.Int32,System.Int32)">
            <summary>
            Get the Greville point (u, v) coordinates associated with the control point at the given indices.
            </summary>
            <param name="u">Index of control-point along surface 'U' direction.</param>
            <param name="v">Index of control-point along surface 'U' direction.</param>
            <returns>A Surface UV coordinate on success, Point2d.Unset on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.NurbsSurfacePointList.GetControlPoint(System.Int32,System.Int32)">
            <summary>
            Gets the control point at the given (u, v) index.
            </summary>
            <param name="u">Index of control-point along surface 'U' direction.</param>
            <param name="v">Index of control-point along surface 'U' direction.</param>
            <returns>The control point at the given (u, v) index.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.NurbsSurfacePointList.SetControlPoint(System.Int32,System.Int32,Rhino.Geometry.Point3d)">
            <summary>
            Sets the control point at the given (u, v) index.
            </summary>
            <param name="u">Index of control-point along surface 'U' direction.</param>
            <param name="v">Index of control-point along surface 'U' direction.</param>
            <param name="cp">The control point location to set (weight is assumed to be 1.0).</param>
            <returns>True on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.NurbsSurfacePointList.SetControlPoint(System.Int32,System.Int32,Rhino.Geometry.ControlPoint)">
            <summary>
            Sets the control point at the given (u, v) index.
            </summary>
            <param name="u">Index of control-point along surface 'U' direction.</param>
            <param name="v">Index of control-point along surface 'U' direction.</param>
            <param name="cp">The control point to set.</param>
            <returns>True on success, false on failure.</returns>
        </member>
        <member name="T:Rhino.Geometry.Collections.NurbsSurfaceKnotList">
            <summary>
            Provides access to the knot vector of a nurbs surface.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Collections.NurbsSurfaceKnotList.Item(System.Int32)">
            <summary>
            Gets or sets the knot vector value at the given index.
            </summary>
            <param name="index">Index of knot to access.</param>
            <returns>The knot value at [index]</returns>
        </member>
        <member name="P:Rhino.Geometry.Collections.NurbsSurfaceKnotList.Count">
            <summary>Total number of knots in this curve.</summary>
        </member>
        <member name="M:Rhino.Geometry.Collections.NurbsSurfaceKnotList.InsertKnot(System.Double)">
            <summary>
            Insert a knot and update control point locations.
            Does not change parameterization or locus of curve.
            </summary>
            <param name="value">Knot value to insert.</param>
            <returns>True on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.NurbsSurfaceKnotList.InsertKnot(System.Double,System.Int32)">
            <summary>
            Insert a knot and update control point locations.
            Does not change parameterization or locus of curve.
            </summary>
            <param name="value">Knot value to insert.</param>
            <param name="multiplicity">Multiplicity of knot to insert.</param>
            <returns>True on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.NurbsSurfaceKnotList.KnotMultiplicity(System.Int32)">
            <summary>Get knot multiplicity</summary>
            <param name="index">Index of knot to query.</param>
            <returns>The multiplicity (valence) of the knot.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.NurbsSurfaceKnotList.CreateUniformKnots(System.Double)">
            <summary>
            Compute a clamped, uniform knot vector based on the current
            degree and control point count. Does not change values of control
            vertices.
            </summary>
            <param name="knotSpacing">Spacing of subsequent knots.</param>
            <returns>True on success, False on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.NurbsSurfaceKnotList.CreatePeriodicKnots(System.Double)">
            <summary>
            Compute a clamped, uniform, periodic knot vector based on the current
            degree and control point count. Does not change values of control
            vertices.
            </summary>
            <param name="knotSpacing">Spacing of subsequent knots.</param>
            <returns>True on success, False on failure.</returns>
        </member>
        <member name="T:Rhino.Runtime.CommonObject">
            <summary>
            Base class for .NET classes that wrap C++ unmanaged Rhino classes
            </summary>
        </member>
        <member name="P:Rhino.Runtime.CommonObject.IsDocumentControlled">
            <summary>
            If true this object may not be modified. Any properties or functions that attempt
            to modify this object when it is set to "IsReadOnly" will throw a NotSupportedException
            </summary>
        </member>
        <member name="M:Rhino.Runtime.CommonObject.EnsurePrivateCopy">
            <summary>
            If you want to keep a copy of this class around by holding onto it in a variable after a command
            completes, call EnsurePrivateCopy to make sure that this class is not tied to the document. You can
            call this function as many times as you want.
            </summary>
        </member>
        <member name="M:Rhino.Runtime.CommonObject.ReleaseNonConstPointer">
            <summary>
            Used for "temporary" wrapping of objects that we don't want .NET to destruct
            on disposal
            </summary>
        </member>
        <member name="M:Rhino.Geometry.PlaneSurface.#ctor(Rhino.Geometry.Plane,Rhino.Geometry.Interval,Rhino.Geometry.Interval)">
            <summary>
            Constructs a PlaneSurface with x and y intervals
            </summary>
            <param name="plane">The plane.</param>
            <param name="xExtents">The x interval of the plane that defines the rectangle.
            The corresponding evaluation interval domain is set so that it matches the
            extents interval</param>
            <param name="yExtents">The y interval of the plane that defines the rectangle.
            The corresponding evaluation interval domain is set so that it matches the
            extents interval</param>
        </member>
        <member name="M:Rhino.Geometry.PlaneSurface.CreateThroughBox(Rhino.Geometry.Line,Rhino.Geometry.Vector3d,Rhino.Geometry.BoundingBox)">
            <summary>
            Make a plane that includes a line and a vector and goes through a bounding box
            </summary>
            <param name="lineInPlane">
            </param>
            <param name="vectorInPlane">
            </param>
            <param name="box">box to cut through</param>
            <returns>new PlaneSurface on success, NULL on error</returns>
        </member>
        <member name="M:Rhino.Geometry.PlaneSurface.CreateThroughBox(Rhino.Geometry.Plane,Rhino.Geometry.BoundingBox)">
            <summary>
            Extend a plane so that is goes through a bounding box
            </summary>
            <param name="plane">
            </param>
            <param name="box">
            </param>
            <returns>new PlaneSurface on success, NULL on error</returns>
        </member>
        <member name="T:Rhino.Geometry.PointCloudItem">
            <summary>
            Represents a single item in a pointcloud. A PointCloud item
            always has a location, but it has an optional normal vector and color.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.PointCloudItem.Location">
            <summary>
            Gets or sets the Location of this PointCloudItem.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.PointCloudItem.X">
            <summary>
            Gets or sets the X component of this PointCloudItem location.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.PointCloudItem.Y">
            <summary>
            Gets or sets the Y component of this PointCloudItem location.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.PointCloudItem.Z">
            <summary>
            Gets or sets the Z component of this PointCloudItem location.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.PointCloudItem.Normal">
            <summary>
            Gets or sets the Normal vector for this PointCloudItem.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.PointCloudItem.Color">
            <summary>
            Gets or sets the color of this PointCloudItem.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.PointCloudItem.Hidden">
            <summary>
            Gets or sets the hidden flag of this PointCloudItem.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.PointCloudItem.Index">
            <summary>
            Gets the index of this PointCloud item.
            </summary>
        </member>
        <member name="T:Rhino.Geometry.PointCloud">
            <summary>
            Represents a collection of coordinates with optional normal vectors and colors.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.PointCloud.Item(System.Int32)">
            <summary>
            Gets the item at the given index.
            </summary>
            <param name="index">Index of item to retrieve.</param>
            <returns>The item at the given index.</returns>
        </member>
        <member name="P:Rhino.Geometry.PointCloud.Count">
            <summary>
            Gets the number of points in this pointcloud.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.PointCloud.HiddenPointCount">
            <summary>
            Gets the number of points that have their Hidden flag set.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.PointCloud.ConstainsColors">
            <summary>
            Gets a value indicating whether or not the points in this
            pointcloud have colors assigned to them.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.PointCloud.ContainsNormals">
            <summary>
            Gets a value indicating whether or not the points in this
            pointcloud have colors assigned to them.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.PointCloud.ContainsHiddenFlags">
            <summary>
            Gets a value indicating whether or not the points in this
            pointcloud have hidden flags assigned to them.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.PointCloud.ClearColors">
            <summary>
            Destroy the Color information in this PointCloud.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.PointCloud.ClearNormals">
            <summary>
            Destroy the Normal vector information in this PointCloud.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.PointCloud.ClearHiddenFlags">
            <summary>
            Destroy the Hidden flag information in this PointCloud.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.PointCloud.AppendNew">
            <summary>
            Append a new PointCloudItem to the end of this PointCloud.
            </summary>
            <returns>The newly appended item.</returns>
        </member>
        <member name="M:Rhino.Geometry.PointCloud.InsertNew(System.Int32)">
            <summary>
            </summary>
            <param name="index">Index of new item.</param>
            <returns>The newly inserted item.</returns>
        </member>
        <member name="M:Rhino.Geometry.PointCloud.Merge(Rhino.Geometry.PointCloud)">
            <summary>
            Merge this PointCloud with another pointcloud.
            </summary>
            <param name="other">PointCloud to merge with this one.</param>
        </member>
        <member name="M:Rhino.Geometry.PointCloud.Add(Rhino.Geometry.Point3d)">
            <summary>
            Append a new point to the end of the list.
            </summary>
            <param name="point">Point to append.</param>
        </member>
        <member name="M:Rhino.Geometry.PointCloud.Add(Rhino.Geometry.Point3d,Rhino.Geometry.Vector3d)">
            <summary>
            Append a new point to the end of the list.
            </summary>
            <param name="point">Point to append.</param>
            <param name="normal">Normal vector of new point.</param>
        </member>
        <member name="M:Rhino.Geometry.PointCloud.Add(Rhino.Geometry.Point3d,System.Drawing.Color)">
            <summary>
            Append a new point to the end of the list.
            </summary>
            <param name="point">Point to append.</param>
            <param name="color">Color of new point.</param>
        </member>
        <member name="M:Rhino.Geometry.PointCloud.Add(Rhino.Geometry.Point3d,Rhino.Geometry.Vector3d,System.Drawing.Color)">
            <summary>
            Append a new point to the end of the list.
            </summary>
            <param name="point">Point to append.</param>
            <param name="normal">Normal vector of new point.</param>
            <param name="color">Color of new point.</param>
        </member>
        <member name="M:Rhino.Geometry.PointCloud.AddRange(System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d})">
            <summary>
            Append a collection of points to this PointCloud.
            </summary>
            <param name="points">Points to append.</param>
        </member>
        <member name="M:Rhino.Geometry.PointCloud.Insert(System.Int32,Rhino.Geometry.Point3d)">
            <summary>
            Insert a new point into the point list.
            </summary>
            <param name="index">Insertion index.</param>
            <param name="point">Point to append.</param>
        </member>
        <member name="M:Rhino.Geometry.PointCloud.Insert(System.Int32,Rhino.Geometry.Point3d,Rhino.Geometry.Vector3d)">
            <summary>
            Insert a new point into the point list.
            </summary>
            <param name="index">Insertion index.</param>
            <param name="point">Point to append.</param>
            <param name="normal">Normal vector of new point.</param>
        </member>
        <member name="M:Rhino.Geometry.PointCloud.Insert(System.Int32,Rhino.Geometry.Point3d,System.Drawing.Color)">
            <summary>
            Insert a new point into the point list.
            </summary>
            <param name="index">Insertion index.</param>
            <param name="point">Point to append.</param>
            <param name="color">Color of new point.</param>
        </member>
        <member name="M:Rhino.Geometry.PointCloud.Insert(System.Int32,Rhino.Geometry.Point3d,Rhino.Geometry.Vector3d,System.Drawing.Color)">
            <summary>
            Insert a new point into the point list.
            </summary>
            <param name="index">Insertion index.</param>
            <param name="point">Point to append.</param>
            <param name="normal">Normal vector of new point.</param>
            <param name="color">Color of new point.</param>
        </member>
        <member name="M:Rhino.Geometry.PointCloud.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d})">
            <summary>
            Append a collection of points to this PointCloud.
            </summary>
            <param name="index">Index at which to insert the new collection.</param>
            <param name="points">Points to append.</param>
        </member>
        <member name="M:Rhino.Geometry.PointCloud.RemoveAt(System.Int32)">
            <summary>
            Remove the point at the given index.
            </summary>
            <param name="index">Index of point to remove.</param>
        </member>
        <member name="M:Rhino.Geometry.PointCloud.GetPoints">
            <summary>
            Copy all the point coordinates in this PointCloud to an array.
            </summary>
            <returns>An array containing all the points in this PointCloud.</returns>
        </member>
        <member name="M:Rhino.Geometry.PointCloud.GetNormals">
            <summary>
            Copy all the normal vectors in this PointCloud to an array.
            </summary>
            <returns>An array containing all the normals in this PointCloud.</returns>
        </member>
        <member name="M:Rhino.Geometry.PointCloud.GetColors">
            <summary>
            Copy all the point colors in this PointCloud to an array.
            </summary>
            <returns>An array containing all the colors in this PointCloud.</returns>
        </member>
        <member name="T:Rhino.Geometry.Point3dGrid">
            <summary>
            Represents a grid of 3D points
            </summary>
        </member>
        <member name="M:Rhino.Geometry.PolyCurve.#ctor">
            <summary>
            Create a new, empty PolyCurve.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.PolyCurve.SegmentCount">
            <summary>
            Gets the number of segments that make up this Polycurve.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.PolyCurve.IsNested">
            <summary>
            Gets a value indicating whether or not a PolyCurve contains nested PolyCurves.
            </summary>
            <seealso cref="M:Rhino.Geometry.PolyCurve.RemoveNesting" />
        </member>
        <member name="P:Rhino.Geometry.PolyCurve.HasGap">
            <summary>
            This is a quick way to see if the curve has gaps between the sub curve segments.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.PolyCurve.Duplicate">
            <summary>
            Duplicate this Polycurve.
            </summary>
            <returns>An exact duplicate of this curve.</returns>
        </member>
        <member name="M:Rhino.Geometry.PolyCurve.DuplicatePolyCurve">
            <summary>
            Duplicate this Polycurve.
            </summary>
            <returns>An exact duplicate of this curve.</returns>
        </member>
        <member name="M:Rhino.Geometry.PolyCurve.SegmentCurve(System.Int32)">
            <summary>
            Get the segment curve at the given index.
            </summary>
            <param name="index">Index of segment to retrieve.</param>
            <returns>The segment at the given index or null on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.PolyCurve.RemoveNesting">
            <summary>
            Explodes nested polycurve segments and reconstructs this curve from the shattered remains.
            The result will have not have any PolyCurves as segments but it will have identical
            locus and parameterization.
            </summary>
            <returns>
            True if any nested PolyCurve was found and absorbed, false if no PolyCurve segments could be found.
            </returns>
            <seealso cref="P:Rhino.Geometry.PolyCurve.IsNested" />
        </member>
        <member name="M:Rhino.Geometry.PolyCurve.Explode">
            <summary>
            Explode this PolyCurve into a list of Curve segments. This will <i>not</i> explode nested PolyCurves.
            Place a call to RemoveNesting() first if you want all individual segments.
            </summary>
            <returns>An array of polycurve segments.</returns>
        </member>
        <member name="M:Rhino.Geometry.PolyCurve.Append(Rhino.Geometry.Line)">
            <summary>
            Append and match the start of the line to the end of polycurve.
            This function will fail if the PolyCurve is closed.
            </summary>
            <param name="line">Line segment to append.</param>
            <returns>True on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.PolyCurve.Append(Rhino.Geometry.Arc)">
            <summary>
            Append and match the start of the arc to the end of polycurve.
            This function will fail if the PolyCurve is closed or if SegmentCount &gt; 0 and the arc is closed.
            </summary>
            <param name="arc">Arc segment to append.</param>
            <returns>True on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.PolyCurve.Append(Rhino.Geometry.Curve)">
            <summary>
            Append and match the start of the curve to the end of polycurve.
            This function will fail if the PolyCurve is closed or if SegmentCount &gt; 0 and the new segment is closed.
            </summary>
            <param name="curve">Segment to append.</param>
            <returns>True on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.PolyCurve.SegmentCurveParameter(System.Double)">
            <summary>
            Converts a polycurve parameter to a segment curve parameter.
            </summary>
            <param name="polycurveParameter">Parameter on PolyCurve to convert.</param>
            <returns>
            Segment curve evaluation parameter or UnsetValue if the
            segment curve parameter could not be computed.
            </returns>
        </member>
        <member name="M:Rhino.Geometry.PolyCurve.PolyCurveParameter(System.Int32,System.Double)">
            <summary>
            Converts a segment curve parameter to a polycurve parameter.
            </summary>
            <param name="segmentIndex">Index of segment.</param>
            <param name="segmentCurveParameter">Parameter on segment.</param>
            <returns>
            Polycurve evaluation parameter or UnsetValue if the polycurve curve parameter could not be computed.
            </returns>
        </member>
        <member name="M:Rhino.Geometry.PolyCurve.SegmentDomain(System.Int32)">
            <summary>
            Returns the polycurve subdomain assigned to a segment curve.
            </summary>
            <param name="segmentIndex">Index of segment.</param>
            <returns>
            The polycurve subdomain assigned to a segment curve.
            Returns Interval.Unset if segment_index &lt; 0 or segment_index &gt;= Count().
            </returns>
        </member>
        <member name="M:Rhino.Geometry.PolyCurve.SegmentIndex(System.Double)">
            <summary>
            Find the segment used for evaluation at polycurve_parameter.
            </summary>
            <param name="polycurveParameter">Parameter on polycurve for segment lookup.</param>
            <returns>
            Index of the segment used for evaluation at polycurve_parameter.
            If polycurve_parameter &lt; Domain.Min(), then 0 is returned.
            If polycurve_parameter &gt; Domain.Max(), then Count()-1 is returned.
            </returns>
        </member>
        <member name="M:Rhino.Geometry.PolyCurve.SegmentIndexes(Rhino.Geometry.Interval,System.Int32@,System.Int32@)">
            <summary>Find the segments that overlap the Polycurve sub domain.</summary>
            <param name="subdomain">Domain on this PolyCurve.</param>
            <param name="segmentIndex0">
            Index of first segment that overlaps the subdomain.
            </param>
            <param name="segmentIndex1">
            Index of last segment that overlaps the subdomain. Note that segmentIndex0 &lt;= i &lt; segmentIndex1.
            </param>
            <returns>Number of segments that overlap the subdomain.</returns>
        </member>
        <member name="T:Rhino.Geometry.Polyline">
            <summary>
            An ordered set of points connected by linear segments
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Polyline.#ctor">
            <summary>
            Create a new empty polyline.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Polyline.#ctor(System.Int32)">
            <summary>
            Create a new empty polyline with an initial capacity.
            </summary>
            <param name="initialCapacity">Number of vertices this polyline can contain without resizing.</param>
        </member>
        <member name="M:Rhino.Geometry.Polyline.#ctor(System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d})">
            <summary>
            Create a new polyline from a collection of points.
            </summary>
            <param name="collection">Points to copy into the local vertex array.</param>
        </member>
        <member name="P:Rhino.Geometry.Polyline.IsValid">
            <summary>
            Gets a value that indicates whether or not this polyline is valid.
            Valid polylines have at least one segment, no Invalid points and no zero length segments.
            Closed Polylines with only two segments are also not considered valid.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Polyline.SegmentCount">
            <summary>
            Gets the number of segments for this polyline.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Polyline.IsClosed">
            <summary>
            Gets whether or not this polyline is closed.
            The polyline is considered to be closed if the start-point is
            identical to the end-point.
            </summary>
            <seealso cref="M:Rhino.Geometry.Polyline.IsClosedWithinTolerance(System.Double)" />
        </member>
        <member name="P:Rhino.Geometry.Polyline.Length">
            <summary>
            Gets the total length of the polyline.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Polyline.IsClosedWithinTolerance(System.Double)">
            <summary>
            Test to see whether or not the polyline is closed to within tolerance.
            </summary>
            <param name="tolerance">If the distance between the start and end point of the polyline
            is less than tolerance, the polyline is considered to be closed.</param>
            <returns>True if the polyline is closed to within tolerance, false if not.</returns>
        </member>
        <member name="M:Rhino.Geometry.Polyline.SegmentAt(System.Int32)">
            <summary>
            Gets the line segment at the given index.
            </summary>
            <param name="index">Index of segment to retrieve.</param>
            <returns>Line segment at index or Line.Unset on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Polyline.PointAt(System.Double)">
            <summary>
            Gets the point on the polyline at the given parameter.
            The integer part of the parameter indicates the index of the segment.
            </summary>
            <param name="t">Polyline parameter.</param>
            <returns>The point on the polyline at t.</returns>
        </member>
        <member name="M:Rhino.Geometry.Polyline.TangentAt(System.Double)">
            <summary>
            Gets the unit tangent vector along the polyline at the given parameter.
            The integer part of the parameter indicates the index of the segment.
            </summary>
            <param name="t">Polyline parameter.</param>
            <returns>The tangent along the polyline at t.</returns>
        </member>
        <member name="M:Rhino.Geometry.Polyline.Trim(Rhino.Geometry.Interval)">
            <summary>
            Create a polyline out of a parameter subdomain.
            </summary>
            <param name="domain">The subdomain of the polyline.
            The integer part of the domain parameters indicate the index of the segment.</param>
            <returns>The polyline as defined by the subdomain, or null on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Polyline.ClosestPointTo(Rhino.Geometry.Point3d)">
            <summary>
            This method is Obsolete, use ClosestPoint() instead.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Polyline.ClosestPoint(Rhino.Geometry.Point3d)">
            <summary>
            Gets the point on the polyline which is closest to a test-point.
            </summary>
            <param name="testPoint">Point to approximate.</param>
            <returns>The point on the polyline closest to testPoint.</returns>
        </member>
        <member name="M:Rhino.Geometry.Polyline.ClosestParameterTo(Rhino.Geometry.Point3d)">
            <summary>
            This method is Obsolete, use ClosestParameter() instead.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Polyline.ClosestParameter(Rhino.Geometry.Point3d)">
            <summary>
            Gets the parameter along the polyline which is closest to a test-point.
            </summary>
            <param name="testPoint">Point to approximate.</param>
            <returns>The parameter along the polyline closest to testPoint.</returns>
        </member>
        <member name="M:Rhino.Geometry.Polyline.GetSegments">
            <summary>
            Get an array of line segments that make up the entire polyline.
            </summary>
            <returns>An array of line segments or null if the polyline contains fewer than 2 points.</returns>
        </member>
        <member name="M:Rhino.Geometry.Polyline.ToNurbsCurve">
            <summary>
            Create a nurbs curve representation of this polyline.
            </summary>
            <returns>A Nurbs curve shaped like this polyline or null on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Polyline.DeleteShortSegments(System.Double)">
            <summary>
            Remove all points that are closer than tolerance to the previous point.
            Start and end points are left intact.
            </summary>
            <param name="tolerance">Vertices closer together than tolerance will be removed.</param>
            <returns>Number of points (and segments) removed.</returns>
        </member>
        <member name="M:Rhino.Geometry.Polyline.CollapseShortSegments(System.Double)">
            <summary>
            Collapse all segments until none are shorter than tolerance.
            This function is significantly slower than DeleteShortSegments,
            since it recursively operates on the shortest segment.
            When a segment is collapsed the end-points are placed in the center of the segment.
            </summary>
            <param name="tolerance">Tolerance to use during collapsing.</param>
            <returns>The number of segments that were collapsed.</returns>
            <seealso cref="M:Rhino.Geometry.Polyline.DeleteShortSegments(System.Double)" />
        </member>
        <member name="M:Rhino.Geometry.Polyline.ReduceSegments(System.Double)">
            <summary>
            Create a reduction of this polyline by recursively removing the least significant segments.
            </summary>
            <param name="tolerance">Tolerance for reduction. Whenever a vertex of the polyline is more
            significant than tolerance, it will be included in the reduction.</param>
            <returns>The number of vertices that disappeared due to reduction.</returns>
        </member>
        <member name="M:Rhino.Geometry.Polyline.Smooth(System.Double)">
            <summary>
            Smooth the polyline segments by averaging adjacent vertices.
            Smoothing requires a polyline with exclusively valid vertices.
            </summary>
            <param name="amount">Amount to smooth. Zero equals no smoothing, one equals complete smoothing.</param>
            <returns>True on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Polyline.BreakAtAngles(System.Double)">
            <summary>
            Break this polyline into sections at sharp kinks.
            Closed polylines will also be broken at the first and last vertex.
            </summary>
            <param name="angle">Angle (in radians) between adjacent segments for a break to occur.</param>
            <returns>An array of polyline segments or null on error.</returns>
        </member>
        <member name="P:Rhino.Geometry.PolylineCurve.PointCount">
            <summary>
            number of points in polyline
            </summary>
        </member>
        <member name="T:Rhino.Geometry.Rectangle3d">
            <summary>
            Represents a 3d oriented rectangle.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Rectangle3d.#ctor(Rhino.Geometry.Plane,System.Double,System.Double)">
            <summary>
            Create a new rectangle from width and height.
            </summary>
            <param name="plane">Base plane for Rectangle.</param>
            <param name="width">Width (as measured along the base plane x-axis) of rectangle.</param>
            <param name="height">Height (as measured along the base plane y-axis) of rectangle.</param>
        </member>
        <member name="M:Rhino.Geometry.Rectangle3d.#ctor(Rhino.Geometry.Plane,Rhino.Geometry.Interval,Rhino.Geometry.Interval)">
            <summary>
            Create a new rectangle from dimensions.
            </summary>
            <param name="plane">Base plane for Rectangle.</param>
            <param name="width">Dimension of rectangle along the base plane x-axis.</param>
            <param name="height">Dimension of rectangle along the base plane y-axis.</param>
        </member>
        <member name="M:Rhino.Geometry.Rectangle3d.#ctor(Rhino.Geometry.Plane,Rhino.Geometry.Point3d,Rhino.Geometry.Point3d)">
            <summary>
            Create a new rectangle from a base plane and two corner points.
            </summary>
            <param name="plane">Base plane for Rectangle.</param>
            <param name="cornerA">First corner of Rectangle (will be projected onto plane).</param>
            <param name="cornerB">Second corner of Rectangle (will be projected onto plane).</param>
        </member>
        <member name="P:Rhino.Geometry.Rectangle3d.Unset">
            <summary>
            Gets a rectangle with Unset components.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Rectangle3d.IsValid">
            <summary>
            Gets a value indicating whether or not this is a valid rectangle.
            A rectangle is considered to be valid when the base plane and both dimensions are valid.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Rectangle3d.Plane">
            <summary>
            Gets or sets the base plane of the rectangle.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Rectangle3d.X">
            <summary>
            Gets or sets the dimensions of the rectangle along the base plane X-Axis (i.e. the width).
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Rectangle3d.Y">
            <summary>
            Gets or sets the dimensions of the rectangle along the base plane Y-Axis (i.e. the height).
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Rectangle3d.Width">
            <summary>
            Gets the signed width of the rectangle. If the X dimension is decreasing, the width will be negative.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Rectangle3d.Height">
            <summary>
            Gets the signed height of the rectangle. If the Y dimension is decreasing, the height will be negative.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Rectangle3d.Area">
            <summary>
            Gets the unsigned Area of the rectangle.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Rectangle3d.Circumference">
            <summary>
            Gets the circumference of the rectangle.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Rectangle3d.BoundingBox">
            <summary>
            Gets the world aligned boundingbox for this rectangle.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Rectangle3d.Center">
            <summary>
            Gets the point in the center of the rectangle.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Rectangle3d.CreateFromPolyline(System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d})">
            <summary>
            Try and create a Rectangle from a Polyline. In order for a polyline to qualify
            as a rectangle, it must have 4 or 5 corner points (i.e. it need not be closed).
            </summary>
            <param name="polyline">Polyline to parse.</param>
            <returns>A rectangle that is shaped similarly to the polyline or Rectangle3d.Unset
            if the polyline does not represent a rectangle.</returns>
        </member>
        <member name="M:Rhino.Geometry.Rectangle3d.CreateFromPolyline(System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d},System.Double@,System.Double@)">
            <summary>
            Try and create a Rectangle from a Polyline. In order for a polyline to qualify
            as a rectangle, it must have 4 or 5 corner points (i.e. it need not be closed).
            </summary>
            <param name="polyline">Polyline to parse.</param>
            <param name="deviation">On success, the deviation will contain the largest deviation between the polyline and the rectangle.</param>
            <param name="angleDeviation">On success, the angleDeviation will contain the largest deviation (in radians) between the polyline edges and the rectangle edges.</param>
            <returns>A rectangle that is shaped similarly to the polyline or Rectangle3d.Unset
            if the polyline does not represent a rectangle.</returns>
        </member>
        <member name="M:Rhino.Geometry.Rectangle3d.MakeIncreasing">
            <summary>
            Ensure the X and Y dimensions are increasing or singleton intervals.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Rectangle3d.Corner(System.Int32)">
            <summary>
            Get the corner at the given index.
            </summary>
            <param name="index">
            Index of corner, valid values are:
            <para>0 = lower left (min-x, min-y)</para><para>1 = lower right (max-x, min-y)</para><para>2 = upper right (max-x, max-y)</para><para>3 = upper left (min-x, max-y)</para></param>
            <returns>The point at the given corner index.</returns>
        </member>
        <member name="M:Rhino.Geometry.Rectangle3d.RecenterPlane(System.Int32)">
            <summary>
            Recenter the base plane on one of the corners.
            </summary>
            <param name="index">
            Index of corner, valid values are:
            <para>0 = lower left (min-x, min-y)</para><para>1 = lower right (max-x, min-y)</para><para>2 = upper right (max-x, max-y)</para><para>3 = upper left (min-x, max-y)</para></param>
        </member>
        <member name="M:Rhino.Geometry.Rectangle3d.RecenterPlane(Rhino.Geometry.Point3d)">
            <summary>
            Recenter the base plane on a new origin.
            </summary>
            <param name="origin">New origin for plane.</param>
        </member>
        <member name="M:Rhino.Geometry.Rectangle3d.PointAt(System.Double,System.Double)">
            <summary>
            Get a point in Rectangle space.
            </summary>
            <param name="x">Normalized parameter along Rectangle width.</param>
            <param name="y">Normalized parameter along Rectangle height.</param>
            <returns>The point at the given x,y parameter.</returns>
        </member>
        <member name="M:Rhino.Geometry.Rectangle3d.PointAt(System.Double)">
            <summary>
            Get a point along the rectangle boundary.
            </summary>
            <param name="t">Parameter along rectangle boundary. Valid values range from 0.0 to 4.0,
            where each integer domain represents a single boundary edge.</param>
            <returns>The point at the given boundary parameter.</returns>
        </member>
        <member name="M:Rhino.Geometry.Rectangle3d.ClosestPoint(Rhino.Geometry.Point3d)">
            <summary>
            Get the point on the rectangle that is closest to a test-point.
            </summary>
            <param name="point">Point to project.</param>
            <returns>The point on or in the rectangle closest to the test point or Point3d.Unset on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Rectangle3d.ClosestPoint(Rhino.Geometry.Point3d,System.Boolean)">
            <summary>
            Get the point on the rectangle that is closest to a test-point.
            </summary>
            <param name="point">Point to project.</param>
            <param name="includeInterior">If False, the point is projected onto the boundary edge only,
            otherwise the interior of the rectangle is also taken into consideration.</param>
            <returns>The point on the rectangle closest to the test point or Point3d.Unset on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Rectangle3d.Contains(Rhino.Geometry.Point3d)">
            <summary>
            Test a point for inclusion.
            </summary>
            <param name="pt">Point to test. The point will be projected onto the Rectangle plane before inclusion is determined.</param>
            <returns>Point Rectangle relationship.</returns>
        </member>
        <member name="M:Rhino.Geometry.Rectangle3d.Contains(System.Double,System.Double)">
            <summary>
            Test two plane parameters for inclusion.
            </summary>
            <param name="x">Parameter along base plane X direction.</param>
            <param name="y">Parameter along base plane Y direction.</param>
            <returns>Parameter Rectangle relationship.</returns>
        </member>
        <member name="M:Rhino.Geometry.Rectangle3d.Transform(Rhino.Geometry.Transform)">
            <summary>
            Transform this rectangle. Note that rectangles cannot be skewed or tapered.
            </summary>
            <param name="xform">Transformation to apply.</param>
        </member>
        <member name="M:Rhino.Geometry.Rectangle3d.ToPolyline">
            <summary>
            Create a polyline from this rectangle.
            </summary>
            <returns>A polyline with the same shape as this rectangle.</returns>
        </member>
        <member name="M:Rhino.Geometry.Rectangle3d.ToNurbsCurve">
            <summary>
            Create a nurbs curve representation of this rectangle.
            </summary>
            <returns>A nurbs curve with the same shape as this rectangle.</returns>
        </member>
        <member name="M:Rhino.Geometry.RevSurface.Create(Rhino.Geometry.Curve,Rhino.Geometry.Line)">
            <example>
                <code source="examples\vbnet\ex_addtruncatedcone.vb" lang="vbnet" />
                <code source="examples\cs\ex_addtruncatedcone.cs" lang="cs" />
                <code source="examples\py\ex_addtruncatedcone.py" lang="py" />
            </example>
        </member>
        <member name="M:Rhino.Geometry.SumSurface.Create(Rhino.Geometry.Curve,Rhino.Geometry.Curve)">
            <summary>
            Create a SumSurface by extruding a curve (CurveA) along a path (CurveB)
            </summary>
            <param name="curveA">
            </param>
            <param name="curveB">
            </param>
            <returns>SumSurface on success, null on failure</returns>
        </member>
        <member name="T:Rhino.Geometry.IsoStatus">
            <summary>
            flags for isoparametric curves
            Note: odd values are all "x" = constant and even values &gt; 0 are all "y" = constant
            </summary>
        </member>
        <member name="F:Rhino.Geometry.IsoStatus.None">
            <summary>
            curve is not an isoparameteric curve
            </summary>
        </member>
        <member name="F:Rhino.Geometry.IsoStatus.X">
            <summary>
            curve is a "x" = constant (vertical) isoparametric curve in the interior of the surface's domain
            </summary>
        </member>
        <member name="F:Rhino.Geometry.IsoStatus.Y">
            <summary>
            curve is a "y" = constant (horizontal) isoparametric curve in the interior of the surface's domain
            </summary>
        </member>
        <member name="F:Rhino.Geometry.IsoStatus.West">
            <summary>
            curve is a "x" = constant isoparametric curve along the west side of the surface's domain
            </summary>
        </member>
        <member name="F:Rhino.Geometry.IsoStatus.South">
            <summary>
            curve is a "y" = constant isoparametric curve along the south side of the surface's domain
            </summary>
        </member>
        <member name="F:Rhino.Geometry.IsoStatus.East">
            <summary>
            curve is a "x" = constant isoparametric curve along the east side of the surface's domain
            </summary>
        </member>
        <member name="F:Rhino.Geometry.IsoStatus.North">
            <summary>
            curve is a "y" = constant isoparametric curve along the north side of the surface's domain
            </summary>
        </member>
        <member name="T:Rhino.Geometry.SurfaceCurvature">
            <summary>
            Maintains all information for a Surface Curvature evaluation.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.SurfaceCurvature.UVPoint">
            <summary>
            Gets the UV location where the curvature was computed.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.SurfaceCurvature.Point">
            <summary>
            Gets the surface point at UV.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.SurfaceCurvature.Normal">
            <summary>
            Gets the surface normal at UV.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.SurfaceCurvature.Gaussian">
            <summary>
            Gets the Gaussian curvature value at UV.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.SurfaceCurvature.Mean">
            <summary>
            Gets the Mean curvature value at UV.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.SurfaceCurvature.Direction(System.Int32)">
            <summary>
            Gets the principal curvature direction vector.
            </summary>
            <param name="direction">Direction index, valid values are 0 and 1.</param>
            <returns>The specified direction vector.</returns>
        </member>
        <member name="M:Rhino.Geometry.SurfaceCurvature.Kappa(System.Int32)">
            <summary>
            Gets the Kappa curvature value.
            </summary>
            <param name="direction">Kappa index, valid values are 0 and 1.</param>
            <returns>The specified kappa value.</returns>
        </member>
        <member name="M:Rhino.Geometry.SurfaceCurvature.OsculatingCircle(System.Int32)">
            <summary>
            Compute the osculating circle along the given direction.
            </summary>
            <param name="direction">Direction index, valid values are 0 and 1.</param>
            <returns>The osculating circle in the given direction or Circle.Unset on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Surface.CreateExtrusion(Rhino.Geometry.Curve,Rhino.Geometry.Vector3d)">
            <summary>
            Create a Surface by extruding a Curve along a vector.
            </summary>
            <param name="profile">Profile curve to extrude.</param>
            <param name="direction">Direction and length of extrusion.</param>
            <returns>A Surface on success or null on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Surface.CreateExtrusionToPoint(Rhino.Geometry.Curve,Rhino.Geometry.Point3d)">
            <summary>
            Create a Surface by extruding a Curve to a point.
            </summary>
            <param name="profile">Profile curve to extrude.</param>
            <param name="apexPoint">Apex point of extrusion.</param>
            <returns>A Surface on success or null on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Surface.Domain(System.Int32)">
            <summary>
            </summary>
            <param name="direction">0 gets first parameter, 1 gets second parameter</param>
            <returns>
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Surface.SetDomain(System.Int32,Rhino.Geometry.Interval)">
            <summary>
            </summary>
            <param name="direction">
            0 sets first parameter's domain, 1 gets second parameter's domain
            </param>
            <param name="domain">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Surface.Degree(System.Int32)">
            <summary>
            returns maximum algebraic degree of any span
            ( or a good estimate if curve spans are not algebraic )
            </summary>
            <param name="direction">
            0 gets first parameter's domain, 1 gets second parameter's domain
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Surface.GetSurfaceSize(System.Double@,System.Double@)">
            <summary>
            Get an estimate of the size of the rectangle that would be created
            if the 3d surface where flattened into a rectangle.
            </summary>
            <param name="width">corresponds to the first surface parameter</param>
            <param name="height">corresponds to the second surface parameter</param>
            <returns>true if successful</returns>
            <example>
            Reparameterize a surface to minimize distortion in the map from parameter space to 3d.
            Surface surf = ...;
            double width, height;
            if ( surf.GetSurfaceSize( out width, out height ) )
            {
            surf.SetDomain( 0, new ON_Interval( 0.0, width ) );
            surf.SetDomain( 1, new ON_Interval( 0.0, height ) );
            }
            </example>
        </member>
        <member name="M:Rhino.Geometry.Surface.SpanCount(System.Int32)">
            <summary>
            get number of smooth nonempty spans in the parameter direction
            </summary>
            <param name="direction">
            0 gets first parameter's domain, 1 gets second parameter's domain
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Surface.GetSpanVector(System.Int32)">
            <summary>
            get array of span "knots"
            </summary>
            <param name="direction">
            0 gets first parameter's domain, 1 gets second parameter's domain
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Surface.Rebuild(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Rebuilds an existing surface to a given degree and point count
            </summary>
            <param name="uDegree">the output surface u degree</param>
            <param name="vDegree">the output surface u degree</param>
            <param name="uPointCount">
            The number of points in the output surface u direction. Must be bigger
            than uDegree (maximum value is 1000)
            </param>
            <param name="vPointCount">
            The number of points in the output surface v direction. Must be bigger
            than vDegree (maximum value is 1000)
            </param>
            <returns>new rebuilt surface on success. null on failure</returns>
        </member>
        <member name="M:Rhino.Geometry.Surface.Reverse(System.Int32)">
            <summary>
            Reverse parameterization Domain changes from [a,b] to [-b,-a]
            </summary>
            <param name="direction">
            0 for first parameter's domain, 1 for second parameter's domain
            </param>
            <returns>a new reversed surface on success</returns>
        </member>
        <member name="M:Rhino.Geometry.Surface.Transpose">
            <summary>
            Transpose surface parameterization (swap "s" and "t")
            </summary>
            <returns>New transposed surface on success, null on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Surface.PointAt(System.Double,System.Double)">
            <summary>
            Evaluate a point at a given parameter.
            </summary>
            <param name="u">evaluation parameters</param>
            <param name="v">evaluation parameters</param>
            <returns>Point3d.Unset on failure</returns>
        </member>
        <member name="M:Rhino.Geometry.Surface.NormalAt(System.Double,System.Double)">
            <summary>
            Simple evaluation interface - no error handling.
            </summary>
            <param name="u">
            </param>
            <param name="v">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Surface.FrameAt(System.Double,System.Double,Rhino.Geometry.Plane@)">
            <summary>
            simple evaluation interface - no error handling
            </summary>
            <param name="u">
            </param>
            <param name="v">
            </param>
            <param name="frame">
            </param>
            <returns>
            </returns>
            <example>
                <code source="examples\vbnet\ex_orientonsrf.vb" lang="vbnet" />
                <code source="examples\cs\ex_orientonsrf.cs" lang="cs" />
                <code source="examples\py\ex_orientonsrf.py" lang="py" />
            </example>
        </member>
        <member name="M:Rhino.Geometry.Surface.CurvatureAt(System.Double,System.Double)">
            <summary>
            Compute the curvature at the given UV coordinate.
            </summary>
            <param name="u">U parameter for evaluation.</param>
            <param name="v">V parameter for evaluation.</param>
            <returns>Surface Curvature data for the point at uv or null on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Surface.IsIsoparametric(Rhino.Geometry.Curve,Rhino.Geometry.Interval)">
            <summary>
            Test a 2d curve to see if it is iso parameteric in the surface's parameter space.
            </summary>
            <param name="curve">Curve to test.</param>
            <param name="curveDomain">Sub domain of the curve.</param>
            <returns>IsoStatus flag describing the iso-parametric relationship between the surface and the curve.</returns>
        </member>
        <member name="M:Rhino.Geometry.Surface.IsIsoparametric(Rhino.Geometry.Curve)">
            <summary>
            Test a 2d curve to see if it is iso parameteric in the surface's parameter space.
            </summary>
            <param name="curve">Curve to test.</param>
            <returns>IsoStatus flag describing the iso-parametric relationship between the surface and the curve.</returns>
        </member>
        <member name="M:Rhino.Geometry.Surface.IsIsoparametric(Rhino.Geometry.BoundingBox)">
            <summary>
            Test a 2d bounding box to see if it is iso-parameteric in the surface's parameter space.
            </summary>
            <param name="bbox">Bounding box to test.</param>
            <returns>IsoStatus flag describing the iso-parametric relationship between the surface and the bounding box.</returns>
        </member>
        <member name="M:Rhino.Geometry.Surface.IsClosed(System.Int32)">
            <summary>
            true if surface is closed in direction
            </summary>
            <param name="direction">0 = "s", 1 = "t"</param>
            <returns>
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Surface.IsPeriodic(System.Int32)">
            <summary>
            true if surface is periodic in direction (default is false)
            </summary>
            <param name="direction">0 = "s", 1 = "t"</param>
            <returns>
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Surface.IsSingular(System.Int32)">
            <summary>
            true if surface side is collapsed to a point
            </summary>
            <param name="side">
            side of parameter space to test
            0 = south, 1 = east, 2 = north, 3 = west
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Surface.IsAtSingularity(System.Double,System.Double,System.Boolean)">
            <summary>
            Test if a surface parameter value is at a singularity.
            </summary>
            <param name="u">Surface u parameter to test.</param>
            <param name="v">Surface v parameter to test.</param>
            <param name="exact">
            If true, test if (u,v) is exactly at a singularity.
            If false, test if close enough to cause numerical problems.
            </param>
            <returns>True if surface is singular at (s,t)</returns>
        </member>
        <member name="M:Rhino.Geometry.Surface.IsAtSeam(System.Double,System.Double)">
            <summary>
            Test if a surface parameter value is at a seam
            </summary>
            <param name="u">Surface u parameter to test.</param>
            <param name="v">Surface v parameter to test.</param>
            <returns>
            0 if not a seam,
            1 if u == Domain(0)[i] and srf(u, v) == srf(Domain(0)[1-i], v)
            2 if v == Domain(1)[i] and srf(u, v) == srf(u, Domain(1)[1-i])
            3 if 1 and 2 are true.
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Surface.IsContinuous(Rhino.Geometry.Continuity,System.Double,System.Double)">
            <summary>
            Test continuity at a surface parameter value.
            </summary>
            <param name="continuityType">
            </param>
            <param name="u">surface u parameter to test</param>
            <param name="v">surface v parameter to test</param>
            <returns>True if the surface has at least the specified continuity at the (u,v) parameter.</returns>
        </member>
        <member name="M:Rhino.Geometry.Surface.GetNextDiscontinuity(System.Int32,Rhino.Geometry.Continuity,System.Double,System.Double,System.Double@)">
            <summary>
            Search for a derivative, tangent, or curvature discontinuity.
            </summary>
            <param name="direction">
            If 0, then "u" parameter is checked. If 1, then the "v" parameter is checked.
            </param>
            <param name="continuityType">
            </param>
            <param name="t0">
            Search begins at t0. If there is a discontinuity at t0, it will be ignored.
            This makes it possible to repeatedly call GetNextDiscontinuity and step through the discontinuities.
            </param>
            <param name="t1">
            (t0 != t1) If there is a discontinuity at t1 is will be ingored unless c is a locus discontinuity
            type and t1 is at the start or end of the curve.
            </param>
            <param name="t">
            if a discontinuity is found, then t reports the parameter at the discontinuity.
            </param>
            <returns>
            Parametric continuity tests c = (C0_continuous, ..., G2_continuous):
            TRUE if a parametric discontinuity was found strictly between t0 and t1.
            Note well that all curves are parametrically continuous at the ends of their domains.
            Locus continuity tests c = (C0_locus_continuous, ...,G2_locus_continuous):
            TRUE if a locus discontinuity was found strictly between t0 and t1 or at t1 is the
            at the end of a curve. Note well that all open curves (IsClosed()=false) are locus
            discontinuous at the ends of their domains.  All closed curves (IsClosed()=true) are
            at least C0_locus_continuous at the ends of their domains.
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Surface.GetClosestPoint(Rhino.Geometry.Point3d,System.Double@,System.Double@)">
            <summary>
            This method is Obsolete, use ClosestPoint() instead.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Surface.ClosestPoint(Rhino.Geometry.Point3d,System.Double@,System.Double@)">
            <summary>
            Input the parameters of the point on the surface that is closest to testPoint
            </summary>
            <param name="testPoint">
            </param>
            <param name="u">U parameter of the surface that is closest to testPoint</param>
            <param name="v">V parameter of the surface that is closest to testPoint</param>
            <returns>True on success, false on failure.</returns>
            <example>
                <code source="examples\vbnet\ex_orientonsrf.vb" lang="vbnet" />
                <code source="examples\cs\ex_orientonsrf.cs" lang="cs" />
                <code source="examples\py\ex_orientonsrf.py" lang="py" />
            </example>
        </member>
        <member name="M:Rhino.Geometry.Surface.Trim(Rhino.Geometry.Interval,Rhino.Geometry.Interval)">
            <summary>
            Create a sub-surface that covers the specified UV trimming domain.
            </summary>
            <param name="u">Domain of surface along U direction to include in the subsurface.</param>
            <param name="v">Domain of surface along V direction to include in the subsurface.</param>
            <returns>SubSurface on success, null on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Surface.Offset(System.Double,System.Double)">
            <summary>
            Create a new surface which is offset from the current surface.
            </summary>
            <param name="distance">Distance (along surface normal) to offset.</param>
            <param name="tolerance">Offset accuracy.</param>
            <returns>The offsetted surface or null on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Surface.Evaluate(System.Double,System.Double,System.Int32,Rhino.Geometry.Point3d@,Rhino.Geometry.Vector3d[]@)">
            <summary>
            Mathematical surface evaluator.
            </summary>
            <param name="u">
            </param>
            <param name="v">
            </param>
            <param name="numberDerivatives">
            </param>
            <param name="point">
            </param>
            <param name="derivatives">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Surface.IsoCurve(System.Int32,System.Double)">
            <summary>Get isoparametric curve.</summary>
            <param name="direction">
            0 first parameter varies and second parameter is constant
            e.g., point on IsoCurve(0,c) at t is srf(t,c)
            This is a horizontal line from left to right
            1 first parameter is constant and second parameter varies
            e.g., point on IsoCurve(1,c) at t is srf(c,t
            This is a vertical line from bottom to top
            </param>
            <param name="constantParameter">
            </param>
            <returns>Isoparametric curve</returns>
            <remarks>
            In this function "direction" indicates which direction the resulting curve runs.
            0: horizontal, 1: vertical
            In the other Surface functions that take a "direction" argument,
            "direction" indicates if "constantParameter" is a "u" or "v" parameter.
            </remarks>
        </member>
        <member name="M:Rhino.Geometry.Surface.ShortPath(Rhino.Geometry.Point2d,Rhino.Geometry.Point2d,System.Double)">
            <summary>
            Create a geodesic between 2 points, used by ShortPath command in Rhino
            </summary>
            <param name="start">start point of curve in parameter space. Points must be distinct in the domain of thie surface</param>
            <param name="end">end point of curve in parameter space. Points must be distinct in the domain of thie surface</param>
            <param name="tolerance">tolerance used in fitting discrete solution</param>
            <returns>a geodesic curve on the surface on success. null on failure</returns>
        </member>
        <member name="M:Rhino.Geometry.Surface.Pushup(Rhino.Geometry.Curve,System.Double,Rhino.Geometry.Interval)">
            <summary>
            Compute a 3d curve that is the composite of a 2d curve and the surface map.
            </summary>
            <param name="curve2d">a 2d curve whose image is in the surface's domain</param>
            <param name="tolerance">
            the maximum acceptable distance from the returned 3d curve to the image of curve_2d on the surface.
            </param>
            <param name="curve2dSubdomain">
            </param>
            <returns>3d curve</returns>
        </member>
        <member name="M:Rhino.Geometry.Surface.Pushup(Rhino.Geometry.Curve,System.Double)">
            <summary>
            Compute a 3d curve that is the composite of a 2d curve and the surface map.
            </summary>
            <param name="curve2d">a 2d curve whose image is in the surface's domain</param>
            <param name="tolerance">
            the maximum acceptable distance from the returned 3d curve to the image of curve_2d on the surface.
            </param>
            <returns>3d curve</returns>
        </member>
        <member name="M:Rhino.Geometry.Surface.Pullback(Rhino.Geometry.Curve,System.Double)">
            <summary>
            Pull a 3d curve back to the surface's parameter space.
            </summary>
            <param name="curve3d">
            </param>
            <param name="tolerance">
            the maximum acceptable 3d distance between from surface(curve_2d(t))
            to the locus of points on the surface that are closest to curve_3d.
            </param>
            <returns>2d curve</returns>
        </member>
        <member name="M:Rhino.Geometry.Surface.Pullback(Rhino.Geometry.Curve,System.Double,Rhino.Geometry.Interval)">
            <summary>
            Pull a 3d curve back to the surface's parameter space.
            </summary>
            <param name="curve3d">
            </param>
            <param name="tolerance">
            the maximum acceptable 3d distance between from surface(curve_2d(t))
            to the locus of points on the surface that are closest to curve_3d.
            </param>
            <param name="curve3dSubdomain">
            </param>
            <returns>2d curve</returns>
        </member>
        <member name="M:Rhino.Geometry.Surface.ToBrep">
            <summary>
            Convert the surface into a Brep.
            </summary>
            <returns>A Brep with a similar shape like this surface or null.</returns>
        </member>
        <member name="M:Rhino.Geometry.Surface.HasNurbsForm">
            <summary>
            Is there a NURBS surface representation of this surface.
            </summary>
            <returns>
            0 unable to create NURBS representation with desired accuracy.
            1 success - NURBS parameterization matches the surface's
            2 success - NURBS point locus matches the surface's and the
            domain of the NURBS surface is correct. However, This surface's
            parameterization and the NURBS surface parameterization may not
            match.  This situation happens when getting NURBS representations
            of surfaces that have a transendental parameterization like spheres,
            cylinders, and cones.
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Surface.ToNurbsSurface">
            <summary>
            Get a NURBS surface representation of this surface. Default
            tolerance of 0.0 is used.
            </summary>
            <returns>NurbsSurface on success, null on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Surface.ToNurbsSurface(System.Double,System.Int32@)">
            <summary>
            Get a NURBS surface representation of this surface.
            </summary>
            <param name="tolerance">tolerance to use when creating NURBS representation.</param>
            <param name="accuracy">
                <para>
            0 = unable to create NURBS representation with desired accuracy.
            </para>
                <para>
            1 = success - returned NURBS parameterization matches the surface's
            to the desired accuracy
            </para>
                <para>
            2 = success - returned NURBS point locus matches the surface's to the
            desired accuracy and the domain of the NURBS surface is correct.
            However, this surface's parameterization and the NURBS surface
            parameterization may not match to the desired accuracy. This
            situation happens when getting NURBS representations of surfaces
            that have a transendental parameterization like spheres, cylinders,
            and cones.
            </para>
            </param>
            <returns>NurbsSurface on success, null on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Surface.IsPlanar">
            <summary>
            Test a surface to see if it is planar to zero tolerance
            </summary>
            <returns>
            True if the surface is planar (flat) to within RhinoMath.ZeroTolerance units (1e-12).
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Surface.IsPlanar(System.Double)">
            <summary>
            Test a surface to see if it is planar to a given tolerance.
            </summary>
            <param name="tolerance">tolerance to use when checking</param>
            <returns>
            true if there is a plane such that the maximum distance from
            the surface to the plane is &lt;= tolerance.
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Surface.TryGetPlane(Rhino.Geometry.Plane@)">
            <summary>Test a surface for planarity and return the plane.</summary>
            <param name="plane">On success, the plane parameters are filled in.</param>
            <returns>
            True if there is a plane such that the maximum distance from the surface to the plane is &lt;= RhinoMath.ZeroTolerance.
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Surface.TryGetPlane(Rhino.Geometry.Plane@,System.Double)">
            <summary>Test a surface for planarity and return the plane.</summary>
            <param name="plane">On success, the plane parameters are filled in.</param>
            <param name="tolerance">tolerance to use when checking</param>
            <returns>
            True if there is a plane such that the maximum distance from the surface to the plane is &lt;= tolerance.
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Surface.IsSphere">
            <summary>
            Determine if the surface is a portion of a sphere within RhinoMath.ZeroTolerance
            </summary>
            <returns>True if the surface is a portion of a sphere</returns>
        </member>
        <member name="M:Rhino.Geometry.Surface.IsSphere(System.Double)">
            <summary>
            Determine if the surface is a portion of a sphere within a given tolerance
            </summary>
            <param name="tolerance">tolerance to use when checking</param>
            <returns>True if the surface is a portion of a sphere</returns>
        </member>
        <member name="M:Rhino.Geometry.Surface.TryGetSphere(Rhino.Geometry.Sphere@)">
            <summary>Test a surface to see if it is a portion of a sphere and return the sphere.</summary>
            <param name="sphere">On success, the sphere parameters are filled in.</param>
            <returns>True if the surface is a portion of a sphere</returns>
        </member>
        <member name="M:Rhino.Geometry.Surface.TryGetSphere(Rhino.Geometry.Sphere@,System.Double)">
            <summary>Test a surface to see if it is a portion of a sphere and return the sphere.</summary>
            <param name="sphere">On success, the sphere parameters are filled in.</param>
            <param name="tolerance">tolerance to use when checking</param>
            <returns>True if the surface is a portion of a sphere</returns>
        </member>
        <member name="M:Rhino.Geometry.Surface.IsCylinder">
            <summary>
            Determine if the surface is a portion of a cylinder within RhinoMath.ZeroTolerance
            </summary>
            <returns>True if the surface is a portion of a cylinder.</returns>
        </member>
        <member name="M:Rhino.Geometry.Surface.IsCylinder(System.Double)">
            <summary>Determine if the surface is a portion of a cylinder within a given tolerance</summary>
            <param name="tolerance">tolerance to use when checking</param>
            <returns>True if the surface is a portion of a cylinder.</returns>
        </member>
        <member name="M:Rhino.Geometry.Surface.TryGetCylinder(Rhino.Geometry.Cylinder@)">
            <summary>Test a surface to see if it is a portion of a cylinder within RhinoMath.ZeroTolerance and return the cylinder.</summary>
            <param name="cylinder">On success, the cylinder parameters are filled in.</param>
            <returns>True if the surface is a portion of a cylinder</returns>
        </member>
        <member name="M:Rhino.Geometry.Surface.TryGetCylinder(Rhino.Geometry.Cylinder@,System.Double)">
            <summary>Test a surface to see if it is a portion of a cylinder and return the cylinder.</summary>
            <param name="cylinder">On success, the cylinder parameters are filled in.</param>
            <param name="tolerance">tolerance to use when checking</param>
            <returns>True if the surface is a portion of a cylinder</returns>
        </member>
        <member name="M:Rhino.Geometry.Surface.IsCone">
            <summary>
            Determine if the surface is a portion of a cone within RhinoMath.ZeroTolerance
            </summary>
            <returns>True if the surface is a portion of a cone.</returns>
        </member>
        <member name="M:Rhino.Geometry.Surface.IsCone(System.Double)">
            <summary>Determine if the surface is a portion of a cone within a given tolerance</summary>
            <param name="tolerance">tolerance to use when checking</param>
            <returns>True if the surface is a portion of a cone.</returns>
        </member>
        <member name="M:Rhino.Geometry.Surface.TryGetCone(Rhino.Geometry.Cone@)">
            <summary>Test a surface to see if it is a portion of a cone within RhinoMath.ZeroTolerance and return the cone.</summary>
            <param name="cone">On success, the cone parameters are filled in.</param>
            <returns>True if the surface is a portion of a cone</returns>
        </member>
        <member name="M:Rhino.Geometry.Surface.TryGetCone(Rhino.Geometry.Cone@,System.Double)">
            <summary>Test a surface to see if it is a portion of a cone and return the cone.</summary>
            <param name="cone">On success, the cone parameters are filled in.</param>
            <param name="tolerance">tolerance to use when checking</param>
            <returns>True if the surface is a portion of a cone</returns>
        </member>
        <member name="M:Rhino.Geometry.Surface.IsTorus">
            <summary>Determine if the surface is a portion of a torus within RhinoMath.ZeroTolerance</summary>
            <returns>True if the surface is a portion of a torus.</returns>
        </member>
        <member name="M:Rhino.Geometry.Surface.IsTorus(System.Double)">
            <summary>Determine if the surface is a portion of a torus within a ginev tolerance</summary>
            <param name="tolerance">tolerance to use when checking</param>
            <returns>True if the surface is a portion of a torus.</returns>
        </member>
        <member name="M:Rhino.Geometry.Surface.TryGetTorus(Rhino.Geometry.Torus@)">
            <summary>Test a surface to see if it is a portion of a torus within RhinoMath.ZeroTolerance and return the torus.</summary>
            <param name="torus">On success, the torus parameters are filled in.</param>
            <returns>True if the surface is a portion of a torus</returns>
        </member>
        <member name="M:Rhino.Geometry.Surface.TryGetTorus(Rhino.Geometry.Torus@,System.Double)">
            <summary>Test a surface to see if it is a portion of a torus and return the torus.</summary>
            <param name="torus">On success, the torus parameters are filled in.</param>
            <param name="tolerance">tolerance to use when checking</param>
            <returns>True if the surface is a portion of a torus</returns>
        </member>
        <member name="T:Rhino.Display.Color4f">
            <summary>
            Color defined by 4 floating point values
            </summary>
        </member>
        <member name="T:Rhino.Runtime.AssemblyResolver">
            <summary>
            Assembly Resolver for the Rhino App Domain.
            </summary>
        </member>
        <member name="M:Rhino.Runtime.AssemblyResolver.AddSearchFolder(System.String)">
            <summary>
            Register a custom folder with the Assembly Resolver. Folders will be
            searched recursively, so this could potentially be a very expensive operation.
            If at all possible, you should consider only registering individual files.
            </summary>
            <param name="folder">Path of folder to include during Assembly Resolver events.</param>
        </member>
        <member name="M:Rhino.Runtime.AssemblyResolver.AddSearchFile(System.String)">
            <summary>
            Register another file with the Assembly Resolver. File must be a .NET assembly,
            so it should probably be a dll, rhp or exe.
            </summary>
            <param name="file">Path of file to include during Assembly Resolver events.</param>
        </member>
        <member name="T:Rhino.Display.CustomDisplay">
            <summary>
            Provides some basic (indeed, very basic) mechanisms for drawing custom geometry in viewports.
            </summary>
        </member>
        <member name="M:Rhino.Display.CustomDisplay.#ctor(System.Boolean)">
            <summary>
            Construct a new CustomDisplay instance. You <i>must</i> place a call to
            Dispose() when you are done with this instance, otherwise
            the display methods will never be switched off.
            </summary>
            <param name="enable">If True, the display will be enabled immediately.</param>
        </member>
        <member name="P:Rhino.Display.CustomDisplay.Enabled">
            <summary>
            Gets or sets the Enabled state of this CustomDisplay instance.
            If you wish to terminate this CustomDisplay, place a call to Dispose() instead.
            </summary>
        </member>
        <member name="P:Rhino.Display.CustomDisplay.IsDisposed">
            <summary>
            Gets a value indicating whether this CustomDisplay instance has been disposed.
            Once a CustomDisplay has been disposed, you can no longer use it.
            </summary>
        </member>
        <member name="P:Rhino.Display.CustomDisplay.ClippingBox">
            <summary>
            Gets the clipping box of this CustomDisplay.
            </summary>
        </member>
        <member name="M:Rhino.Display.CustomDisplay.Clear">
            <summary>
            Clear the drawing lists.
            </summary>
        </member>
        <member name="M:Rhino.Display.CustomDisplay.AddPoint(Rhino.Geometry.Point3d)">
            <summary>
            Add a new, black point to the display list.
            </summary>
            <param name="point">Point to add.</param>
        </member>
        <member name="M:Rhino.Display.CustomDisplay.AddPoint(Rhino.Geometry.Point3d,System.Drawing.Color)">
            <summary>
            Add a new coloured point to the display list.
            </summary>
            <param name="point">Point to add.</param>
            <param name="color">Color of point.</param>
        </member>
        <member name="M:Rhino.Display.CustomDisplay.AddPoint(Rhino.Geometry.Point3d,System.Drawing.Color,Rhino.Display.PointStyle,System.Int32)">
            <summary>
            Add a new stylized point to the display list.
            </summary>
            <param name="point">Point to add.</param>
            <param name="color">Color of point.</param>
            <param name="style">Display style of point.</param>
            <param name="radius">Radius of point widget.</param>
        </member>
        <member name="M:Rhino.Display.CustomDisplay.AddPoints(System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d})">
            <summary>
            Add a collection of black points to the display list.
            </summary>
            <param name="points">Points to add.</param>
        </member>
        <member name="M:Rhino.Display.CustomDisplay.AddPoints(System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d},System.Drawing.Color)">
            <summary>
            Add a collection of coloured points to the display list.
            </summary>
            <param name="points">Points to add.</param>
            <param name="color">Color of points.</param>
        </member>
        <member name="M:Rhino.Display.CustomDisplay.AddPoints(System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d},System.Drawing.Color,Rhino.Display.PointStyle,System.Int32)">
            <summary>
            Add a collection of stylized points to the display list.
            </summary>
            <param name="points">Points to add.</param>
            <param name="color">Color of points.</param>
            <param name="style">Display style of points.</param>
            <param name="radius">Radius of point widgets.</param>
        </member>
        <member name="M:Rhino.Display.CustomDisplay.AddLine(Rhino.Geometry.Line)">
            <summary>
            Add a new, black line to the display list.
            </summary>
            <param name="line">Line to add</param>
        </member>
        <member name="M:Rhino.Display.CustomDisplay.AddLine(Rhino.Geometry.Line,System.Drawing.Color)">
            <summary>
            Add a new, colored line to the display list.
            </summary>
            <param name="line">Line to add.</param>
            <param name="color">Color of line.</param>
        </member>
        <member name="M:Rhino.Display.CustomDisplay.AddLine(Rhino.Geometry.Line,System.Drawing.Color,System.Int32)">
            <summary>
            Add a new, colored line to the display list.
            </summary>
            <param name="line">Line to add.</param>
            <param name="color">Color of line.</param>
            <param name="thickness">Thickness of line.</param>
        </member>
        <member name="M:Rhino.Display.CustomDisplay.AddVector(Rhino.Geometry.Point3d,Rhino.Geometry.Vector3d)">
            <summary>
            Add a new, black vector to the display list.
            </summary>
            <param name="anchor">Anchor point of vector.</param>
            <param name="span">Direction and magnitude of vector.</param>
        </member>
        <member name="M:Rhino.Display.CustomDisplay.AddVector(Rhino.Geometry.Point3d,Rhino.Geometry.Vector3d,System.Drawing.Color)">
            <summary>
            Add a new, colored vector to the display list.
            </summary>
            <param name="anchor">Anchor point of vector.</param>
            <param name="span">Direction and magnitude of vector.</param>
            <param name="color">Color of vector.</param>
        </member>
        <member name="M:Rhino.Display.CustomDisplay.AddVector(Rhino.Geometry.Point3d,Rhino.Geometry.Vector3d,System.Drawing.Color,System.Boolean)">
            <summary>
            Add a new, colored vector to the display list.
            </summary>
            <param name="anchor">Anchor point of vector.</param>
            <param name="span">Direction and magnitude of vector.</param>
            <param name="color">Color of vector.</param>
            <param name="drawAnchor">Include a point at the vector anchor.</param>
        </member>
        <member name="M:Rhino.Display.CustomDisplay.AddArc(Rhino.Geometry.Arc)">
            <summary>
            Add a new, black arc to the display list.
            </summary>
            <param name="arc">Arc to add</param>
        </member>
        <member name="M:Rhino.Display.CustomDisplay.AddArc(Rhino.Geometry.Arc,System.Drawing.Color)">
            <summary>
            Add a new, colored arc to the display list.
            </summary>
            <param name="arc">Arc to add.</param>
            <param name="color">Color of arc.</param>
        </member>
        <member name="M:Rhino.Display.CustomDisplay.AddArc(Rhino.Geometry.Arc,System.Drawing.Color,System.Int32)">
            <summary>
            Add a new, colored arc to the display list.
            </summary>
            <param name="arc">Arc to add.</param>
            <param name="color">Color of arc.</param>
            <param name="thickness">Thickness of arc.</param>
        </member>
        <member name="M:Rhino.Display.CustomDisplay.AddCircle(Rhino.Geometry.Circle)">
            <summary>
            Add a new, black circle to the display list.
            </summary>
            <param name="circle">Circle to add</param>
        </member>
        <member name="M:Rhino.Display.CustomDisplay.AddCircle(Rhino.Geometry.Circle,System.Drawing.Color)">
            <summary>
            Add a new, colored arc to the display list.
            </summary>
            <param name="circle">Circle to add.</param>
            <param name="color">Color of circle.</param>
        </member>
        <member name="M:Rhino.Display.CustomDisplay.AddCircle(Rhino.Geometry.Circle,System.Drawing.Color,System.Int32)">
            <summary>
            Add a new, colored circle to the display list.
            </summary>
            <param name="circle">Circle to add.</param>
            <param name="color">Color of circle.</param>
            <param name="thickness">Thickness of circle.</param>
        </member>
        <member name="M:Rhino.Display.CustomDisplay.AddCurve(Rhino.Geometry.Curve)">
            <summary>
            Add a new, black curve to the display list.
            The curve will be duplicated so changes to the
            original will not affect the display.
            </summary>
            <param name="curve">Curve to add</param>
        </member>
        <member name="M:Rhino.Display.CustomDisplay.AddCurve(Rhino.Geometry.Curve,System.Drawing.Color)">
            <summary>
            Add a new, colored curve to the display list.
            The curve will be duplicated so changes to the
            original will not affect the display.
            </summary>
            <param name="curve">Curve to add.</param>
            <param name="color">Color of curve.</param>
        </member>
        <member name="M:Rhino.Display.CustomDisplay.AddCurve(Rhino.Geometry.Curve,System.Drawing.Color,System.Int32)">
            <summary>
            Add a new, colored curve to the display list.
            The curve will be duplicated so changes to the
            original will not affect the display.
            </summary>
            <param name="curve">Curve to add.</param>
            <param name="color">Color of curve.</param>
            <param name="thickness">Thickness of curve.</param>
        </member>
        <member name="M:Rhino.Display.CustomDisplay.AddPolygon(System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d},System.Drawing.Color,System.Drawing.Color,System.Boolean,System.Boolean)">
            <summary>
            Add a polygon to the drawing list. Polygons are not like Hatches, when you supply a concave
            polygon, the shading probably won't work.
            </summary>
            <param name="polygon">Points that define the corners of the polygon.</param>
            <param name="fillColor">Fill color of polygon.</param>
            <param name="edgeColor">Edge color of polygon.</param>
            <param name="drawFill">If true, the polygon contents will be drawn.</param>
            <param name="drawEdge">If true, the polygon edge will be drawn.</param>
        </member>
        <member name="M:Rhino.Display.CustomDisplay.AddText(System.String,Rhino.Geometry.Plane,System.Double)">
            <summary>
            Add a new, black 3D text object to the display list.
            </summary>
            <param name="text">Text to add.</param>
            <param name="plane">Plane for text orientation.</param>
            <param name="size">Height (in units) of font.</param>
        </member>
        <member name="M:Rhino.Display.CustomDisplay.AddText(System.String,Rhino.Geometry.Plane,System.Double,System.Drawing.Color)">
            <summary>
            Add a new, colored 3D text object to the display list.
            </summary>
            <param name="text">Text to add.</param>
            <param name="plane">Plane for text orientation.</param>
            <param name="size">Height (in units) of font.</param>
            <param name="color">Color of text.</param>
        </member>
        <member name="M:Rhino.Display.CustomDisplay.AddText(Rhino.Display.Text3d,System.Drawing.Color)">
            <summary>
            Add a new 3D text object to the display list.
            </summary>
            <param name="text">Text object to add.</param>
            <param name="color">Color of text object.</param>
        </member>
        <member name="M:Rhino.Display.CustomDisplay.Dispose">
            <summary>
            Dispose this CustomDisplay instance. You must call this function in order to
            properly shut down the CustomDisplay.
            </summary>
        </member>
        <member name="T:Rhino.Geometry.Interpolator">
            <summary>
            Exposes a set of standard numeric interpolation algorithms.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Interpolator.#ctor">
            <summary>
            Create a new, empty Interpolator.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Interpolator.#ctor(System.Int32)">
            <summary>
            Create an empty Interpolator with a certain capacity.
            </summary>
            <param name="initialCapacity">Number of items this interpolator can store without resizing.</param>
        </member>
        <member name="M:Rhino.Geometry.Interpolator.#ctor(Rhino.Collections.RhinoList{System.Double})">
            <summary>
            Copy all the numbers from an existing RhinoList.
            </summary>
            <param name="list">List to mimic.</param>
        </member>
        <member name="M:Rhino.Geometry.Interpolator.#ctor(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Create an Interpolator from a collection of numbers.
            </summary>
            <param name="collection">Collection of numbers to duplicate.</param>
        </member>
        <member name="M:Rhino.Geometry.Interpolator.#ctor(System.Int32,System.Double)">
            <summary>
            Create a new Interpolator with a specified amount of numbers.
            </summary>
            <param name="amount">Number of values to add to this Interpolator. Must be equal to or larger than zero.</param>
            <param name="defaultValue">Number to add.</param>
        </member>
        <member name="P:Rhino.Geometry.Interpolator.Cyclical">
            <summary>
            Gets or sets a value indicating whether or not the values inside this Interpolator
            are to be treated as cyclical (i.e. circular).
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Interpolator.InterpolateNearestNeighbour(System.Double)">
            <summary>
            Sample the list of numbers with Nearest Neighbour interpolation.
            </summary>
            <param name="t">Parameter to sample at. The integer portion of the parameter
            indicates the index of the left-hand value. If this Interpolator is cyclical,
            parameters will be wrapped.</param>
            <returns>The sampled value at t.</returns>
        </member>
        <member name="M:Rhino.Geometry.Interpolator.InterpolateLinear(System.Double)">
            <summary>
            Sample the list of numbers with linear interpolation.
            </summary>
            <param name="t">Parameter to sample at. The integer portion of the parameter
            indicates the index of the left-hand value. If this Interpolator is cyclical,
            parameters will be wrapped.</param>
            <returns>The sampled value at t.</returns>
        </member>
        <member name="M:Rhino.Geometry.Interpolator.InterpolateCosine(System.Double)">
            <summary>
            Sample the list of numbers with cosine interpolation.
            </summary>
            <param name="t">Parameter to sample at. The integer portion of the parameter
            indicates the index of the left-hand value. If this Interpolator is cyclical,
            parameters will be wrapped.</param>
            <returns>The sampled value at t.</returns>
        </member>
        <member name="M:Rhino.Geometry.Interpolator.InterpolateCubic(System.Double)">
            <summary>
            Sample the list of numbers with cubic interpolation.
            </summary>
            <param name="t">Parameter to sample at. The integer portion of the parameter
            indicates the index of the left-hand value. If this Interpolator is cyclical,
            parameters will be wrapped.</param>
            <returns>The sampled value at t.</returns>
        </member>
        <member name="M:Rhino.Geometry.Interpolator.InterpolateCatmullRom(System.Double)">
            <summary>
            Sample the list of numbers with Catmull-Rom interpolation.
            </summary>
            <param name="t">Parameter to sample at. The integer portion of the parameter
            indicates the index of the left-hand value. If this Interpolator is cyclical,
            parameters will be wrapped.</param>
            <returns>The sampled value at t.</returns>
        </member>
        <member name="M:Rhino.Geometry.Interpolator.MapIndex(System.Int32)">
            <summary>
            Map a sample index onto the actual sample list.
            </summary>
            <param name="index">Index to map.</param>
            <returns>The mapped index.</returns>
        </member>
        <member name="M:Rhino.Geometry.Interpolator.SolveParameter(System.Double,System.Int32@,System.Double@)">
            <summary>
            Decompose a sampling parameter into an index and a unitized parameter.
            </summary>
            <param name="param">Parameter to decompose.</param>
            <param name="index">Integer portion of parameter.</param>
            <param name="t">Floating point portion of parameter.</param>
        </member>
        <member name="T:Rhino.Display.ColorHSL">
            <summary>
            Represents an HSL (Hue, Saturation, Luminance) color with double precision floating point channels.
            HSL colors are used primarily in Graphical User Interface environments as they provide a
            very natural approach to picking colors.
            </summary>
        </member>
        <member name="M:Rhino.Display.ColorHSL.#ctor(System.Drawing.Color)">
            <summary>
            Create a new instance of ColorHSL that is equivalent to an RGB color.
            </summary>
            <param name="rgb">RGB Color to mimic.</param>
            <remarks>Exact conversions between color spaces are often not possible.</remarks>
        </member>
        <member name="M:Rhino.Display.ColorHSL.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Create a new instance of ColorHSL with custom channel values.
            </summary>
            <param name="hue">Hue channel value. Hue channels rotate between 0.0 and 1.0</param>
            <param name="saturation">Saturation channel value. Channel will be limited to 0~1.</param>
            <param name="luminance">Luminance channel value. Channel will be limited to 0~1.</param>
        </member>
        <member name="M:Rhino.Display.ColorHSL.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Create a new instance of ColorHSL with custom channel values.
            </summary>
            <param name="alpha">Alpha channel value. Channel will be limited to 0~1.</param>
            <param name="hue">Hue channel value. Hue channels rotate between 0.0 and 1.0</param>
            <param name="saturation">Saturation channel value. Channel will be limited to 0~1.</param>
            <param name="luminance">Luminance channel value. Channel will be limited to 0~1.</param>
        </member>
        <member name="F:Rhino.Display.ColorHSL.m_a">
            <summary>
            Alpha values are inverted internally! 0 = opaque; 1 = transparent.
            </summary>
        </member>
        <member name="P:Rhino.Display.ColorHSL.H">
            <summary>
            Gets or sets the hue channel value.
            Hue channels rotate between 0.0 and 1.0
            </summary>
        </member>
        <member name="P:Rhino.Display.ColorHSL.S">
            <summary>
            Gets or sets the saturation channel value.
            Saturation channels are limited to a 0~1 range.
            </summary>
        </member>
        <member name="P:Rhino.Display.ColorHSL.L">
            <summary>
            Gets or sets the luminance channel value.
            Luminance channels are limited to a 0~1 range.
            </summary>
        </member>
        <member name="P:Rhino.Display.ColorHSL.A">
            <summary>
            Gets or sets the alpha channel value.
            Alpha channels are limited to a 0~1 range.
            </summary>
        </member>
        <member name="M:Rhino.Display.ColorHSL.CreateFromCMYK(Rhino.Display.ColorCMYK)">
            <summary>
            Create the nearest HSL equivalent of a CMYK color.
            </summary>
            <param name="cmyk">Target color in CMYK space.</param>
            <returns>The HSL equivalent of the CMYK color.</returns>
        </member>
        <member name="M:Rhino.Display.ColorHSL.CreateFromXYZ(Rhino.Display.ColorXYZ)">
            <summary>
            Create the nearest HSL equivalent of an XYZ color.
            </summary>
            <param name="xyz">Target color in XYZ space.</param>
            <returns>The HSL equivalent of the XYZ color.</returns>
        </member>
        <member name="M:Rhino.Display.ColorHSL.CreateFromLAB(Rhino.Display.ColorLAB)">
            <summary>
            Create the nearest HSL equivalent of a LAB color.
            </summary>
            <param name="lab">Target color in LAB space.</param>
            <returns>The HSL equivalent of the LAB color.</returns>
        </member>
        <member name="M:Rhino.Display.ColorHSL.CreateFromLCH(Rhino.Display.ColorLCH)">
            <summary>
            Create the nearest HSL equivalent of a LCH color.
            </summary>
            <param name="lch">Target color in LCH space.</param>
            <returns>The HSL equivalent of the LCH color.</returns>
        </member>
        <member name="M:Rhino.Display.ColorHSL.ToArgbColor">
            <summary>
            Convert HSL color to an equivalent System.Drawing.Color
            </summary>
            <returns>
            </returns>
        </member>
        <member name="T:Rhino.Display.ColorCMYK">
            <summary>
            Represents a CMYK (Cyan, Magenta, Yellow, Key) color with double precision floating point channels.
            CMYK colors are used primarily in printing environments as they provide a good simulation of physical ink.
            </summary>
        </member>
        <member name="M:Rhino.Display.ColorCMYK.#ctor(System.Drawing.Color)">
            <summary>
            Create a new instance of ColorCMYK that is equivalent to an RGB color.
            </summary>
            <param name="rgb">RGB Color to mimic.</param>
            <remarks>Exact conversions between color spaces are often not possible.</remarks>
        </member>
        <member name="M:Rhino.Display.ColorCMYK.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Create a new instance of ColorCMYK with custom channel values.
            The cyan, magenta and yellow values will be adjusted based on their
            combined darkness.
            </summary>
            <param name="cyan">Cyan channel hint.</param>
            <param name="magenta">Magenta channel hint.</param>
            <param name="yellow">Yellow channel hint.</param>
        </member>
        <member name="M:Rhino.Display.ColorCMYK.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Create a new instance of ColorCMYK with custom channel values.
            </summary>
            <param name="cyan">Cyan channel value. Cyan channels are limited to the 0.0 and 1.0 range.</param>
            <param name="magenta">Magenta channel value. Magenta channels are limited to the 0.0 and 1.0 range.</param>
            <param name="yellow">Yellow channel value. Yellow channels are limited to the 0.0 and 1.0 range.</param>
            <param name="key">Key channel value. Key channels are limited to the 0.0 and 1.0 range.</param>
        </member>
        <member name="M:Rhino.Display.ColorCMYK.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Create a new instance of ColorCMYK with custom channel values.
            </summary>
            <param name="alpha">Alpha channel value. Alpha channels are limited to the 0.0 and 1.0 range.</param>
            <param name="cyan">Cyan channel value. Cyan channels are limited to the 0.0 and 1.0 range.</param>
            <param name="magenta">Magenta channel value. Magenta channels are limited to the 0.0 and 1.0 range.</param>
            <param name="yellow">Yellow channel value. Yellow channels are limited to the 0.0 and 1.0 range.</param>
            <param name="key">Key channel value. Key channels are limited to the 0.0 and 1.0 range.</param>
        </member>
        <member name="F:Rhino.Display.ColorCMYK.m_a">
            <summary>
            Alpha values are inverted internally! 0 = opaque; 1 = transparent!
            </summary>
        </member>
        <member name="P:Rhino.Display.ColorCMYK.C">
            <summary>
            Gets or sets the Cyan channel value.
            Cyan channels are limited to the 0~1 range.
            </summary>
        </member>
        <member name="P:Rhino.Display.ColorCMYK.M">
            <summary>
            Gets or sets the Magenta channel value.
            Magenta channels are limited to the 0~1 range.
            </summary>
        </member>
        <member name="P:Rhino.Display.ColorCMYK.Y">
            <summary>
            Gets or sets the Yellow channel value.
            Yellow channels are limited to the 0~1 range.
            </summary>
        </member>
        <member name="P:Rhino.Display.ColorCMYK.A">
            <summary>
            Gets or sets the Alpha channel value.
            Alpha channels are limited to the 0~1 range.
            </summary>
        </member>
        <member name="M:Rhino.Display.ColorCMYK.CreateFromHSL(Rhino.Display.ColorHSL)">
            <summary>
            Create the nearest CMYK equivalent of an HSL color.
            </summary>
            <param name="hsl">Target color in HSL space.</param>
            <returns>The CMYK equivalent of the HSL color.</returns>
        </member>
        <member name="M:Rhino.Display.ColorCMYK.CreateFromXYZ(Rhino.Display.ColorXYZ)">
            <summary>
            Create the nearest CMYK equivalent of an XYZ color.
            </summary>
            <param name="xyz">Target color in XYZ space.</param>
            <returns>The CMYK equivalent of the XYZ color.</returns>
        </member>
        <member name="M:Rhino.Display.ColorCMYK.CreateFromLAB(Rhino.Display.ColorLAB)">
            <summary>
            Create the nearest CMYK equivalent of a LAB color.
            </summary>
            <param name="lab">Target color in LAB space.</param>
            <returns>The CMYK equivalent of the LAB color.</returns>
        </member>
        <member name="M:Rhino.Display.ColorCMYK.CreateFromLCH(Rhino.Display.ColorLCH)">
            <summary>
            Create the nearest CMYK equivalent of a LCH color.
            </summary>
            <param name="lch">Target color in LCH space.</param>
            <returns>The CMYK equivalent of the LCH color.</returns>
        </member>
        <member name="T:Rhino.Display.ColorXYZ">
            <summary>
            Represents an XYZ (Hue, Saturation, Luminance) color with double precision floating point channels.
            XYZ colors are based on the CIE 1931 XYZ color space standard and they mimic the natural
            sensitivity of cones in the human retina.
            </summary>
        </member>
        <member name="M:Rhino.Display.ColorXYZ.#ctor(System.Drawing.Color)">
            <summary>
            Create a new instance of ColorXYZ that is equivalent to an RGB color.
            </summary>
            <param name="rgb">RGB Color to mimic.</param>
            <remarks>Exact conversions between color spaces are often not possible.</remarks>
        </member>
        <member name="M:Rhino.Display.ColorXYZ.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Create a new instance of ColorXYZ with custom channel values.
            </summary>
            <param name="x">X channel value, channel will be limited to 0~1.</param>
            <param name="y">Y channel value, channel will be limited to 0~1.</param>
            <param name="z">Z channel value, channel will be limited to 0~1.</param>
        </member>
        <member name="M:Rhino.Display.ColorXYZ.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Create a new instance of ColorXYZ with custom channel values.
            </summary>
            <param name="alpha">Alpha channel value, channel will be limited to 0~1.</param>
            <param name="x">X channel value, channel will be limited to 0~1.</param>
            <param name="y">Y channel value, channel will be limited to 0~1.</param>
            <param name="z">Z channel value, channel will be limited to 0~1.</param>
        </member>
        <member name="F:Rhino.Display.ColorXYZ.m_a">
            <summary>
            Alpha values are inverted internally! 0 = opaque; 1 = transparent!
            </summary>
        </member>
        <member name="P:Rhino.Display.ColorXYZ.X">
            <summary>
            Gets or set the X channel value. Channel will be limited to 0~1.
            </summary>
        </member>
        <member name="P:Rhino.Display.ColorXYZ.Y">
            <summary>
            Gets or set the Y channel value. Channel will be limited to 0~1.
            </summary>
        </member>
        <member name="P:Rhino.Display.ColorXYZ.Z">
            <summary>
            Gets or set the Z channel value. Channel will be limited to 0~1.
            </summary>
        </member>
        <member name="P:Rhino.Display.ColorXYZ.A">
            <summary>
            Gets or set the Alpha channel value. Channel will be limited to 0~1.
            </summary>
        </member>
        <member name="M:Rhino.Display.ColorXYZ.CreateFromHSL(Rhino.Display.ColorHSL)">
            <summary>
            Create the nearest XYZ equivalent of an HSL color.
            </summary>
            <param name="hsl">Target color in HSL space.</param>
            <returns>The XYZ equivalent of the HSL color.</returns>
        </member>
        <member name="M:Rhino.Display.ColorXYZ.CreateFromCMYK(Rhino.Display.ColorCMYK)">
            <summary>
            Create the nearest XYZ equivalent of a CMYK color.
            </summary>
            <param name="cmyk">Target color in CMYK space.</param>
            <returns>The XYZ equivalent of the CMYK color.</returns>
        </member>
        <member name="M:Rhino.Display.ColorXYZ.CreateFromLAB(Rhino.Display.ColorLAB)">
            <summary>
            Create the nearest XYZ equivalent of a Lab color.
            </summary>
            <param name="lab">Target color in LAB space.</param>
            <returns>The XYZ equivalent of the LAB color.</returns>
        </member>
        <member name="M:Rhino.Display.ColorXYZ.CreateFromLCH(Rhino.Display.ColorLCH)">
            <summary>
            Create the nearest XYZ equivalent of an LCH color.
            </summary>
            <param name="lch">Target color in LCH space.</param>
            <returns>The XYZ equivalent of the LCH color.</returns>
        </member>
        <member name="T:Rhino.Display.ColorLAB">
            <summary>
            Represents a LAB (Lightness, A, B) color with double precision floating point channels.
            LAB colors are based on nonlinearly compressed CIE XYZ color space coordinates.
            The A and B parameters of a LAB color represent the opponents.
            </summary>
        </member>
        <member name="M:Rhino.Display.ColorLAB.#ctor(System.Drawing.Color)">
            <summary>
            Create a new instance of ColorLAB that is equivalent to an RGB color.
            </summary>
            <param name="rgb">RGB Color to mimic.</param>
            <remarks>Exact conversions between color spaces are often not possible.</remarks>
        </member>
        <member name="M:Rhino.Display.ColorLAB.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Create a new instance of ColorLAB with custom channel values.
            </summary>
        </member>
        <member name="M:Rhino.Display.ColorLAB.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Create a new instance of ColorLAB with custom channel values.
            </summary>
        </member>
        <member name="F:Rhino.Display.ColorLAB.m_alpha">
            <summary>
            Alpha values are inverted internally! 0 = opaque; 1 = transparent!
            </summary>
        </member>
        <member name="P:Rhino.Display.ColorLAB.L">
            <summary>
            Gets or sets the lightness channel. The channel is limited to 0~1.
            </summary>
        </member>
        <member name="P:Rhino.Display.ColorLAB.A">
            <summary>
            Gets or sets the Base channel. The channel is limited to 0~1.
            </summary>
        </member>
        <member name="P:Rhino.Display.ColorLAB.B">
            <summary>
            Gets or sets the Opponent channel. The channel is limited to 0~1.
            </summary>
        </member>
        <member name="P:Rhino.Display.ColorLAB.Alpha">
            <summary>
            Gets or sets the Alpha channel. The channel is limited to 0~1.
            </summary>
        </member>
        <member name="M:Rhino.Display.ColorLAB.CreateFromHSL(Rhino.Display.ColorHSL)">
            <summary>
            Create the nearest LAB equivalent of an HSL color.
            </summary>
            <param name="hsl">Target color in HSL space.</param>
            <returns>The LAB equivalent of the HSL color.</returns>
        </member>
        <member name="M:Rhino.Display.ColorLAB.CreateFromCMYK(Rhino.Display.ColorCMYK)">
            <summary>
            Create the nearest LAB equivalent of a CMYK color.
            </summary>
            <param name="cmyk">Target color in CMYK space.</param>
            <returns>The LAB equivalent of the CMYK color.</returns>
        </member>
        <member name="M:Rhino.Display.ColorLAB.CreateFromXYZ(Rhino.Display.ColorXYZ)">
            <summary>
            Create the nearest LAB equivalent of an XYZ color.
            </summary>
            <param name="xyz">Target color in XYZ space.</param>
            <returns>The LAB equivalent of the XYZ color.</returns>
        </member>
        <member name="M:Rhino.Display.ColorLAB.CreateFromLCH(Rhino.Display.ColorLCH)">
            <summary>
            Create the nearest LAB equivalent of an LCH color.
            </summary>
            <param name="lch">Target color in LCH space.</param>
            <returns>The LAB equivalent of the LCH color.</returns>
        </member>
        <member name="T:Rhino.Display.ColorLCH">
            <summary>
            Represents an LCH (Lightness, A, B) color with double precision floating point channels.
            LCH colors (also sometimes called CIELUV) are transformation of the 1931 CIE XYZ color space,
            in order to approach perceptual uniformity. They are primarily used in computer graphics which
            deal with colored lights.
            </summary>
        </member>
        <member name="M:Rhino.Display.ColorLCH.#ctor(System.Drawing.Color)">
            <summary>
            Create a new instance of ColorLCH that is equivalent to an RGB color.
            </summary>
            <param name="rgb">RGB Color to mimic.</param>
            <remarks>Exact conversions between color spaces are often not possible.</remarks>
        </member>
        <member name="M:Rhino.Display.ColorLCH.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Create a new instance of ColorLCH with custom channel values.
            </summary>
            <param name="lightness">Value of lightness channel. This channel is limited to 0~1.</param>
            <param name="chroma">Value of chroma channel. This channel is limited to -1~1.</param>
            <param name="hue">Value of chroma channel. This channel is limited to 0~360.</param>
        </member>
        <member name="M:Rhino.Display.ColorLCH.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Create a new instance of ColorLCH with custom channel values.
            </summary>
            <param name="alpha">Value of Alpha channel. This channel is limited to 0~1.</param>
            <param name="lightness">Value of Lightness channel. This channel is limited to 0~1.</param>
            <param name="chroma">Value of Chroma channel. This channel is limited to -1~1.</param>
            <param name="hue">Value of Hue channel. This channel is limited to 0~360.</param>
        </member>
        <member name="F:Rhino.Display.ColorLCH.m_a">
            <summary>
            Alpha values are inverted internally! 0 = opaque; 1 = transparent!
            </summary>
        </member>
        <member name="P:Rhino.Display.ColorLCH.L">
            <summary>
            Gets or sets the Lightness channel.
            </summary>
        </member>
        <member name="P:Rhino.Display.ColorLCH.C">
            <summary>
            Gets or sets the Chroma channel. Chroma is defined from -1.0 to +1.0
            </summary>
        </member>
        <member name="P:Rhino.Display.ColorLCH.H">
            <summary>
            Gets or sets the Hue channel. The hue channel is limited to the 0~360 degree range.
            </summary>
        </member>
        <member name="P:Rhino.Display.ColorLCH.A">
            <summary>
            Gets or sets the Alpha channel. The Alpha channel is limited to the 0~1 range.
            </summary>
        </member>
        <member name="M:Rhino.Display.ColorLCH.CreateFromHSL(Rhino.Display.ColorHSL)">
            <summary>
            Create the nearest LCH equivalent of an HSL color.
            </summary>
            <param name="hsl">Target color in HSL space.</param>
            <returns>The LCH equivalent of the HSL color.</returns>
        </member>
        <member name="M:Rhino.Display.ColorLCH.CreateFromCMYK(Rhino.Display.ColorCMYK)">
            <summary>
            Create the nearest LCH equivalent of a CMYK color.
            </summary>
            <param name="cmyk">Target color in CMYK space.</param>
            <returns>The LCH equivalent of the CMYK color.</returns>
        </member>
        <member name="M:Rhino.Display.ColorLCH.CreateFromXYZ(Rhino.Display.ColorXYZ)">
            <summary>
            Create the nearest LCH equivalent of an XYZ color.
            </summary>
            <param name="xyz">Target color in XYZ space.</param>
            <returns>The LCH equivalent of the XYZ color.</returns>
        </member>
        <member name="M:Rhino.Display.ColorLCH.CreateFromLAB(Rhino.Display.ColorLAB)">
            <summary>
            Create the nearest LCH equivalent of a LAB color.
            </summary>
            <param name="lab">Target color in LAB space.</param>
            <returns>The LCH equivalent of the LAB color.</returns>
        </member>
        <member name="M:Rhino.Display.ColorLCH.MakePositive">
            <summary>
            Ensure the Chromaticity of this color is positive.
            </summary>
        </member>
        <member name="T:Rhino.Display.ColorConverter">
            <summary>
            Exposes static color conversion methods.
            </summary>
        </member>
        <member name="M:Rhino.Display.ColorConverter.XYZ_To_RGB(System.Double,System.Double,System.Double,System.Byte@,System.Byte@,System.Byte@)">
            <summary>
            Convert XYZ space colors to RGB.
            </summary>
            <param name="x">X channel (0.0~1.0)</param>
            <param name="y">Y channel (0.0~1.0)</param>
            <param name="z">Z channel (0.0~1.0)</param>
            <param name="r">Red channel (0~255)</param>
            <param name="g">Green channel (0~255)</param>
            <param name="b">Blue channel (0~255)</param>
        </member>
        <member name="M:Rhino.Display.ColorConverter.RGB_To_XYZ(System.Int32,System.Int32,System.Int32,System.Double@,System.Double@,System.Double@)">
            <summary>
            Convert RGB space colors to XYZ.
            </summary>
            <param name="r">Red channel (0~255)</param>
            <param name="g">Green channel (0~255)</param>
            <param name="b">Blue channel (0~255)</param>
            <param name="x">X channel (0.0~1.0)</param>
            <param name="y">Y channel (0.0~1.0)</param>
            <param name="z">Z channel (0.0~1.0)</param>
        </member>
        <member name="M:Rhino.Display.ColorConverter.XYZ_To_CIELAB(System.Double,System.Double,System.Double,System.Double@,System.Double@,System.Double@)">
            <summary>
            Convert XYZ space colors to CIE-L*ab.
            </summary>
            <param name="x">X channel (0.0~1.0)</param>
            <param name="y">Y channel (0.0~1.0)</param>
            <param name="z">Z channel (0.0~1.0)</param>
            <param name="l">Luminance channel (0.0~1.0)</param>
            <param name="a">A channel (0.0~1.0)</param>
            <param name="b">B channel (0.0~1.0)</param>
        </member>
        <member name="M:Rhino.Display.ColorConverter.CIELAB_To_XYZ(System.Double,System.Double,System.Double,System.Double@,System.Double@,System.Double@)">
            <summary>
            Convert CIE-L*ab space colors to XYZ.
            </summary>
            <param name="l">Luminance channel (0.0~1.0)</param>
            <param name="a">A channel (0.0~1.0)</param>
            <param name="b">B channel (0.0~1.0)</param>
            <param name="x">X channel (0.0~1.0)</param>
            <param name="y">Y channel (0.0~1.0)</param>
            <param name="z">Z channel (0.0~1.0)</param>
        </member>
        <member name="M:Rhino.Display.ColorConverter.CIELAB_To_CIELCH(System.Double,System.Double,System.Double,System.Double@,System.Double@,System.Double@)">
            <summary>
            Convert CIE-L*ab space colors to CIE-L*CH.
            </summary>
            <param name="l">Luminance channel (0.0~1.0)</param>
            <param name="a">A channel (0.0~1.0)</param>
            <param name="b">B channel (0.0~1.0)</param>
            <param name="lum">Luminance channel (0.0~1.0)</param>
            <param name="c">Chroma channel (0.0~1.0)</param>
            <param name="h">Hue channel (0.0~1.0)</param>
        </member>
        <member name="M:Rhino.Display.ColorConverter.CIELCH_To_CIELAB(System.Double,System.Double,System.Double,System.Double@,System.Double@,System.Double@)">
            <summary>
            Convert CIE-L*CH space colors to CIE-L*ab.
            </summary>
            <param name="lum">Luminance channel (0.0~1.0)</param>
            <param name="c">Chroma channel (0.0~1.0)</param>
            <param name="h">Hue channel (0.0~1.0)</param>
            <param name="l">Luminance channel (0.0~1.0)</param>
            <param name="a">A channel (0.0~1.0)</param>
            <param name="b">B channel (0.0~1.0)</param>
        </member>
        <member name="M:Rhino.Display.ColorConverter.RGB_To_HSL(System.Int32,System.Int32,System.Int32,System.Double@,System.Double@,System.Double@)">
            <summary>
            Convert RGB space colors to HSL.
            </summary>
            <param name="r">Red channel (0~255)</param>
            <param name="g">Green channel (0~255)</param>
            <param name="b">Blue channel (0~255)</param>
            <param name="h">Hue channel (0.0~1.0)</param>
            <param name="s">Saturation channel (0.0~1.0)</param>
            <param name="l">Luminance channel (0.0~1.0)</param>
        </member>
        <member name="M:Rhino.Display.ColorConverter.HSL_To_RGB(System.Double,System.Double,System.Double,System.Byte@,System.Byte@,System.Byte@)">
            <summary>
            Convert HSL space colors to RGB.
            </summary>
            <param name="h">Hue channel (0.0~1.0)</param>
            <param name="s">Saturation channel (0.0~1.0)</param>
            <param name="l">Luminance channel (0.0~1.0)</param>
            <param name="r">Red channel (0~255)</param>
            <param name="g">Green channel (0~255)</param>
            <param name="b">Blue channel (0~255)</param>
        </member>
        <member name="M:Rhino.Display.ColorConverter.RGB_To_CMY(System.Int32,System.Int32,System.Int32,System.Double@,System.Double@,System.Double@)">
            <summary>
            Convert RGB space colors to CMY.
            </summary>
            <param name="r">Red channel (0~255)</param>
            <param name="g">Green channel (0~255)</param>
            <param name="b">Blue channel (0~255)</param>
            <param name="c">Cyan channel (0.0~1.0)</param>
            <param name="m">Magenta channel (0.0~1.0)</param>
            <param name="y">Yellow channel (0.0~1.0)</param>
        </member>
        <member name="M:Rhino.Display.ColorConverter.CMY_To_RGB(System.Double,System.Double,System.Double,System.Byte@,System.Byte@,System.Byte@)">
            <summary>
            Convert CMY space colors to RGB.
            </summary>
            <param name="c">Cyan channel (0.0~1.0)</param>
            <param name="y">Yellow channel (0.0~1.0)</param>
            <param name="m">Magenta channel (0.0~1.0)</param>
            <param name="r">Red channel (0~255)</param>
            <param name="g">Green channel (0~255)</param>
            <param name="b">Blue channel (0~255)</param>
        </member>
        <member name="M:Rhino.Display.ColorConverter.CMY_To_CMYK(System.Double,System.Double,System.Double,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            Convert CMY space colors to CMYK.
            </summary>
            <param name="c">Cyan channel (0.0~1.0)</param>
            <param name="y">Yellow channel (0.0~1.0)</param>
            <param name="m">Magenta channel (0.0~1.0)</param>
            <param name="cyan">Cyan channel (0.0~1.0)</param>
            <param name="magenta">Magenta channel (0.0~1.0)</param>
            <param name="yellow">Yellow channel (0.0~1.0)</param>
            <param name="k">Key channel (0.0~1.0)</param>
        </member>
        <member name="M:Rhino.Display.ColorConverter.CMYK_To_CMY(System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@,System.Double@)">
            <summary>
            Convert CMYK space colors to CMY.
            </summary>
            <param name="cyan">Cyan channel (0.0~1.0)</param>
            <param name="magenta">Magenta channel (0.0~1.0)</param>
            <param name="yellow">Yellow channel (0.0~1.0)</param>
            <param name="key">Key channel (0.0~1.0)</param>
            <param name="c">Cyan channel (0.0~1.0)</param>
            <param name="y">Yellow channel (0.0~1.0)</param>
            <param name="m">Magenta channel (0.0~1.0)</param>
        </member>
        <member name="T:Rhino.Display.Text3d">
            <summary>
            3D aligned text with font settings.
            </summary>
        </member>
        <member name="M:Rhino.Display.Text3d.#ctor(System.String)">
            <summary>
            Create a new instance of Text3d.
            </summary>
            <param name="text">Text string.</param>
        </member>
        <member name="M:Rhino.Display.Text3d.#ctor(System.String,Rhino.Geometry.Plane,System.Double)">
            <summary>
            Create a new instance of Text3d.
            </summary>
            <param name="text">Text string.</param>
            <param name="plane">3D Plane for text.</param>
            <param name="height">Height (in units) for text.</param>
        </member>
        <member name="P:Rhino.Display.Text3d.Text">
            <summary>
            Gets or sets the text string for this Text3d object.
            </summary>
        </member>
        <member name="P:Rhino.Display.Text3d.TextPlane">
            <summary>
            Gets or sets the 3D aligned plane for this Text3d object.
            </summary>
        </member>
        <member name="P:Rhino.Display.Text3d.Height">
            <summary>
            Gets or sets the height (in units) of this Text3d object.
            The height should be a positive number larger than zero.
            </summary>
        </member>
        <member name="P:Rhino.Display.Text3d.FontFace">
            <summary>
            Gets or sets the FontFace name.
            </summary>
        </member>
        <member name="P:Rhino.Display.Text3d.Bold">
            <summary>
            Gets or sets whether this Text3d object will be drawn in Bold.
            </summary>
        </member>
        <member name="P:Rhino.Display.Text3d.Italic">
            <summary>
            Gets or sets whether this Text3d object will be drawn in Italics.
            </summary>
        </member>
        <member name="P:Rhino.Display.Text3d.BoundingBox">
            <summary>
            Gets the boundingbox for this Text3d object.
            </summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.AppearanceSettings.SelectedObjectColor">
            <summary>
            The color used to draw selected objects.
            The default is yellow, but this can be customized by the user.
            </summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.AppearanceSettings.LockedObjectColor">
            <summary>color used to draw locked objects.</summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.AppearanceSettings.PageviewPaperColor">
            <summary>
            CRhinoPageView paper background. A rectangle is drawn into the background
            of page views to represent the printed area. The alpha portion of the color
            is used to draw the paper blended into the background
            </summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.AppearanceSettings.CurrentLayerBackgroundColor">
            <summary>
            color used by the layer manager dialog as the background color for the current layer.
            </summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.CommandAliasList.Count">
            <summary>Returns the number of command alias in Rhino.</summary>
        </member>
        <member name="M:Rhino.ApplicationSettings.CommandAliasList.GetNames">
            <summary>Returns a list of command alias names.</summary>
        </member>
        <member name="M:Rhino.ApplicationSettings.CommandAliasList.DestroyList">
            <summary>Remove all aliases from the list</summary>
        </member>
        <member name="M:Rhino.ApplicationSettings.CommandAliasList.GetMacro(System.String)">
            <summary>Returns the macro of a command alias.</summary>
            <param name="alias">[in] The name of the command alias.</param>
        </member>
        <member name="M:Rhino.ApplicationSettings.CommandAliasList.SetMacro(System.String,System.String)">
            <summary>Modifies the macro of a command alias.</summary>
            <param name="alias">[in] The name of the command alias.</param>
            <param name="macro">[in] The new command macro to run when the alias is executed.</param>
            <returns>true if successful</returns>
        </member>
        <member name="M:Rhino.ApplicationSettings.CommandAliasList.Add(System.String,System.String)">
            <summary>Adds a new command alias to Rhino.</summary>
            <param name="alias">[in] The name of the command alias.</param>
            <param name="macro">[in] The command macro to run when the alias is executed.</param>
            <returns>true if successful</returns>
        </member>
        <member name="M:Rhino.ApplicationSettings.CommandAliasList.Delete(System.String)">
            <summary>Deletes an existing command alias from Rhino.</summary>
            <param name="alias">[in] The name of the command alias.</param>
            <returns>true if successful</returns>
        </member>
        <member name="M:Rhino.ApplicationSettings.CommandAliasList.IsAlias(System.String)">
            <summary>Verifies that a command alias exists in Rhino.</summary>
            <param name="alias">[in] The name of the command alias.</param>
            <returns>true if the alias exists</returns>
        </member>
        <member name="P:Rhino.ApplicationSettings.NeverRepeatList.CommandNames">
            <summary>Convert m_dont_repeat_list to space delimited string</summary>
        </member>
        <member name="M:Rhino.ApplicationSettings.NeverRepeatList.UseNeverRepeatList">
            <summary>
            Only use the m_dont_repeat_list if somebody modifies it via CRhinoAppSettings::SetDontRepeatCommands()
            A return value of true means CRhinoCommand don't repeat flags will be ignored and the m_dont_repeat_list
            will be used instead.  False means the individual CRhinoCommands will determine if they are repeatable.
            </summary>
        </member>
        <member name="M:Rhino.ApplicationSettings.NeverRepeatList.SetList(System.String[])">
            <summary>put command name tokens in m_dont_repeat_list.</summary>
            <returns>Number of items added to m_dont_repeat_list.</returns>
        </member>
        <member name="P:Rhino.ApplicationSettings.EdgeAnalysisSettings.ShowEdgeColor">
            <summary>color used to enhance display edges in commands like ShowEdges and ShowNakedEdges.</summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.EdgeAnalysisSettings.ShowEdges">
            <summary>0 = all, 1 = naked, 2 = non-manifold</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ClipboardState.KeepData">
            <summary>Always keep clipboard data, regardless of size and never prompt the user</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ClipboardState.DeleteData">
            <summary>Always delete clipboard data, regardless of size and never prompt the user</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ClipboardState.PromptWhenBig">
            <summary>Prompt user when clipboard memory is large</summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.FileSettings.WorkingFolder">
            <summary>
            Returns or sets Rhino's working directory, or folder.
            The working folder is the default folder for all file operations.
            </summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.FileSettings.TemplateFolder">
            <summary>Returns or sets the location of Rhino's template files.</summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.FileSettings.TemplateFile">
            <summary>Returns or sets the location of Rhino's template file.</summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.FileSettings.AutoSaveFile">
            <summary>the file name used by Rhino's automatic file saving mechanism.</summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.FileSettings.AutoSaveInterval">
            <summary>how often the document will be saved when Rhino's automatic file saving mechanism is enabled</summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.FileSettings.AutoSaveEnabled">
            <summary>Enables or disables Rhino's automatic file saving mechanism.</summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.FileSettings.AutoSaveMeshes">
            <summary>save render and display meshes in autosave file</summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.FileSettings.SaveViewChanges">
            <summary>true for users who consider view changes a document change</summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.FileSettings.FileLockingEnabled">
            <summary>Ensure that only one person at a time can have a file open for saving</summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.FileSettings.FileLockingOpenWarning">
            <summary>Display information dialog which identifies computer file is open on</summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.FileSettings.ClipboardCopyToPreviousRhinoVersion">
            <summary>
            Copy both objects to the clipboard in both the current and previous Rhino clipboard formats.  This
            means you will double the size of what is saved in the clipboard but will be able to copy from
            the current to the previous version using the clipboard.
            </summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.FileSettings.ExecutableFolder">
            <summary>Returns directory where the main Rhino executable is located</summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.FileSettings.InstallFolder">
            <summary>Returns Rhino's installation folder</summary>
        </member>
        <member name="M:Rhino.ApplicationSettings.FileSettings.AddSearchPath(System.String,System.Int32)">
            <summary>
            Adds a new imagePath to Rhino's search imagePath list.
            See "Options Files settings" in the Rhino help file for more details.
            </summary>
            <param name="folder">[in] The valid folder, or imagePath, to add.</param>
            <param name="index">
            [in] A zero-based position index in the search imagePath list to insert the string.
            If -1, the imagePath will be appended to the end of the list.
            </param>
            <returns>
            the index where the item was inserted if success
            -1 on failure
            </returns>
        </member>
        <member name="M:Rhino.ApplicationSettings.FileSettings.DeleteSearchPath(System.String)">
            <summary>
            Removes an existing imagePath from Rhino's search imagePath list.
            See "Options Files settings" in the Rhino help file for more details.
            </summary>
            <param name="folder">[in] The valid folder, or imagePath, to remove.</param>
            <returns>true or false indicating success or failure.</returns>
        </member>
        <member name="M:Rhino.ApplicationSettings.FileSettings.FindFile(System.String)">
            <summary>
            Searches for a file using Rhino's search imagePath. Rhino will look for a file in the following locations:
            1. The current document's folder.
            2. Folder's specified in Options dialog, File tab.
            3. Rhino's System folders
            </summary>
            <param name="fileName">short file name to search for</param>
            <returns> full imagePath on success; null on error</returns>
        </member>
        <member name="M:Rhino.ApplicationSettings.FileSettings.GetSearchPaths">
            <summary>
            Returns all of the imagePath items in Rhino's search imagePath list. See "Options Files settings" in the Rhino help file for more details.
            </summary>
        </member>
        <member name="M:Rhino.ApplicationSettings.FileSettings.AutoSaveBeforeCommands">
            <summary>Input list of commands that force AutoSave prior to running</summary>
        </member>
        <member name="M:Rhino.ApplicationSettings.FileSettings.SetAutoSaveBeforeCommands(System.String[])">
            <summary>Set list of commands that force AutoSave prior to running</summary>
        </member>
        <member name="T:Rhino.ApplicationSettings.GridSettings">
            <summary>construction plane grid line properties</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.PointDisplayMode.WorldPoint">
            <summary>points are displayed in world coordinates</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.PointDisplayMode.CplanePoint">
            <summary>points are displayed in cplane coordinates</summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.ModelAidSettings.GridSnap">
            <summary>Enables or disables Rhino's grid snap modeling aid.</summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.ModelAidSettings.Ortho">
            <summary>Enables or disables Rhino's ortho modeling aid.</summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.ModelAidSettings.AltPlusArrow">
            <summary>true mean Alt+arrow is used for nudging.</summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.ModelAidSettings.Osnap">
            <summary>Enables or disables Rhino's object snap modeling aid.</summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.ModelAidSettings.NudgeKeyStep">
            <summary>Enables or disables Rhino's object snap projection.</summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.ModelAidSettings.OsnapPickboxRadius">
            <summary>Enables or disables Rhino's planar modeling aid.</summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.ModelAidSettings.NudgeMode">
            <summary>0 = world, 1 = cplane, 2 = view, 3 = uvn, -1 = not set</summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.ModelAidSettings.OsnapModes">
            <summary>
            Returns or sets Rhino's current object snap mode.
            The mode is a bitwise value based on the OsnapModes enumeration.
            </summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.ModelAidSettings.MousePickboxRadius">
            <summary>radius of mouse pick box in pixels</summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.ViewSettings.RotateToView">
            <summary>
            false means around world axes
            </summary>
        </member>
        <member name="T:Rhino.DocObjects.Tables.BitmapTable">
            <summary>
            Store the list of bitmaps in a Rhino document
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.Tables.BitmapTable.Document">
            <summary>Document that owns this bitmap table</summary>
        </member>
        <member name="P:Rhino.DocObjects.Tables.BitmapTable.Count">
            <summary>Number of bitmaps in the table</summary>
        </member>
        <member name="M:Rhino.DocObjects.Tables.BitmapTable.AddBitmap(System.String,System.Boolean)">
            <summary>Adds a new bitmap with specified name to the bitmap table</summary>
            <param name="bitmapFilename">
            If NULL or empty, then a unique name of the form "Bitmap 01" will be automatically created.
            </param>
            <param name="replaceExisting">
            If true and the there is alread a bitmap using the specified name, then that bitmap is replaced.
            If false and there is already a bitmap using the specified name, then -1 is returned.
            </param>
            <returns>
            index of new bitmap in table on success. -1 on error
            </returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.BitmapTable.DeleteBitmap(System.String)">
            <summary>deletes bitmap</summary>
            <param name="bitmapFilename">
            </param>
            <returns>
            true if successful. false if the bitmap cannot be deleted because it
            is the current bitmap or because it bitmap contains active geometry.
            </returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.BitmapTable.ExportToFiles(System.String,System.Int32)">
            <summary>Export all the bitmaps in the table to files</summary>
            <param name="directoryPath">
            full path to the directory where the bitmaps should be saved.
            If NULL, a dialog is used to interactively get the directory name.
            </param>
            <param name="overwrite">0 = no, 1 = yes, 2 = ask</param>
            <returns>Number of bitmaps written</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.BitmapTable.ExportToFile(System.Int32,System.String)">
            <summary>Write a bitmap to a file</summary>
            <param name="index">
            </param>
            <param name="path">
            full path, including file name and extension, name of the file to write
            </param>
            <returns>true if successful</returns>
        </member>
        <member name="F:Rhino.Commands.Style.Hidden">
            <summary>
            Also known as a "test" command. The command name does not auto-complete
            when typed on the command line an is therefore not discoverable. Useful
            for writing commands that users don't normally have access to.
            </summary>
        </member>
        <member name="F:Rhino.Commands.Style.ScriptRunner">
            <summary>
            For commands that want to run scripts as if they were typed at the command
            line (like RhinoScript's RunScript command)
            </summary>
        </member>
        <member name="F:Rhino.Commands.Style.Transparent">
            <summary>
            Transparent commands can be run inside of other commands.
            The command does not modify the contents of the model's geometry in any way.
            Examples of transparent commands include commands that change views and toggle
            snap states.  Any command that adds or deletes, a view cannot be transparent.
            </summary>
        </member>
        <member name="F:Rhino.Commands.Style.DoNotRepeat">
            <summary>
            The command should not be repeated by pressing "ENTER" immediately after
            the command finishes
            </summary>
        </member>
        <member name="F:Rhino.Commands.Style.NotUndoable">
            <summary>
            By default, all commands are undoable.
            </summary>
        </member>
        <member name="F:Rhino.Commands.RunMode.Interactive">
            <summary>
            Can use dialogs for input. Must use message boxes to
            report serious error conditions.
            </summary>
        </member>
        <member name="F:Rhino.Commands.RunMode.Scripted">
            <summary>
            All input must come from command line, GetPoint, GetObject,
            GetString, etc.  Must use message boxes to report serious
            error conditions.  Script mode gets used when a command is
            run with a hyphen (-) prefix.
            </summary>
        </member>
        <member name="M:Rhino.Commands.CommandStyleAttribute.#ctor(Rhino.Commands.Style)">
            <summary>
            </summary>
            <param name="styles">
            set of values combined using a bitwise OR operation to get the desired combination
            of command styles
            </param>
        </member>
        <member name="F:Rhino.Commands.Result.Success">
            <summary>command worked</summary>
        </member>
        <member name="F:Rhino.Commands.Result.Cancel">
            <summary>user canceled command</summary>
        </member>
        <member name="F:Rhino.Commands.Result.Nothing">
            <summary>command did nothing but cancel was not pressed</summary>
        </member>
        <member name="F:Rhino.Commands.Result.Failure">
            <summary>command failed (bad input, computational problem, etc.)</summary>
        </member>
        <member name="F:Rhino.Commands.Result.UnknownCommand">
            <summary>command not found (user probably had a typo in command name)</summary>
        </member>
        <member name="F:Rhino.Commands.Result.ExitRhino">
            <summary>exit RhinoCommon</summary>
        </member>
        <member name="E:Rhino.Commands.Command.BeginCommand">
            <summary>
            Called just before command.RunCommand().
            </summary>
        </member>
        <member name="E:Rhino.Commands.Command.EndCommand">
            <summary>
            Called immediately after command.RunCommand().
            </summary>
        </member>
        <member name="E:Rhino.Commands.Command.UndoRedo">
            <summary>
            Used to monitor Rhino's built in undo/redo support.
            </summary>
        </member>
        <member name="M:Rhino.Commands.Command.GetCommandStack">
            <summary>
            Determines if Rhino is currently running a command. Because Rhino allow for transparent commands
            (commands that can be run from inside of other commands), this method returns the total ids of
            active commands.
            </summary>
            <returns>
            Ids of running commands or null if no commands are currently running.
            The "active" command is at the end of this list.
            </returns>
        </member>
        <member name="M:Rhino.Commands.Command.InCommand">
            <summary>
            Determines if Rhino is currently running a command.
            </summary>
            <returns>True if a command is currently running, false if no commands are currently running.</returns>
        </member>
        <member name="M:Rhino.Commands.Command.InScriptRunnerCommand">
            <summary>
            This is a low level tool to determine if Rhino is currently running
            a script running command like "ReadCommandFile" or the RhinoScript
            plug-in's "RunScript".
            </summary>
            <returns>True if a script running command is active.</returns>
        </member>
        <member name="P:Rhino.DocObjects.DimensionStyle.LengthResolution">
            <summary>Linear display precision</summary>
        </member>
        <member name="P:Rhino.DocObjects.Tables.DimStyleTable.Document">
            <summary>Document that owns this dimstyle table</summary>
        </member>
        <member name="P:Rhino.DocObjects.Tables.DimStyleTable.Count">
            <summary>Number of dimstyles in the table</summary>
        </member>
        <member name="M:Rhino.DocObjects.Tables.DimStyleTable.Add(System.String)">
            <summary>
            Adds a new dimension style to the document. The new dimension style will be initialized
            with the current default dimension style properties.
            </summary>
            <param name="name">
            Name of the new dimension style. If null or empty, Rhino automatically generates the name
            </param>
            <returns>index of new dimension style</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.DimStyleTable.Add(System.String,System.Boolean)">
            <summary>
            Adds a new dimension style to the document. The new dimension style will be initialized
            with the current default dimension style properties.
            </summary>
            <param name="name">
            Name of the new dimension style. If null or empty, Rhino automatically generates the name
            </param>
            <param name="reference">if true the dimstyle will not be saved in files</param>
            <returns>index of new dimension style</returns>
        </member>
        <member name="T:Rhino.Display.DisplayModeDescription">
            <summary>
            Description of a how Rhino will display in a viewport. These are the modes
            that are listed under "Advanced display" in the options dialog
            </summary>
        </member>
        <member name="P:Rhino.Display.DisplayModeDescription.DisplayAttributes">
            <example>
                <code source="examples\vbnet\ex_advanceddisplay.vb" lang="vbnet" />
                <code source="examples\cs\ex_advanceddisplay.cs" lang="cs" />
                <code source="examples\py\ex_advanceddisplay.py" lang="py" />
            </example>
        </member>
        <member name="M:Rhino.Display.DisplayModeDescription.GetDisplayModes">
            <summary>
            Get all display mode descriptions that Rhino currently knows about
            </summary>
            <returns>
            Copies of all of the display mode descriptions. If you want to modify
            these descriptions, you must call UpdateDisplayMode or AddDisplayMode
            </returns>
            <example>
                <code source="examples\vbnet\ex_advanceddisplay.vb" lang="vbnet" />
                <code source="examples\cs\ex_advanceddisplay.cs" lang="cs" />
                <code source="examples\py\ex_advanceddisplay.py" lang="py" />
            </example>
        </member>
        <member name="M:Rhino.Display.DisplayModeDescription.UpdateDisplayMode(Rhino.Display.DisplayModeDescription)">
            <example>
                <code source="examples\vbnet\ex_advanceddisplay.vb" lang="vbnet" />
                <code source="examples\cs\ex_advanceddisplay.cs" lang="cs" />
                <code source="examples\py\ex_advanceddisplay.py" lang="py" />
            </example>
        </member>
        <member name="F:Rhino.Display.PointStyle.ActivePoint">
            <summary>
            Like a control point but includes vertical/horizontal crosshair lines.
            </summary>
        </member>
        <member name="T:Rhino.Display.DisplayPipeline">
            <summary>
                <para>
            The display pipeline calls events during specific phases of drawing
            During the drawing of a single frame the events are called in the following order
            </para>
            [Begin Drawing of a Frame]
            <list type="bullet"><item><description>CalculateBoundingBox</description></item><item><description>CalculateClippingPanes</description></item><item><description>SetupFrustum</description></item><item><description>SetupLighting</description></item><item><description>InitializeFrameBuffer</description></item><item><description>DrawBackground</description></item><item><description>If this is a layout and detail objects exist the channels are called in the
            same order for each detail object (drawn as a nested viewport)</description></item><item><description>PreDrawObjects</description></item><item><description>For Each Visible Non Highlighted Object</description><list type="bullet"><item><description>SetupObjectDisplayAttributes</description></item><item><description>PreDrawObject</description></item><item><description>DrawObject</description></item><item><description>PostDrawObject</description></item></list></item><item><description>PostDrawObjects - depth writing/testing on</description></item><item><description>DrawForeGround - depth writing/testing off</description></item><item><description>For Each Visible Highlighted Object</description><list type="bullet"><item><description>SetupObjectDisplayAttributes</description></item><item><description>PreDrawObject</description></item><item><description>DrawObject</description></item><item><description>PostDrawObject</description></item></list></item><item><description>PostProcessFrameBuffer (If a delegate exists that requires this)</description></item><item><description>DrawOverlay (if Rhino is in a feedback mode)</description></item></list>
            [End of Drawing of a Frame]
            <para>NOTE: There may be multiple DrawObject calls for a single object. An example of when this could
            happen would be with a shaded sphere. The shaded mesh is first drawn and these channels would
            be processed; then at a later time the isocurves for the sphere would be drawn.</para></summary>
        </member>
        <member name="E:Rhino.Display.DisplayPipeline.PostDrawObjects">
            <summary>
            Called after all non-highlighted objects have been drawn. Depth writing and testing are
            still turned on. If you want to draw without depth writing/testing, see DrawForeground
            </summary>
        </member>
        <member name="E:Rhino.Display.DisplayPipeline.DrawForeground">
            <summary>
            Called after all non-highlighted objects have been drawn and PostDrawObjects has been called.
            Depth writing and testing are turned OFF. If you want to draw with depth writing/testing,
            see PostDrawObjects
            </summary>
        </member>
        <member name="E:Rhino.Display.DisplayPipeline.DrawOverlay">
            <summary>
            If Rhino is in a feedback mode, the draw overlay call allows for temporary geometry to be drawn on top of
            everything in the scene. This is similar to the dynamic draw routine that occurs with custom get point.
            </summary>
        </member>
        <member name="P:Rhino.Display.DisplayPipeline.FrameSize">
            <summary>
            Gets the size of the framebuffer that this pipeline is drawing to.
            </summary>
        </member>
        <member name="P:Rhino.Display.DisplayPipeline.DefaultCurveThickness">
            <summary>
            Gets the curve thickness as defined by the current display mode.
            Note: this only applies to curve objects, Brep and Mesh wires may have different settings.
            </summary>
        </member>
        <member name="P:Rhino.Display.DisplayPipeline.IsOpenGL">
            <summary>
            Gets a value indicating whether or not this pipeline is drawing into an OpenGL context.
            </summary>
        </member>
        <member name="P:Rhino.Display.DisplayPipeline.IsStereoMode">
            <summary>
            Gets a value that indicates whether this pipeline is currently using an
            engine that is performing stereo style drawing. Stereo drawing is for
            providing an "enhanced 3-D" effect through stereo viewing devices.
            </summary>
        </member>
        <member name="P:Rhino.Display.DisplayPipeline.IsPrinting">
            <summary>
            Gets a value that indicates whether this pipeline
            is currently drawing for printing purposes.
            </summary>
        </member>
        <member name="P:Rhino.Display.DisplayPipeline.IsDynamicDisplay">
            <summary>
            Gets a value that indicates whether the viewport is in Dynamic Display state.
            Dynamic display is the state a viewport is in when it is rapidly redrawing because of
            an operation like panning or rotating. The pipeline will drop some level of detail
            while inside a dynamic display state to keep the frame rate as high as possible.
            </summary>
        </member>
        <member name="P:Rhino.Display.DisplayPipeline.SupportsShading">
            <summary>
            Gets whether or not this pipeline supports shaded meshes.
            </summary>
        </member>
        <member name="P:Rhino.Display.DisplayPipeline.StereoProjection">
            <summary>
            Get the current stereo projection if stereo mode is on.
            <para>0 = left</para><para>1 = right</para>
            If stereo mode is not enables, this property always returns 0.
            </summary>
        </member>
        <member name="P:Rhino.Display.DisplayPipeline.ModelTransform">
            <summary>
            Gets or sets the current model transformation that is applied to vertices when drawing.
            </summary>
        </member>
        <member name="P:Rhino.Display.DisplayPipeline.ModelTransformIsIdentity">
            <summary>
            Gets a value that indicates whether the Model Transform is an Identity transformation.
            </summary>
        </member>
        <member name="P:Rhino.Display.DisplayPipeline.RenderPass">
            <summary>
            Gets the current pass that the pipeline is in for drawing a frame.
            Typically drawing a frame requires a single pass through the DrawFrameBuffer
            function, but some special display effects can be achieved through
            drawing with multiple passes.
            </summary>
        </member>
        <member name="P:Rhino.Display.DisplayPipeline.NestLevel">
            <summary>
            Gets the current nested viewport drawing level.
            This is used to know if you are currently inside the drawing of a nested viewport (detail object in Rhino).
            <para>Nest level = 0 Drawing is occuring in a standard Rhino viewport or on the page viewport.</para><para>Nest level = 1 Drawing is occuring inside a detail view object.</para></summary>
        </member>
        <member name="P:Rhino.Display.DisplayPipeline.DrawingWires">
            <summary>
            Gets a value that indicates whether the pipeline is currently in a curve drawing operation.
            </summary>
        </member>
        <member name="P:Rhino.Display.DisplayPipeline.DrawingGrips">
            <summary>
            Gets a value that indicates whether the pipeline is currently in a grip drawing operation.
            </summary>
        </member>
        <member name="P:Rhino.Display.DisplayPipeline.DrawingSurfaces">
            <summary>
            Gets a value that indicates whether the pipeline is currently in a surface drawing operation.
            </summary>
        </member>
        <member name="P:Rhino.Display.DisplayPipeline.ShadingRequired">
            <summary>
            Gets or sets the "ShadingRequired" flag. This flag gets set inside the pipeline when a request is
            made to draw a shaded mesh but the current render engine doesn't support shaded
            mesh drawing...at this point the redraw mechanism will make sure everything will
            work the next time around.
            </summary>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.PushModelTransform(Rhino.Geometry.Transform)">
            <summary>
            Push a model transformation on the engine's model transform stack.
            </summary>
            <param name="xform">Transformation to push.</param>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.PopModelTransform">
            <summary>
            Pop a model transformation off the engine's model transform stack.
            </summary>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.EnableDepthTesting(System.Boolean)">
            <summary>
            Enable or disable the DepthTesting behaviour of the engine.
            When DepthTesting is disabled, objects in front will no
            longer occlude objects behind them.
            </summary>
            <param name="enable">True to enable DepthTesting, false to disable.</param>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.EnableDepthWriting(System.Boolean)">
            <summary>
            Enable or disable the DepthWriting behaviour of the engine.
            When DepthWriting is disabled, drawn geometry does not affect the Z-Buffer.
            </summary>
            <param name="enable">True to enable DepthWriting, false to disable.</param>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.EnableColorWriting(System.Boolean)">
            <summary>
            Enable or disable the ColorWriting behaviour of the engine.
            </summary>
            <param name="enable">True to enable ColorWriting, false to disable.</param>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.EnableLighting(System.Boolean)">
            <summary>
            Enable or disable the Lighting logic of the engine.
            </summary>
            <param name="enable">True to enable Lighting, false to disable.</param>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.EnableClippingPlanes(System.Boolean)">
            <summary>
            Enable or disable the Clipping Plane logic of the engine.
            </summary>
            <param name="enable">True to enable Clipping Planes, false to disable.</param>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.PushDepthTesting(System.Boolean)">
            <summary>
            Push a DepthTesting flag on the engine's stack.
            </summary>
            <param name="enable">DepthTesting flag.</param>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.PopDepthTesting">
            <summary>
            Pop a DepthTesting flag off the engine's stack.
            </summary>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.PushDepthWriting(System.Boolean)">
            <summary>
            Push a DepthWriting flag on the engine's stack.
            </summary>
            <param name="enable">DepthWriting flag.</param>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.PopDepthWriting">
            <summary>
            Pop a DepthWriting flag off the engine's stack.
            </summary>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.PushClipTesting(System.Boolean)">
            <summary>
            Push a ClipTesting flag on the engine's stack.
            </summary>
            <param name="enable">ClipTesting flag.</param>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.PopClipTesting">
            <summary>
            Pop a ClipTesting flag off the engine's stack.
            </summary>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.PushCullFaceMode(Rhino.Display.CullFaceMode)">
            <summary>
            Push a FaceCull flag on the engine's stack.
            </summary>
            <param name="mode">FaceCull flag.</param>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.PopCullFaceMode">
            <summary>
            Pop a FaceCull flag off the engine's stack.
            </summary>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.IsVisible(Rhino.Geometry.Point3d)">
            <summary>
            Test a given 3d world coordinate point for visibility inside the view
            frustum under the current viewport and model transformation settings.
            </summary>
            <param name="worldCoordinate">Point to test for visibility</param>
            <returns>True if the point is visible, false if it is not.</returns>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.IsVisible(Rhino.DocObjects.RhinoObject)">
            <summary>
            Test a given object for visibility inside the view frustum under the current viewport and model
            transformation settings. This function calls a virtual IsVisibleFinal function that
            subclassed pipelines can add extra tests to. In the base class, this test only tests
            visibility based on the objects world coordinates location and does not pay attention
            to the object's attributes.
            NOTE: Use CRhinoDisplayPipeline::IsVisible() to perform "visibility"
            tests based on location (is some part of the object in the view frustum).
            Use CRhinoDisplayPipeline::IsActive() to perform "visibility"
            tests based on object type.
            </summary>
            <param name="rhinoObject">Object to test.</param>
            <returns>True if the object is visible, false if not.</returns>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.IsVisible(Rhino.Geometry.BoundingBox)">
            <summary>
            Test a given box for visibility inside the view frustum under the current
            viewport and model transformation settings.
            </summary>
            <param name="bbox">Box to test for visibility</param>
            <returns>True if at least some portion of the box is visible, false if not.</returns>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.IsActive(Rhino.DocObjects.RhinoObject)">
            <summary>
            Determines if an object can be visible in this viewport based on it's object type and display attributes.
            This test does not check for visibility based on location of the object.
            NOTE: Use CRhinoDisplayPipeline::IsVisible() to perform "visibility"
            tests based on location (is some part of the object in the view frustum).
            Use CRhinoDisplayPipeline::IsActive() to perform "visibility"
            tests based on object type.
            </summary>
            <param name="rhinoObject">Object to test.</param>
            <returns>
            True if this object can be drawn in the pipeline's viewport based on it's object type and display attributes.
            </returns>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.InterruptDrawing">
            <summary>
            Tests to see if the pipeline should stop drawing more geometry and just show what it has so far.
            If a drawing operation is taking a long time, this function will return true and tell Rhino it should just
            finish up and show the frame buffer. This is used in dynamic drawing operations.
            </summary>
            <returns>
            True if the pipeline should stop attempting to draw more geometry and just show the frame buffer.
            </returns>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.DrawToBitmap(Rhino.Display.RhinoViewport,System.Int32,System.Int32)">
            <summary>
            Draw a given viewport to an off-screen bitmap.
            </summary>
            <param name="viewport">Viewport to draw.</param>
            <param name="width">Width of target image.</param>
            <param name="height">Height of target image.</param>
            <returns>A bitmap containing the given view, or null on error.</returns>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.DrawMeshWires(Rhino.Geometry.Mesh,System.Drawing.Color)">
            <summary>
            Draw all the wires in a given mesh.
            </summary>
            <param name="mesh">Mesh for wire drawing.</param>
            <param name="color">Color of mesh wires.</param>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.DrawMeshWires(Rhino.Geometry.Mesh,System.Drawing.Color,System.Int32)">
            <summary>
            Draw all the wires in a given mesh.
            </summary>
            <param name="mesh">Mesh for wire drawing.</param>
            <param name="color">Color of mesh wires.</param>
            <param name="thickness">Thickness (in pixels) of mesh wires.</param>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.DrawMeshVertices(Rhino.Geometry.Mesh,System.Drawing.Color)">
            <summary>
            Draw all the vertices in a given mesh.
            </summary>
            <param name="mesh">Mesh for vertex drawing.</param>
            <param name="color">Color of mesh vertices.</param>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.DrawMeshShaded(Rhino.Geometry.Mesh,Rhino.Display.DisplayMaterial)">
            <summary>
            Draw the shaded faces of a given mesh.
            </summary>
            <param name="mesh">Mesh to draw.</param>
            <param name="material">Material to draw faces with.</param>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.DrawMeshFalseColors(Rhino.Geometry.Mesh)">
            <summary>
            Draw the mesh faces as False Color patches.
            The mesh must have Vertex Colors defined for this to work.
            </summary>
            <param name="mesh">Mesh to draw.</param>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.DrawBrepWires(Rhino.Geometry.Brep,System.Drawing.Color)">
            <summary>
            Draw all the wireframe curves of a Brep object.
            </summary>
            <param name="brep">Brep to draw.</param>
            <param name="color">Color of Wireframe curves.</param>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.DrawBrepWires(Rhino.Geometry.Brep,System.Drawing.Color,System.Int32)">
            <summary>
            Draw all the wireframe curves of a Brep object.
            </summary>
            <param name="brep">Brep to draw.</param>
            <param name="color">Color of Wireframe curves.</param>
            <param name="wireDensity">
            "Density" of wireframe curves.
            <para>-1 = no internal wires.</para><para> 0 = default internal wires.</para><para>&gt;0 = custom high density.</para></param>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.DrawPoint(Rhino.Geometry.Point3d,System.Drawing.Color)">
            <summary>Draw a point with a given radius, style and color.</summary>
            <param name="point">Location of point in world coordinates.</param>
            <param name="color">Color of point.</param>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.DrawPoint(Rhino.Geometry.Point3d,Rhino.Display.PointStyle,System.Int32,System.Drawing.Color)">
            <summary>Draw a point with a given radius, style and color.</summary>
            <param name="point">Location of point in world coordinates.</param>
            <param name="style">Point display style.</param>
            <param name="radius">Point size in pixels.</param>
            <param name="color">
            Color of point. If style is ControlPoint, this will be the border color.
            </param>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.DrawPoints(System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d},Rhino.Display.PointStyle,System.Int32,System.Drawing.Color)">
            <summary>Draw a set of points with a given radius, style and color.</summary>
            <param name="points">Location of points in world coordinates.</param>
            <param name="style">Point display style.</param>
            <param name="radius">Point size in pixels.</param>
            <param name="color">
            Color of points. If style is ControlPoint, this will be the border color.
            </param>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.DrawArrow(Rhino.Geometry.Line,System.Drawing.Color)">
            <summary>
            Draw a single arrow object. An arrow consists of a Shaft and an Arrow head at the end of the shaft.
            </summary>
            <param name="line">Arrow shaft.</param>
            <param name="color">Color of arrow.</param>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.DrawArrows(Rhino.Geometry.Line[],System.Drawing.Color)">
            <summary>
            Draw a collection of arrow objects. An arrow consists of a Shaft and an Arrow head at the end of the shaft.
            </summary>
            <param name="lines">Arrow shafts.</param>
            <param name="color">Color of arrows.</param>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.DrawArrows(System.Collections.Generic.IEnumerable{Rhino.Geometry.Line},System.Drawing.Color)">
            <summary>
            Draw a collection of arrow objects. An arrow consists of a Shaft and an Arrow head at the end of the shaft.
            </summary>
            <param name="lines">Arrow shafts.</param>
            <param name="color">Color of arrows.</param>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.DrawLine(Rhino.Geometry.Line,System.Drawing.Color)">
            <summary>
            Draw a single line object.
            </summary>
            <param name="line">Line to draw.</param>
            <param name="color">Color to draw line in.</param>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.DrawLine(Rhino.Geometry.Line,System.Drawing.Color,System.Int32)">
            <summary>
            Draw a single line object.
            </summary>
            <param name="line">Line to draw.</param>
            <param name="color">Color to draw line in.</param>
            <param name="thickness">Thickness (in pixels) of line.</param>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.DrawLine(Rhino.Geometry.Point3d,Rhino.Geometry.Point3d,System.Drawing.Color)">
            <summary>
            Draw a single line object.
            </summary>
            <param name="from">Line from point.</param>
            <param name="to">Line to point.</param>
            <param name="color">Color to draw line in.</param>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.DrawLine(Rhino.Geometry.Point3d,Rhino.Geometry.Point3d,System.Drawing.Color,System.Int32)">
            <summary>
            Draw a single line object.
            </summary>
            <param name="from">Line from point.</param>
            <param name="to">Line to point.</param>
            <param name="color">Color to draw line in.</param>
            <param name="thickness">Thickness (in pixels) of line.</param>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.DrawDottedLine(Rhino.Geometry.Line,System.Drawing.Color)">
            <summary>
            Draw a single dotted line.
            </summary>
            <param name="line">Line to draw.</param>
            <param name="color">Color of line.</param>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.DrawDottedLine(Rhino.Geometry.Point3d,Rhino.Geometry.Point3d,System.Drawing.Color)">
            <summary>
            Draw a single dotted line.
            </summary>
            <param name="from">Line start point.</param>
            <param name="to">Line end point.</param>
            <param name="color">Color of line.</param>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.DrawDottedPolyline(System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d},System.Drawing.Color,System.Boolean)">
            <summary>
            Draw a set of connected lines (polyline) in a dotted pattern
            </summary>
            <param name="points">End points of each line segment</param>
            <param name="color">Color of polyline</param>
            <param name="close">Draw a line between the first and last points</param>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.DrawLines(System.Collections.Generic.IEnumerable{Rhino.Geometry.Line},System.Drawing.Color)">
            <summary>
            Draw a set of lines with a given color and thickness. If you want the fastest possible set of lines
            to be drawn, pass a Line[] for lines.
            </summary>
            <param name="lines">Lines to draw.</param>
            <param name="color">Color to draw with.</param>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.DrawLines(System.Collections.Generic.IEnumerable{Rhino.Geometry.Line},System.Drawing.Color,System.Int32)">
            <summary>
            Draw a set of lines with a given color and thickness. If you want the fastest possible set of lines
            to be drawn, pass a Line[] for lines.
            </summary>
            <param name="lines">Lines to draw.</param>
            <param name="color">Color to draw with.</param>
            <param name="thickness">Thickness (in pixels) of lines.</param>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.DrawPolyline(System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d},System.Drawing.Color)">
            <summary>
            Draw a single Polyline object.
            </summary>
            <param name="polyline">Polyline to draw.</param>
            <param name="color">Color to draw in.</param>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.DrawPolyline(System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d},System.Drawing.Color,System.Int32)">
            <summary>
            Draw a single Polyline object.
            </summary>
            <param name="polyline">Polyline to draw.</param>
            <param name="color">Color to draw in.</param>
            <param name="thickness">Thickness (in pixels) of the Polyline.</param>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.DrawPolygon(System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d},System.Drawing.Color,System.Boolean)">
            <summary>
            Draw a filled polygon.
            </summary>
            <param name="points">
            Collection of world coordinate points that are connected by lines to form a closed shape.
            Collection must contain at least 3 points.
            </param>
            <param name="color">Color to draw with.</param>
            <param name="filled">
            True if the closed area should be filled with color.
            False if you want to draw just the border of the closed shape.
            </param>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.DrawDot(System.Int32,System.Int32,System.String,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Draw a text dot in screen coordinates.
            </summary>
            <param name="screenX">X coordinate (in pixels) of dot center.</param>
            <param name="screenY">Y coordinate (in pixels) of dot center.</param>
            <param name="text">Text content of dot.</param>
            <param name="dotColor">Dot background color.</param>
            <param name="textColor">Dot foreground color.</param>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.DrawDot(System.Int32,System.Int32,System.String)">
            <summary>
            Draw a text dot in screen coordinates.
            </summary>
            <param name="screenX">X coordinate (in pixels) of dot center.</param>
            <param name="screenY">Y coordinate (in pixels) of dot center.</param>
            <param name="text">Text content of dot.</param>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.DrawDot(Rhino.Geometry.Point3d,System.String,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Draw a text dot in world coordinates.
            </summary>
            <param name="worldPosition">Location of dot in world coordinates.</param>
            <param name="text">Text content of dot.</param>
            <param name="dotColor">Dot background color.</param>
            <param name="textColor">Dot foreground color.</param>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.DrawDot(Rhino.Geometry.Point3d,System.String)">
            <summary>
            Draw a text dot in world coordinates.
            </summary>
            <param name="worldPosition">Location of dot in world coordinates.</param>
            <param name="text">Text content of dot.</param>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.DrawBox(Rhino.Geometry.BoundingBox,System.Drawing.Color)">
            <summary>
            Draw the edges of a BoundingBox.
            </summary>
            <param name="box">Box to draw.</param>
            <param name="color">Color to draw in.</param>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.DrawBox(Rhino.Geometry.BoundingBox,System.Drawing.Color,System.Int32)">
            <summary>
            Draw the edges of a BoundingBox.
            </summary>
            <param name="box">Box to draw.</param>
            <param name="color">Color to draw in.</param>
            <param name="thickness">Thickness (in pixels) of box edges.</param>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.DrawBox(Rhino.Geometry.Box,System.Drawing.Color)">
            <summary>
            Draw the edges of a Box object.
            </summary>
            <param name="box">Box to draw.</param>
            <param name="color">Color to draw in.</param>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.DrawBox(Rhino.Geometry.Box,System.Drawing.Color,System.Int32)">
            <summary>
            Draw the edges of a Box object.
            </summary>
            <param name="box">Box to draw.</param>
            <param name="color">Color to draw in.</param>
            <param name="thickness">Thickness (in pixels) of box edges.</param>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.DrawBoxCorners(Rhino.Geometry.BoundingBox,System.Drawing.Color)">
            <summary>
            Draw corner widgets of a world aligned boundingbox.
            Widget size will be 5% of the Box diagonal.
            </summary>
            <param name="box">Box to draw.</param>
            <param name="color">Color to draw with.</param>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.DrawBoxCorners(Rhino.Geometry.BoundingBox,System.Drawing.Color,System.Double)">
            <summary>
            Draw corner widgets of a world aligned boundingbox.
            </summary>
            <param name="box">Box to draw.</param>
            <param name="color">Color to draw with.</param>
            <param name="size">Size (in model units) of the corner widgets.</param>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.DrawBoxCorners(Rhino.Geometry.BoundingBox,System.Drawing.Color,System.Double,System.Int32)">
            <summary>
            Draw corner widgets of a world aligned boundingbox.
            </summary>
            <param name="box">Box to draw.</param>
            <param name="color">Color to draw with.</param>
            <param name="size">Size (in model units) of the corner widgets.</param>
            <param name="thickness">Thickness (in pixels) of the corner widgets.</param>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.DrawMarker(Rhino.Geometry.Point3d,Rhino.Geometry.Vector3d,System.Drawing.Color)">
            <summary>
            Draw an arrow marker as a view-aligned widget.
            </summary>
            <param name="tip">Location of arrow tip point.</param>
            <param name="direction">Direction of arrow.</param>
            <param name="color">Color of arrow widget.</param>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.DrawMarker(Rhino.Geometry.Point3d,Rhino.Geometry.Vector3d,System.Drawing.Color,System.Int32)">
            <summary>
            Draw an arrow marker as a view-aligned widget.
            </summary>
            <param name="tip">Location of arrow tip point.</param>
            <param name="direction">Direction of arrow.</param>
            <param name="color">Color of arrow widget.</param>
            <param name="thickness">Thickness of arrow widget lines.</param>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.DrawMarker(Rhino.Geometry.Point3d,Rhino.Geometry.Vector3d,System.Drawing.Color,System.Int32,System.Double)">
            <summary>
            Draw an arrow marker as a view-aligned widget.
            </summary>
            <param name="tip">Location of arrow tip point.</param>
            <param name="direction">Direction of arrow.</param>
            <param name="color">Color of arrow widget.</param>
            <param name="thickness">Thickness of arrow widget lines.</param>
            <param name="size">Size (in pixels) of the arrow shaft.</param>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.DrawMarker(Rhino.Geometry.Point3d,Rhino.Geometry.Vector3d,System.Drawing.Color,System.Int32,System.Double,System.Double)">
            <summary>
            Draw an arrow marker as a view-aligned widget.
            </summary>
            <param name="tip">Location of arrow tip point.</param>
            <param name="direction">Direction of arrow.</param>
            <param name="color">Color of arrow widget.</param>
            <param name="thickness">Thickness of arrow widget lines.</param>
            <param name="size">Size (in pixels) of the arrow shaft.</param>
            <param name="rotation">Rotational angle adjustment (in radians, counter-clockwise of direction.</param>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.Draw2dText(System.String,System.Drawing.Color,Rhino.Geometry.Point2d,System.Boolean)">
            <summary>
            Draws 2D text on the viewport
            </summary>
            <param name="text">the string to draw</param>
            <param name="color">text color</param>
            <param name="screenCoordinate">definition point in screen coordinates (0,0 is top-left corner)</param>
            <param name="middleJustified">if true text is centered around the definition point, otherwise it is lower-left justified</param>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.Draw2dText(System.String,System.Drawing.Color,Rhino.Geometry.Point2d,System.Boolean,System.Int32)">
            <summary>
            Draws 2D text on the viewport
            </summary>
            <param name="text">the string to draw</param>
            <param name="color">text color</param>
            <param name="screenCoordinate">definition point in screen coordinates (0,0 is top-left corner)</param>
            <param name="middleJustified">if true text is centered around the definition point, otherwise it is lower-left justified</param>
            <param name="height">height in pixels (good default is 12)</param>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.Draw2dText(System.String,System.Drawing.Color,Rhino.Geometry.Point2d,System.Boolean,System.Int32,System.String)">
            <summary>
            Draws 2D text on the viewport
            </summary>
            <param name="text">the string to draw</param>
            <param name="color">text color</param>
            <param name="screenCoordinate">definition point in screen coordinates (0,0 is top-left corner)</param>
            <param name="middleJustified">if true text is centered around the definition point, otherwise it is lower-left justified</param>
            <param name="height">height in pixels (good default is 12)</param>
            <param name="fontface">font name (good default is "Arial")</param>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.Draw2dText(System.String,System.Drawing.Color,Rhino.Geometry.Point3d,System.Boolean)">
            <summary>
            Draws 2D text on the viewport
            </summary>
            <param name="text">the string to draw</param>
            <param name="color">text color</param>
            <param name="worldCoordinate">definition point in world coordinates</param>
            <param name="middleJustified">if true text is centered around the definition point, otherwise it is lower-left justified</param>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.Draw2dText(System.String,System.Drawing.Color,Rhino.Geometry.Point3d,System.Boolean,System.Int32)">
            <summary>
            Draws 2D text on the viewport
            </summary>
            <param name="text">the string to draw</param>
            <param name="color">text color</param>
            <param name="worldCoordinate">definition point in world coordinates</param>
            <param name="middleJustified">if true text is centered around the definition point, otherwise it is lower-left justified</param>
            <param name="height">height in pixels (good default is 12)</param>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.Draw2dText(System.String,System.Drawing.Color,Rhino.Geometry.Point3d,System.Boolean,System.Int32,System.String)">
            <summary>
            Draws 2D text on the viewport
            </summary>
            <param name="text">the string to draw</param>
            <param name="color">text color</param>
            <param name="worldCoordinate">definition point in world coordinates</param>
            <param name="middleJustified">if true text is centered around the definition point, otherwise it is lower-left justified</param>
            <param name="height">height in pixels (good default is 12)</param>
            <param name="fontface">font name (good default is "Arial")</param>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.Draw3dText(Rhino.Display.Text3d,System.Drawing.Color,Rhino.Geometry.Plane)">
            <summary>
            Draw 3d text with a different plane than what is defined in the Text3d class
            </summary>
            <param name="text">
            </param>
            <param name="color">
            </param>
            <param name="textPlane">
            </param>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.Draw3dText(Rhino.Display.Text3d,System.Drawing.Color,Rhino.Geometry.Point3d)">
            <summary>
            Draw 3d text using the Text3d plane with an adjusted origin
            </summary>
            <param name="text">
            </param>
            <param name="color">
            </param>
            <param name="textPlaneOrigin">
            </param>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.DrawArc(Rhino.Geometry.Arc,System.Drawing.Color)">
            <summary>
            Draw a single arc object.
            </summary>
            <param name="arc">Arc to draw.</param>
            <param name="color">Color to draw with.</param>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.DrawArc(Rhino.Geometry.Arc,System.Drawing.Color,System.Int32)">
            <summary>
            Draw a single arc object.
            </summary>
            <param name="arc">Arc to draw.</param>
            <param name="color">Color to draw with.</param>
            <param name="thickness">Thickness (in pixels) of arc.</param>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.DrawCircle(Rhino.Geometry.Circle,System.Drawing.Color)">
            <summary>
            Draw a single circle object.
            </summary>
            <param name="circle">Circle to draw.</param>
            <param name="color">Color to draw with.</param>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.DrawCircle(Rhino.Geometry.Circle,System.Drawing.Color,System.Int32)">
            <summary>
            Draw a single circle object.
            </summary>
            <param name="circle">Circle to draw.</param>
            <param name="color">Color to draw with.</param>
            <param name="thickness">Thickness (in pixels) of circle.</param>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.DrawSphere(Rhino.Geometry.Sphere,System.Drawing.Color)">
            <summary>
            Draw a wireframe sphere.
            </summary>
            <param name="sphere">Sphere to draw.</param>
            <param name="color">Color to draw with.</param>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.DrawSphere(Rhino.Geometry.Sphere,System.Drawing.Color,System.Int32)">
            <summary>
            Draw a wireframe sphere.
            </summary>
            <param name="sphere">Sphere to draw.</param>
            <param name="color">Color to draw with.</param>
            <param name="thickness">Thickness (in pixels) of Sphere wires.</param>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.DrawTorus(Rhino.Geometry.Torus,System.Drawing.Color)">
            <summary>
            Draw a wireframe torus.
            </summary>
            <param name="torus">Torus to draw.</param>
            <param name="color">Color to draw with.</param>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.DrawTorus(Rhino.Geometry.Torus,System.Drawing.Color,System.Int32)">
            <summary>
            Draw a wireframe torus.
            </summary>
            <param name="torus">Torus to draw.</param>
            <param name="color">Color to draw with.</param>
            <param name="thickness">Thickness (in pixels) of torus wires.</param>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.DrawCylinder(Rhino.Geometry.Cylinder,System.Drawing.Color)">
            <summary>
            Draw a wireframe cylinder.
            </summary>
            <param name="cylinder">Cylinder to draw.</param>
            <param name="color">Color to draw with.</param>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.DrawCylinder(Rhino.Geometry.Cylinder,System.Drawing.Color,System.Int32)">
            <summary>
            Draw a wireframe cylinder.
            </summary>
            <param name="cylinder">Cylinder to draw.</param>
            <param name="color">Color to draw with.</param>
            <param name="thickness">Thickness (in pixels) of cylinder wires.</param>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.DrawCone(Rhino.Geometry.Cone,System.Drawing.Color)">
            <summary>
            Draw a wireframe cone.
            </summary>
            <param name="cone">Cone to draw.</param>
            <param name="color">Color to draw with.</param>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.DrawCone(Rhino.Geometry.Cone,System.Drawing.Color,System.Int32)">
            <summary>
            Draw a wireframe cone.
            </summary>
            <param name="cone">Cone to draw.</param>
            <param name="color">Color to draw with.</param>
            <param name="thickness">Thickness (in pixels) of Cone wires.</param>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.DrawCurve(Rhino.Geometry.Curve,System.Drawing.Color)">
            <summary>
            Draw a single Curve object.
            </summary>
            <param name="curve">Curve to draw.</param>
            <param name="color">Color to draw with.</param>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.DrawCurve(Rhino.Geometry.Curve,System.Drawing.Color,System.Int32)">
            <summary>
            Draw a single Curve object.
            </summary>
            <param name="curve">Curve to draw.</param>
            <param name="color">Color to draw with.</param>
            <param name="thickness">Thickness (in pixels) of curve.</param>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.DrawCurvatureGraph(Rhino.Geometry.Curve,System.Drawing.Color)">
            <summary>
            Draw a typical Rhino Curvature Graph.
            </summary>
            <param name="curve">Base curve for curvature graph.</param>
            <param name="color">Color of curvature graph.</param>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.DrawCurvatureGraph(Rhino.Geometry.Curve,System.Drawing.Color,System.Int32)">
            <summary>
            Draw a typical Rhino Curvature Graph.
            </summary>
            <param name="curve">Base curve for curvature graph.</param>
            <param name="color">Color of curvature graph.</param>
            <param name="hairScale">100 = true length, &gt; 100 magnified, &lt; 100 shortened.</param>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.DrawCurvatureGraph(Rhino.Geometry.Curve,System.Drawing.Color,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draw a typical Rhino Curvature Graph.
            </summary>
            <param name="curve">Base curve for curvature graph.</param>
            <param name="color">Color of curvature graph.</param>
            <param name="hairScale">100 = true length, &gt; 100 magnified, &lt; 100 shortened.</param>
            <param name="hairDensity">&gt;= 0 larger numbers = more hairs (good default is 1).</param>
            <param name="sampleDensity">Between 1 and 10. Higher numbers draw smoother outer curves. (good default is 2).</param>
        </member>
        <member name="M:Rhino.Display.CalculateBoundingBoxEventArgs.IncludeBoundingBox(Rhino.Geometry.BoundingBox)">
            <summary>
            Unions a bounding box with the current display bounding box in order to ensure
            dynamic objects in "box" are drawn
            </summary>
            <param name="box">
            </param>
        </member>
        <member name="P:Rhino.Display.DisplayPipelineAttributes.MeshDisplayAttributes.AllMeshWiresColor">
            <summary>
            Color.Empty means that we are NOT using a single color for all mesh wires
            </summary>
        </member>
        <member name="M:Rhino.Display.DisplayMaterial.#ctor">
            <summary>
            Create a default material.
            </summary>
        </member>
        <member name="M:Rhino.Display.DisplayMaterial.#ctor(Rhino.Display.DisplayMaterial)">
            <summary>
            Duplicate another material.
            </summary>
        </member>
        <member name="M:Rhino.Display.DisplayMaterial.#ctor(System.Drawing.Color)">
            <summary>
            Create a default material with a specific diffuse color.
            </summary>
            <param name="diffuse">Diffuse color of material. The alpha component of the Diffuse color is ignored.</param>
        </member>
        <member name="M:Rhino.Display.DisplayMaterial.#ctor(System.Drawing.Color,System.Double)">
            <summary>
            Create a default material with a specific diffuse color and transparency.
            </summary>
            <param name="diffuse">Diffuse color of material. The alpha component of the Diffuse color is ignored.</param>
            <param name="transparency">Transparency factor (0.0 = opaque, 1.0 = transparent)</param>
        </member>
        <member name="M:Rhino.Display.DisplayMaterial.#ctor(System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Double,System.Double)">
            <summary>
            Create a material with custom properties.
            </summary>
            <param name="diffuse">Diffuse color of material. The alpha component of the Diffuse color is ignored.</param>
            <param name="specular">Specular color of material. The alpha component of the Specular color is ignored.</param>
            <param name="ambient">Ambient color of material. The alpha component of the Ambient color is ignored.</param>
            <param name="emission">Emission color of material. The alpha component of the Emission color is ignored.</param>
            <param name="shine">Shine (highlight size) of material.</param>
            <param name="transparency">Transparency of material (0.0 = opaque, 1.0 = transparent)</param>
        </member>
        <member name="P:Rhino.Display.DisplayMaterial.Diffuse">
            <summary>
            Gets or sets the Diffuse color of the Material.
            The alpha component of the color will be ignored.
            </summary>
        </member>
        <member name="P:Rhino.Display.DisplayMaterial.Specular">
            <summary>
            Gets or sets the Specular color of the Material.
            The alpha component of the color will be ignored.
            </summary>
        </member>
        <member name="P:Rhino.Display.DisplayMaterial.Ambient">
            <summary>
            Gets or sets the Ambient color of the Material.
            The alpha component of the color will be ignored.
            </summary>
        </member>
        <member name="P:Rhino.Display.DisplayMaterial.Emission">
            <summary>
            Gets or sets the Emissive color of the Material.
            The alpha component of the color will be ignored.
            </summary>
        </member>
        <member name="P:Rhino.Display.DisplayMaterial.Shine">
            <summary>
            Gets or sets the shine factor of the material {0.0 to 1.0}
            </summary>
        </member>
        <member name="P:Rhino.Display.DisplayMaterial.Transparency">
            <summary>
            Gets or sets the transparency of the material {0.0 = opaque to 1.0 = transparent}
            </summary>
        </member>
        <member name="T:Rhino.RhinoDoc">
            <summary>
            Represents an active model
            </summary>
        </member>
        <member name="E:Rhino.RhinoDoc.AddRhinoObject">
            <summary>Called if a new object is added to the document</summary>
        </member>
        <member name="E:Rhino.RhinoDoc.DeleteRhinoObject">
            <summary>
            Called if an object is deleted. At some later point the object can be un-deleted.
            </summary>
        </member>
        <member name="E:Rhino.RhinoDoc.ReplaceRhinoObject">
            <summary>
            Called if an object is about to be replaced.
            If either RhinoDoc::UndoActive() or RhinoDoc::RedoActive() is true,
            then immediatedly after ReplaceObject is called there will be a call
            to DeleteObject and then a call to AddObject.
            If both RhinoDoc::UndoActive() and RhinoDoc::RedoActive() are false,
            then immediatedly after ReplaceObject is called there will be a call
            to DeleteObject and then a call to UndeleteObject.
            </summary>
        </member>
        <member name="E:Rhino.RhinoDoc.UndeleteRhinoObject">
            <summary>Called if an object is un-deleted</summary>
        </member>
        <member name="E:Rhino.RhinoDoc.PurgeRhinoObject">
            <summary>
            Called if an object is begin purged from a document. The object will cease to exist forever
            </summary>
        </member>
        <member name="P:Rhino.RhinoDoc.Name">
            <summary>Returns the name of the currently loaded RhinoCommon document (3DM file).</summary>
        </member>
        <member name="P:Rhino.RhinoDoc.Path">
            <summary>Returns the path of the currently loaded RhinoCommon document (3DM file).</summary>
        </member>
        <member name="P:Rhino.RhinoDoc.Notes">
            <summary>Returns or sets the document's notes</summary>
        </member>
        <member name="P:Rhino.RhinoDoc.ModelAbsoluteTolerance">
            <summary>Model space absolute tolerance.</summary>
        </member>
        <member name="P:Rhino.RhinoDoc.ModelAngleToleranceRadians">
            <summary>Model space angle tolerance.</summary>
        </member>
        <member name="P:Rhino.RhinoDoc.ModelAngleToleranceDegrees">
            <summary>Model space angle tolerance.</summary>
        </member>
        <member name="P:Rhino.RhinoDoc.ModelRelativeTolerance">
            <summary>Model space relative tolerance.</summary>
        </member>
        <member name="P:Rhino.RhinoDoc.PageAbsoluteTolerance">
            <summary>Page space absolute tolerance.</summary>
        </member>
        <member name="P:Rhino.RhinoDoc.PageAngleToleranceRadians">
            <summary>Page space angle tolerance.</summary>
        </member>
        <member name="P:Rhino.RhinoDoc.PageAngleToleranceDegrees">
            <summary>Page space angle tolerance.</summary>
        </member>
        <member name="P:Rhino.RhinoDoc.PageRelativeTolerance">
            <summary>Page space relative tolerance.</summary>
        </member>
        <member name="P:Rhino.RhinoDoc.Modified">
            <summary>Returns or sets the document's modified flag.</summary>
        </member>
        <member name="P:Rhino.RhinoDoc.IsReadOnly">
            <summary>
            Current read-only mode for this document.
            True if the document is can be viewed but NOT saved.
            False if document can be viewed and saved
            </summary>
        </member>
        <member name="P:Rhino.RhinoDoc.IsLocked">
            <summary>
            Check to see if the file associated with this document is locked.  If it is
            locked then this is the only document that will be able to write the file.  Other
            instances of Rhino will fail to write this document.
            </summary>
        </member>
        <member name="P:Rhino.RhinoDoc.Bitmaps">
            <summary>
            bitmaps used in textures, backgrounds, wallpapers, ...
            </summary>
        </member>
        <member name="P:Rhino.RhinoDoc.Materials">
            <summary>Materials in the document</summary>
        </member>
        <member name="P:Rhino.RhinoDoc.Linetypes">
            <summary>
            Linetypes in the document
            </summary>
        </member>
        <member name="P:Rhino.RhinoDoc.Layers">
            <summary>
            Layers in the document
            </summary>
        </member>
        <member name="P:Rhino.RhinoDoc.Groups">
            <example>
                <code source="examples\vbnet\ex_addobjectstogroup.vb" lang="vbnet" />
                <code source="examples\cs\ex_addobjectstogroup.cs" lang="cs" />
                <code source="examples\py\ex_addobjectstogroup.py" lang="py" />
            </example>
        </member>
        <member name="P:Rhino.RhinoDoc.NamedViews">
            <example>
                <code source="examples\vbnet\ex_addnamedview.vb" lang="vbnet" />
                <code source="examples\cs\ex_addnamedview.cs" lang="cs" />
                <code source="examples\py\ex_addnamedview.py" lang="py" />
            </example>
        </member>
        <member name="P:Rhino.RhinoDoc.InGet">
            <summary>
            Returns true if currently in a GetPoint.Get(), GetObject.GetObjects(), or GetString.Get()
            </summary>
        </member>
        <member name="P:Rhino.RhinoDoc.IsSendingMail">
            <summary>
            True if Rhino is in the process of sending this document as an email attachment
            </summary>
        </member>
        <member name="P:Rhino.RhinoDoc.TemplateFileUsed">
            <summary>
            name of the template file used to create this document. This is a runtime value
            only present if the document was newly created.
            </summary>
        </member>
        <member name="M:Rhino.RhinoDoc.ReadFileVersion">
            <summary>
            Returns the file version of the current document.
            Use this function to determine which version of RhinoCommon last saved the document.
            </summary>
            <returns>
            The file version (e.g. 1, 2, 3, 4, etc.) or -1 if the document has not been read from disk.
            </returns>
        </member>
        <member name="M:Rhino.RhinoDoc.CreateDefaultAttributes">
            <summary>
            Gets the default object attributes for this document.
            The attributes will be linked to the currently active layer
            and they will inherit the Document WireDensity setting.
            </summary>
        </member>
        <member name="M:Rhino.RhinoDoc.ExtractPreviewImage(System.String)">
            <summary>Extracts the bitmap preview image from the specified model (3DM).</summary>
            <param name="path">
            The model (3DM) from which to extract the preview image.
            If null, the currently loaded model is used.
            </param>
            <returns>true on success</returns>
        </member>
        <member name="T:Rhino.DocumentEventArgs">
            <summary>
            Provides document information for RhinoDoc events
            </summary>
        </member>
        <member name="T:Rhino.DocumentOpenEventArgs">
            <summary>
            Provides document information for RhinoDoc events
            </summary>
        </member>
        <member name="P:Rhino.DocumentOpenEventArgs.FileName">
            <summary>
            Name of file being opened
            </summary>
        </member>
        <member name="P:Rhino.DocumentOpenEventArgs.Merge">
            <summary>
            True if file is being merged into the current document. This
            occurs during the "Import" command
            </summary>
        </member>
        <member name="P:Rhino.DocumentOpenEventArgs.Reference">
            <summary>
            True is file is openend as a reference file
            </summary>
        </member>
        <member name="T:Rhino.DocumentSaveEventArgs">
            <summary>
            Provides document information for RhinoDoc events
            </summary>
        </member>
        <member name="P:Rhino.DocumentSaveEventArgs.FileName">
            <summary>
            Name of file being written
            </summary>
        </member>
        <member name="P:Rhino.DocumentSaveEventArgs.ExportSelected">
            <summary>
            True if only selected objects are being written to a file
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.Tables.ViewTable.Document">
            <summary>Document that owns this object table</summary>
        </member>
        <member name="P:Rhino.DocObjects.Tables.ViewTable.ActiveView">
            <summary>
            Gets or Sets the active view
            </summary>
            <example>
                <code source="examples\vbnet\ex_addbackgroundbitmap.vb" lang="vbnet" />
                <code source="examples\cs\ex_addbackgroundbitmap.cs" lang="cs" />
                <code source="examples\py\ex_addbackgroundbitmap.py" lang="py" />
            </example>
        </member>
        <member name="P:Rhino.DocObjects.Tables.ViewTable.RedrawEnabled">
            <summary>Returns or sets (enable or disables) screen redrawing.</summary>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ViewTable.FlashObjects(System.Collections.Generic.IEnumerable{Rhino.DocObjects.RhinoObject},System.Boolean)">
            <summary>
            Cause objects selection state to change momentarily so the object
            appears to flash on the screen
            </summary>
            <param name="list">
            </param>
            <param name="useSelectionColor">
            If true, flash between object color and selection color. If false,
            flash between visible and invisible
            </param>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ViewTable.Redraw">
            <summary>Redraws all views</summary>
            <remarks>
            If you change something in the active document -- like adding
            objects, deleting objects, modifying layer or object display
            attributes, etc., then you need to call CRhinoDoc::Redraw to
            redraw all the views.
            If you change something in a particular view like the projection,
            construction plane, background bitmap, etc., then you need to
            call CRhinoView::Redraw to redraw that particular view.
            </remarks>
            <example>
                <code source="examples\vbnet\ex_addcircle.vb" lang="vbnet" />
                <code source="examples\cs\ex_addcircle.cs" lang="cs" />
                <code source="examples\py\ex_addcircle.py" lang="py" />
            </example>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ViewTable.GetViewList(System.Boolean,System.Boolean)">
            <summary>Gets an array of all the views</summary>
            <param name="includeStandardViews">
            </param>
            <param name="includePageViews">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ViewTable.Find(System.Guid)">
            <summary>
            Find a view in this document with a given main viewport Id
            </summary>
            <param name="mainViewportId">
            </param>
            <returns>View on success. null if no view could be found in this document</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ViewTable.Find(System.String,System.Boolean)">
            <summary>
            Find a view in this document with a main viewport that has a given name. Note that there
            may be multiple views in this document that have the same name. This function only returns
            the first view found. If you want to find all the views with a given name, use the GetViewList
            function and iterate through the views
            </summary>
            <param name="mainViewportName">
            </param>
            <param name="compareCase">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ViewTable.AddPageView(System.String)">
            <summary>
            Create a new page view with a given title
            </summary>
            <param name="title">
            If null or empty, a name will be generated as "Page #" where # is the largest page number
            </param>
            <returns>newly created page view on success. Null on error</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ViewTable.AddPageView(System.String,System.Double,System.Double)">
            <summary>
            Create a new page view with a given title and size
            </summary>
            <param name="title">
            If null or empty, a name will be generated as "Page #" where # is the largest page number
            </param>
            <param name="pageWidth">
            </param>
            <param name="pageHeight">
            </param>
            <returns>newly created page view on success. Null on error</returns>
        </member>
        <member name="P:Rhino.DocObjects.Tables.ObjectTable.Document">
            <summary>
            Gets the document that owns this object table.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.Tables.ObjectTable.BoundingBox">
            <summary>
            Gets the boundingbox for all objects (normal, locked and hidden) in this
            document that exist in "model" space. This bounding box does not include
            objects that exist in layout space
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.Tables.ObjectTable.BoundingBoxVisible">
            <summary>
            Gets the boundingbox for all visible objects (normal and locked) in this
            document that exist in "model" space. This bounding box does not include
            hidden objects or any objects that exist in layout space
            </summary>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.Find(System.Guid)">
            <summary>
            Use the object guid to find a rhino object. Deleted objects cannot be found by id.
            The guid is the value that is stored on RhinoObject.Id
            In a single document, no two active objects have the same guid. If an object is
            replaced with a new object, then the guid  persists. For example, if the Move command
            moves an object, then the moved object inherits it's guid from the starting object.
            If the Copy command copies an object, then the copy gets a new guid. This guid persists
            through file saving/openning operations. This function will not find grip objects.
            </summary>
            <param name="objectId">ID of object to search for.</param>
            <returns>Reference to the rhino object with the objectId or null if no such object could be found.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.Find(System.UInt32)">
            <summary>
            Use the object runtime serial number to find a rhino object in the document. This is the value stored on
            RhinoObject.RuntimeObjectSerialNumber. The RhinoObject constructor sets the runtime serial number and every
            instance of a RhinoObject class will have a unique serial number for the duration of the Rhino application.
            If an object is replaced with a new object, then the new object will have a different runtime serial number.
            Deleted objects stored in the undo list maintain their runtime serial numbers and this funtion will return
            pointers to these objects. Call RhinoObject.IsDeleted if you need to determine if the returned object is
            active or deleted.  The runtime serial number is not saved in files.
            </summary>
            <param name="runtimeSerialNumber">Runtime serial number to search for.</param>
            <returns>Reference to the rhino object with the objectId or null if no such object could be found.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.FindByGroup(System.Int32)">
            <summary>
            Find all RhinoObjects that are in a given group.
            </summary>
            <param name="groupIndex">Index of group to search for.</param>
            <returns>An array of objects that belong to the specified group or null if no objects could be found.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.FindByLayer(Rhino.DocObjects.Layer)">
            <summary>
            Find all RhinoObjects that are in a given layer.
            </summary>
            <param name="layer">Layer to search.</param>
            <returns>
            Array of objects that belong to the specified group or null if no objects could be found.
            </returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.FindByLayer(System.String)">
            <summary>
            Find all RhinoObjects that are in a given layer.
            </summary>
            <param name="layerName">Name of layer to search.</param>
            <returns>
            Array of objects that belong to the specified group or null if no objects could be found.
            </returns>
            <example>
                <code source="examples\vbnet\ex_sellayer.vb" lang="vbnet" />
                <code source="examples\cs\ex_sellayer.cs" lang="cs" />
                <code source="examples\py\ex_sellayer.py" lang="py" />
            </example>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.FindByFilter(Rhino.DocObjects.ObjectEnumeratorSettings)">
            <summary>
            Same as GetObjectList but converts the result to an array
            </summary>
            <param name="filter">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.AddPoint(System.Double,System.Double,System.Double)">
            <summary>
            Add a point object to the document.
            </summary>
            <param name="x">X component of point coordinate.</param>
            <param name="y">Y component of point coordinate.</param>
            <param name="z">Z component of point coordinate.</param>
            <returns>id of new Rhino object.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.AddPoint(Rhino.Geometry.Point3d)">
            <summary>Add a point object to the document.</summary>
            <param name="point">location of point</param>
            <returns>id of new rhino object</returns>
            <example>
                <code source="examples\vbnet\ex_dividebylength.vb" lang="vbnet" />
                <code source="examples\cs\ex_dividebylength.cs" lang="cs" />
                <code source="examples\py\ex_dividebylength.py" lang="py" />
            </example>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.AddPoint(Rhino.Geometry.Point3d,Rhino.DocObjects.ObjectAttributes)">
            <summary>Add a point object to the document</summary>
            <param name="point">location of point</param>
            <param name="attributes">attributes to apply to point</param>
            <returns>id of new rhino object</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.AddPoint(Rhino.Geometry.Point3f)">
            <summary>Add a point object to the document.</summary>
            <param name="point">location of point</param>
            <returns>id of new rhino object</returns>
            <example>
                <code source="examples\vbnet\ex_dividebylength.vb" lang="vbnet" />
                <code source="examples\cs\ex_dividebylength.cs" lang="cs" />
                <code source="examples\py\ex_dividebylength.py" lang="py" />
            </example>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.AddPoint(Rhino.Geometry.Point3f,Rhino.DocObjects.ObjectAttributes)">
            <summary>Add a point object to the document</summary>
            <param name="point">location of point</param>
            <param name="attributes">attributes to apply to point</param>
            <returns>id of new rhino object</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.AddPoints(System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d})">
            <summary>
            Add multiple points to the document.
            </summary>
            <param name="points">Points to add.</param>
            <returns>List of object ids.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.AddPoints(System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d},Rhino.DocObjects.ObjectAttributes)">
            <summary>
            Add multiple points to the document.
            </summary>
            <param name="points">Points to add.</param>
            <param name="attributes">Attributes to apply to point objects.</param>
            <returns>List of object ids.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.AddPoints(System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3f})">
            <summary>
            Add multiple points to the document.
            </summary>
            <param name="points">Points to add.</param>
            <returns>List of object ids.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.AddPoints(System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3f},Rhino.DocObjects.ObjectAttributes)">
            <summary>
            Add multiple points to the document.
            </summary>
            <param name="points">Points to add.</param>
            <param name="attributes">Attributes to apply to point objects.</param>
            <returns>List of object ids.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.AddPointCloud(Rhino.Geometry.PointCloud)">
            <summary>Add a point cloud object to the document</summary>
            <param name="cloud">PointCloud to add.</param>
            <returns>id of new rhino object</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.AddPointCloud(Rhino.Geometry.PointCloud,Rhino.DocObjects.ObjectAttributes)">
            <summary>Add a point cloud object to the document</summary>
            <param name="cloud">PointCloud to add.</param>
            <param name="attributes">attributes to apply to point cloud</param>
            <returns>id of new rhino object</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.AddPointCloud(System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d})">
            <summary>Add a point cloud object to the document</summary>
            <param name="points">
            </param>
            <returns>id of new rhino object</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.AddPointCloud(System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d},Rhino.DocObjects.ObjectAttributes)">
            <summary>Add a point cloud object to the document</summary>
            <param name="points">
            </param>
            <param name="attributes">attributes to apply to point cloud</param>
            <returns>id of new rhino object</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.AddClippingPlane(Rhino.Geometry.Plane,System.Double,System.Double,System.Guid)">
            <summary>
            Add a clipping plane object to Rhino
            </summary>
            <param name="plane">
            </param>
            <param name="uMagnitude">
            </param>
            <param name="vMagnitude">
            </param>
            <param name="clippedViewportId">viewport id that the new clipping plane will clip</param>
            <returns>id of new rhino object</returns>
            <example>
                <code source="examples\vbnet\ex_addclippingplane.vb" lang="vbnet" />
                <code source="examples\cs\ex_addclippingplane.cs" lang="cs" />
                <code source="examples\py\ex_addclippingplane.py" lang="py" />
            </example>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.AddClippingPlane(Rhino.Geometry.Plane,System.Double,System.Double,System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Add a clipping plane object to Rhino
            </summary>
            <param name="plane">
            </param>
            <param name="uMagnitude">
            </param>
            <param name="vMagnitude">
            </param>
            <param name="clippedViewportIds">list of viewport ids that the new clipping plane will clip</param>
            <returns>id of new rhino object</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.AddClippingPlane(Rhino.Geometry.Plane,System.Double,System.Double,System.Collections.Generic.IEnumerable{System.Guid},Rhino.DocObjects.ObjectAttributes)">
            <summary>
            Add a clipping plane object to Rhino
            </summary>
            <param name="plane">
            </param>
            <param name="uMagnitude">
            </param>
            <param name="vMagnitude">
            </param>
            <param name="clippedViewportIds">list of viewport ids that the new clipping plane will clip</param>
            <param name="attributes">
            </param>
            <returns>id of new rhino object</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.AddLinearDimension(Rhino.Geometry.LinearDimension)">
            <example>
                <code source="examples\vbnet\ex_addlineardimension.vb" lang="vbnet" />
                <code source="examples\cs\ex_addlineardimension.cs" lang="cs" />
                <code source="examples\py\ex_addlineardimension.py" lang="py" />
            </example>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.AddLine(Rhino.Geometry.Point3d,Rhino.Geometry.Point3d)">
            <summary>Add a line object to Rhino</summary>
            <param name="from">
            </param>
            <param name="to">
            </param>
            <returns>id of new rhino object</returns>
            <example>
                <code source="examples\vbnet\ex_addline.vb" lang="vbnet" />
                <code source="examples\cs\ex_addline.cs" lang="cs" />
                <code source="examples\py\ex_addline.py" lang="py" />
            </example>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.AddLine(Rhino.Geometry.Point3d,Rhino.Geometry.Point3d,Rhino.DocObjects.ObjectAttributes)">
            <summary>Add a line object to Rhino</summary>
            <param name="from">
            </param>
            <param name="to">
            </param>
            <param name="attributes">attributes to apply to line</param>
            <returns>id of new rhino object</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.AddLine(Rhino.Geometry.Line)">
            <summary>Add a line object to Rhino</summary>
            <returns>id of new rhino object</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.AddLine(Rhino.Geometry.Line,Rhino.DocObjects.ObjectAttributes)">
            <summary>Add a line object to Rhino</summary>
            <param name="line">
            </param>
            <param name="attributes">attributes to apply to line</param>
            <returns>id of new rhino object</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.AddPolyline(System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d})">
            <summary>Add a polyline object to Rhino</summary>
            <param name="points">
            </param>
            <returns>id of new rhino object</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.AddPolyline(System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d},Rhino.DocObjects.ObjectAttributes)">
            <summary>Add a polyline object to Rhino</summary>
            <param name="points">
            </param>
            <param name="attributes">attributes to apply to line</param>
            <returns>id of new rhino object</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.AddArc(Rhino.Geometry.Arc)">
            <summary>Add a curve object to the document representing an arc</summary>
            <param name="arc">
            </param>
            <returns>id of new rhino object</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.AddArc(Rhino.Geometry.Arc,Rhino.DocObjects.ObjectAttributes)">
            <summary>Add a curve object to the document representing an arc</summary>
            <param name="arc">
            </param>
            <param name="attributes">attributes to apply to arc</param>
            <returns>id of new rhino object</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.AddCircle(Rhino.Geometry.Circle)">
            <summary>Add a curve object to the document representing a circle</summary>
            <param name="circle">
            </param>
            <returns>id of new rhino object</returns>
            <example>
                <code source="examples\vbnet\ex_addcircle.vb" lang="vbnet" />
                <code source="examples\cs\ex_addcircle.cs" lang="cs" />
                <code source="examples\py\ex_addcircle.py" lang="py" />
            </example>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.AddCircle(Rhino.Geometry.Circle,Rhino.DocObjects.ObjectAttributes)">
            <summary>Add a curve object to the document representing a circle</summary>
            <param name="circle">
            </param>
            <param name="attributes">attributes to apply to circle</param>
            <returns>id of new rhino object</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.AddEllipse(Rhino.Geometry.Ellipse)">
            <summary>Add a curve object to the document representing an ellipse</summary>
            <param name="ellipse">
            </param>
            <returns>id of new rhino object</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.AddEllipse(Rhino.Geometry.Ellipse,Rhino.DocObjects.ObjectAttributes)">
            <summary>Add a curve object to the document representing an ellipse</summary>
            <param name="ellipse">
            </param>
            <param name="attributes">attributes to apply to ellipse</param>
            <returns>id of new rhino object</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.AddSphere(Rhino.Geometry.Sphere)">
            <example>
                <code source="examples\vbnet\ex_addsphere.vb" lang="vbnet" />
                <code source="examples\cs\ex_addsphere.cs" lang="cs" />
                <code source="examples\py\ex_addsphere.py" lang="py" />
            </example>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.AddCurve(Rhino.Geometry.Curve)">
            <summary>Add a curve object to Rhino</summary>
            <param name="curve">
            </param>
            <returns>id of new rhino object</returns>
            <example>
                <code source="examples\vbnet\ex_addnurbscircle.vb" lang="vbnet" />
                <code source="examples\cs\ex_addnurbscircle.cs" lang="cs" />
                <code source="examples\py\ex_addnurbscircle.py" lang="py" />
            </example>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.AddCurve(Rhino.Geometry.Curve,Rhino.DocObjects.ObjectAttributes)">
            <summary>Add a curve object to Rhino</summary>
            <param name="curve">A duplicate of this curve is added to Rhino</param>
            <param name="attributes">attributes to apply to curve</param>
            <returns>id of new rhino object</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.AddTextDot(System.String,Rhino.Geometry.Point3d)">
            <summary>Add a text dot object to Rhino</summary>
            <param name="text">
            </param>
            <param name="location">
            </param>
            <returns>id of new rhino object</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.AddTextDot(System.String,Rhino.Geometry.Point3d,Rhino.DocObjects.ObjectAttributes)">
            <summary>Add a text dot object to Rhino</summary>
            <param name="text">
            </param>
            <param name="location">
            </param>
            <param name="attributes">
            </param>
            <returns>id of new rhino object</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.AddTextDot(Rhino.Geometry.TextDot)">
            <summary>Add a text dot object to Rhino</summary>
            <param name="dot">
            </param>
            <returns>id of new rhino object</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.AddTextDot(Rhino.Geometry.TextDot,Rhino.DocObjects.ObjectAttributes)">
            <summary>Add a text dot object to Rhino</summary>
            <param name="dot">
            </param>
            <param name="attributes">
            </param>
            <returns>id of new rhino object</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.AddText(Rhino.Display.Text3d)">
            <summary>
            Add an annotation text object to the document.
            </summary>
            <param name="text3d">The text object to add.</param>
            <returns>The Guid of the newly added object or Guid.Empty on failure.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.AddText(Rhino.Display.Text3d,Rhino.DocObjects.ObjectAttributes)">
            <summary>
            Add an annotation text object to the document.
            </summary>
            <param name="text3d">The text object to add.</param>
            <param name="attributes">Object Attributes.</param>
            <returns>The Guid of the newly added object or Guid.Empty on failure.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.AddText(System.String,Rhino.Geometry.Plane,System.Double,System.String,System.Boolean,System.Boolean)">
            <summary>
            Add an annotation text object to the document.
            </summary>
            <param name="text">Text string.</param>
            <param name="plane">Plane of text.</param>
            <param name="height">Height of text.</param>
            <param name="fontName">Name of FontFace.</param>
            <param name="bold">Bold flag.</param>
            <param name="italic">Italic flag.</param>
            <returns>The Guid of the newly added object or Guid.Empty on failure.</returns>
            <example>
                <code source="examples\vbnet\ex_addtext.vb" lang="vbnet" />
                <code source="examples\cs\ex_addtext.cs" lang="cs" />
                <code source="examples\py\ex_addtext.py" lang="py" />
            </example>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.AddText(System.String,Rhino.Geometry.Plane,System.Double,System.String,System.Boolean,System.Boolean,Rhino.DocObjects.ObjectAttributes)">
            <summary>
            Add an annotation text object to the document.
            </summary>
            <param name="text">Text string.</param>
            <param name="plane">Plane of text.</param>
            <param name="height">Height of text.</param>
            <param name="fontName">Name of FontFace.</param>
            <param name="bold">Bold flag.</param>
            <param name="italic">Italic flag.</param>
            <param name="attributes">Object Attributes.</param>
            <returns>The Guid of the newly added object or Guid.Empty on failure.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.AddSurface(Rhino.Geometry.Surface)">
            <summary>Add a surface object to Rhino</summary>
            <param name="surface">A duplicate of this surface is added to Rhino</param>
            <returns>id of new rhino object</returns>
            <example>
                <code source="examples\vbnet\ex_addtorus.vb" lang="vbnet" />
                <code source="examples\cs\ex_addtorus.cs" lang="cs" />
                <code source="examples\py\ex_addtorus.py" lang="py" />
            </example>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.AddSurface(Rhino.Geometry.Surface,Rhino.DocObjects.ObjectAttributes)">
            <summary>Add a surface object to Rhino</summary>
            <param name="surface">A duplicate of this surface is added to Rhino</param>
            <param name="attributes">
            </param>
            <returns>id of new rhino object</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.AddMesh(Rhino.Geometry.Mesh)">
            <summary>Add a mesh object to Rhino</summary>
            <param name="mesh">A duplicate of this mesh is added to Rhino</param>
            <returns>id of new rhino object</returns>
            <example>
                <code source="examples\vbnet\ex_addmesh.vb" lang="vbnet" />
                <code source="examples\cs\ex_addmesh.cs" lang="cs" />
                <code source="examples\py\ex_addmesh.py" lang="py" />
            </example>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.AddMesh(Rhino.Geometry.Mesh,Rhino.DocObjects.ObjectAttributes)">
            <summary>Add a mesh object to Rhino</summary>
            <param name="mesh">A duplicate of this mesh is added to Rhino</param>
            <param name="attributes">
            </param>
            <returns>id of new rhino object</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.AddBrep(Rhino.Geometry.Brep)">
            <summary>Add a brep object to Rhino</summary>
            <param name="brep">A duplicate of this brep is added to Rhino</param>
            <returns>id of new rhino object</returns>
            <example>
                <code source="examples\vbnet\ex_addbrepbox.vb" lang="vbnet" />
                <code source="examples\cs\ex_addbrepbox.cs" lang="cs" />
                <code source="examples\py\ex_addbrepbox.py" lang="py" />
            </example>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.AddBrep(Rhino.Geometry.Brep,Rhino.DocObjects.ObjectAttributes)">
            <summary>Add a brep object to Rhino</summary>
            <param name="brep">A duplicate of this brep is added to Rhino</param>
            <param name="attributes">attributes to apply to brep</param>
            <returns>id of new rhino object</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.Delete(Rhino.DocObjects.ObjRef,System.Boolean)">
            <summary>
            Deletes objref.Object().  The deletion can be undone by calling UndeleteObject().
            </summary>
            <param name="objref">objref.Object() will be deleted</param>
            <param name="quiet">if false, a message box will appear when an object cannot be deleted</param>
            <returns>
            </returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.Delete(Rhino.DocObjects.RhinoObject,System.Boolean)">
            <summary>
            Deletes object from document.  The deletion can be undone by calling UndeleteObject().
            </summary>
            <param name="obj">the object to delete</param>
            <param name="quiet">if false, a message box will appear when an object cannot be deleted</param>
            <returns>
            </returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.Delete(System.Guid,System.Boolean)">
            <summary>
            Deletes object from document.  The deletion can be undone by calling UndeleteObject().
            </summary>
            <param name="objectId">Id of the object to delete</param>
            <param name="quiet">if false, a message box will appear when an object cannot be deleted</param>
            <returns>
            </returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.ModifyAttributes(Rhino.DocObjects.ObjRef,Rhino.DocObjects.ObjectAttributes,System.Boolean)">
            <summary>
            Modifies an object's attributes.  Cannot be used to change object id
            </summary>
            <param name="objref">reference to object to modify</param>
            <param name="newAttributes">new attributes</param>
            <param name="quiet">if true, then warning message boxes are disabled</param>
            <returns>true if successful</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.ModifyAttributes(Rhino.DocObjects.RhinoObject,Rhino.DocObjects.ObjectAttributes,System.Boolean)">
            <summary>
            Modifies an object's attributes.  Cannot be used to change object id
            </summary>
            <param name="obj">object to modify</param>
            <param name="newAttributes">new attributes</param>
            <param name="quiet">if true, then warning message boxes are disabled</param>
            <returns>true if successful</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.ModifyAttributes(System.Guid,Rhino.DocObjects.ObjectAttributes,System.Boolean)">
            <summary>
            Modifies an object's attributes.  Cannot be used to change object id
            </summary>
            <param name="objectId">Id of object to modify</param>
            <param name="newAttributes">new attributes</param>
            <param name="quiet">if true, then warning message boxes are disabled</param>
            <returns>true if successful</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.Replace(Rhino.DocObjects.ObjRef,Rhino.Geometry.Point3d)">
            <summary>Replace one object with new point object</summary>
            <param name="objref">
            Reference to old object to be replaced. The object objref.Object() will be deleted.
            </param>
            <param name="point">new point to be added.  The point is copied</param>
            <returns>true if successful</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.Replace(Rhino.DocObjects.ObjRef,Rhino.Geometry.TextDot)">
            <summary>Replace one object with new textdot object</summary>
            <param name="objref">
            Reference to old object to be replaced. The object objref.Object() will be deleted.
            </param>
            <param name="dot">new textdot to be added.  The textdot is copied</param>
            <returns>true if successful</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.Replace(Rhino.DocObjects.ObjRef,Rhino.Geometry.Line)">
            <summary>Replace one object with new line curve object</summary>
            <param name="objref">
            Reference to old object to be replaced. The object objref.Object() will be deleted.
            </param>
            <param name="line">new line to be added.  The line is copied</param>
            <returns>true if successful</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.Replace(Rhino.DocObjects.ObjRef,Rhino.Geometry.Circle)">
            <summary>Replace one object with new curve object</summary>
            <param name="objref">
            Reference to old object to be replaced. The object objref.Object() will be deleted.
            </param>
            <param name="circle">new circle to be added.  The circle is copied</param>
            <returns>true if successful</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.Replace(Rhino.DocObjects.ObjRef,Rhino.Geometry.Arc)">
            <summary>Replace one object with new curve object</summary>
            <param name="objref">
            Reference to old object to be replaced. The object objref.Object() will be deleted.
            </param>
            <param name="arc">new arc to be added.  The arc is copied</param>
            <returns>true if successful</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.Replace(Rhino.DocObjects.ObjRef,Rhino.Geometry.Polyline)">
            <summary>Replace one object with new curve object</summary>
            <param name="objref">
            Reference to old object to be replaced. The object objref.Object() will be deleted.
            </param>
            <param name="polyline">new polyline to be added.  The polyline is copied</param>
            <returns>true if successful</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.Replace(Rhino.DocObjects.ObjRef,Rhino.Geometry.Curve)">
            <summary>
            Replace one object with new curve object
            </summary>
            <param name="objref">reference to old object to be replaced. The objref.Object() will be deleted</param>
            <param name="curve">
            New curve to be added. A duplicate of the curve is added to the Rhino model.
            </param>
            <returns>true if successful</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.Replace(Rhino.DocObjects.ObjRef,Rhino.Geometry.Surface)">
            <summary>
            Replace one object with new surface object
            </summary>
            <param name="objref">reference to old object to be replaced. The objref.Object() will be deleted</param>
            <param name="surface">
            new surface to be added
            A duplicate of the surface is added to the Rhino model
            </param>
            <returns>true if successful</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.Replace(Rhino.DocObjects.ObjRef,Rhino.Geometry.Brep)">
            <summary>
            Replace one object with new brep object
            </summary>
            <param name="objref">reference to old object to be replaced. The objref.Object() will be deleted</param>
            <param name="brep">
            new brep to be added
            A duplicate of the brep is added to the Rhino model
            </param>
            <returns>true if successful</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.Replace(Rhino.DocObjects.ObjRef,Rhino.Geometry.Mesh)">
            <summary>
            Replace one object with new mesh object
            </summary>
            <param name="objref">reference to old object to be replaced. The objref.Object() will be deleted</param>
            <param name="mesh">
            new mesh to be added
            A duplicate of the mesh is added to the Rhino model
            </param>
            <returns>true if successful</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.Replace(Rhino.DocObjects.ObjRef,Rhino.Geometry.TextEntity)">
            <summary>
            Replace one object with new text object
            </summary>
            <param name="objref">reference to old object to be replaced. The objref.Object() will be deleted</param>
            <param name="text">
            new text to be added
            A duplicate of the text is added to the Rhino model
            </param>
            <returns>true if successful</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.Hide(Rhino.DocObjects.ObjRef,System.Boolean)">
            <summary>
            If objref.Object().IsNormal() is true, then the object will be hidden.
            </summary>
            <param name="objref">reference to object to hide</param>
            <param name="ignoreLayerMode">
            if true, the object will be hidden even if it is on a layer that is locked or off
            </param>
            <returns>true if the object was successfully hidden</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.Hide(Rhino.DocObjects.RhinoObject,System.Boolean)">
            <summary>
            If obj.IsNormal() is true, then the object will be hidden.
            </summary>
            <param name="obj">object to hide</param>
            <param name="ignoreLayerMode">
            if true, the object will be hidden even if it is on a layer that is locked or off
            </param>
            <returns>true if the object was successfully hidden</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.Hide(System.Guid,System.Boolean)">
            <summary>
            If Object().IsNormal() is true, then the object will be hidden.
            </summary>
            <param name="objectId">Id of object to hide</param>
            <param name="ignoreLayerMode">
            if true, the object will be hidden even if it is on a layer that is locked or off
            </param>
            <returns>true if the object was successfully hidden</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.Show(Rhino.DocObjects.ObjRef,System.Boolean)">
            <summary>
            If objref.Object().IsHidden() is true, then the object will be returned to normal (visible and selectable) mode.
            </summary>
            <param name="objref">reference to normal object to show</param>
            <param name="ignoreLayerMode">
            if true, the object will be shown even if it is on a layer that is locked or off
            </param>
            <returns>true if the object was successfully shown</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.Show(Rhino.DocObjects.RhinoObject,System.Boolean)">
            <summary>
            If obj.IsHidden() is true, then the object will be returned to normal (visible and selectable) mode.
            </summary>
            <param name="obj">the normal object to show</param>
            <param name="ignoreLayerMode">
            if true, the object will be shown even if it is on a layer that is locked or off
            </param>
            <returns>true if the object was successfully shown</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.Show(System.Guid,System.Boolean)">
            <summary>
            If Object().IsHidden() is true, then the object will be returned to normal (visible and selectable) mode.
            </summary>
            <param name="objectId">Id of the normal object to show</param>
            <param name="ignoreLayerMode">
            if true, the object will be shown even if it is on a layer that is locked or off
            </param>
            <returns>true if the object was successfully shown</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.Lock(Rhino.DocObjects.ObjRef,System.Boolean)">
            <summary>
            If objref.Object().IsNormal() is true, then the object will be locked.
            </summary>
            <param name="objref">reference to normal object to lock</param>
            <param name="ignoreLayerMode">
            if true, the object will be locked even if it is on a layer that is locked or off
            </param>
            <returns>true if the object was successfully locked</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.Lock(Rhino.DocObjects.RhinoObject,System.Boolean)">
            <summary>
            If obj.IsNormal() is true, then the object will be locked.
            </summary>
            <param name="obj">normal object to lock</param>
            <param name="ignoreLayerMode">
            if true, the object will be locked even if it is on a layer that is locked or off
            </param>
            <returns>true if the object was successfully locked</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.Lock(System.Guid,System.Boolean)">
            <summary>
            If objref.Object().IsNormal() is true, then the object will be locked.
            </summary>
            <param name="objectId">Id of normal object to lock</param>
            <param name="ignoreLayerMode">
            if true, the object will be locked even if it is on a layer that is locked or off
            </param>
            <returns>true if the object was successfully locked</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.Unlock(Rhino.DocObjects.ObjRef,System.Boolean)">
            <summary>
            If objref.Object().IsLocked() is true, then the object will be returned to normal (visible and selectable) mode
            </summary>
            <param name="objref">reference to locked object to unlock</param>
            <param name="ignoreLayerMode">
            if true, the object will be unlocked even if it is on a layer that is locked or off
            </param>
            <returns>true if the object was successfully unlocked</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.Unlock(Rhino.DocObjects.RhinoObject,System.Boolean)">
            <summary>
            If obj.IsLocked() is true, then the object will be returned to normal (visible and selectable) mode
            </summary>
            <param name="obj">locked object to unlock</param>
            <param name="ignoreLayerMode">
            if true, the object will be unlocked even if it is on a layer that is locked or off
            </param>
            <returns>true if the object was successfully unlocked</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.Unlock(System.Guid,System.Boolean)">
            <summary>
            If Object().IsLocked() is true, then the object will be returned to normal (visible and selectable) mode
            </summary>
            <param name="objectId">Id of locked object to unlock</param>
            <param name="ignoreLayerMode">
            if true, the object will be unlocked even if it is on a layer that is locked or off
            </param>
            <returns>true if the object was successfully unlocked</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.UnselectAll(System.Boolean)">
            <summary>Unselect objects</summary>
            <param name="ignorePersistentSelections">
            if true, then objects that are persistently selected will not be unselected
            </param>
            <returns>Number of object that were unselected</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.UnselectAll">
            <summary>Unselect objects</summary>
            <returns>Number of object that were unselected</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.Transform(Rhino.DocObjects.ObjRef,Rhino.Geometry.Transform,System.Boolean)">
            <summary>
            Creates a new object that is the transformation of the existing object
            and deletes the existing object if deleteOriginal is true.
            </summary>
            <param name="objref">
            reference to object to transform. The objref.Object() will be deleted if deleteOriginal is true
            </param>
            <param name="xform">transformation to apply</param>
            <param name="deleteOriginal">
            if true, the original object is deleted
            if false, the original object is not deleted
            </param>
            <returns>
            Id of the new object that is the transformation of the existing_object.
            The new object has identical attributes.
            </returns>
            <remarks>
            If the object is locked or on a locked layer, then it cannot be transformed
            </remarks>
            <example>
                <code source="examples\vbnet\ex_orientonsrf.vb" lang="vbnet" />
                <code source="examples\cs\ex_orientonsrf.cs" lang="cs" />
                <code source="examples\py\ex_orientonsrf.py" lang="py" />
            </example>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.Transform(Rhino.DocObjects.RhinoObject,Rhino.Geometry.Transform,System.Boolean)">
            <summary>
            Creates a new object that is the transformation of the existing object
            and deletes the existing object if deleteOriginal is true.
            </summary>
            <param name="obj">
            Rhino object to transform. This object will be deleted if deleteOriginal is true.
            </param>
            <param name="xform">transformation to apply</param>
            <param name="deleteOriginal">
            if true, the original object is deleted
            if false, the original object is not deleted
            </param>
            <returns>
            Id of the new object that is the transformation of the existing_object.
            The new object has identical attributes.
            </returns>
            <remarks>
            If the object is locked or on a locked layer, then it cannot be transformed
            </remarks>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.Transform(System.Guid,Rhino.Geometry.Transform,System.Boolean)">
            <summary>
            Creates a new object that is the transformation of the existing object
            and deletes the existing object if deleteOriginal is true.
            </summary>
            <param name="objectId">
            Id of rhino object to transform. This object will be deleted if deleteOriginal is true.
            </param>
            <param name="xform">transformation to apply</param>
            <param name="deleteOriginal">
            if true, the original object is deleted
            if false, the original object is not deleted
            </param>
            <returns>
            Id of the new object that is the transformation of the existing_object.
            The new object has identical attributes.
            </returns>
            <remarks>
            If the object is locked or on a locked layer, then it cannot be transformed
            </remarks>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.TransformWithHistory(Rhino.DocObjects.ObjRef,Rhino.Geometry.Transform)">
            <summary>
            Creates a new object that is the transformation of the existing object
            and records history of the transformation if history recording is turned on.
            If history recording is not enabled, this function will act the same as
            Transform(objref, xform, false)
            </summary>
            <param name="objref">
            reference to object to transform
            </param>
            <param name="xform">transformation to apply</param>
            <returns>
            Id of the new object that is the transformation of the existing_object.
            The new object has identical attributes.
            </returns>
            <remarks>
            If the object is locked or on a locked layer, then it cannot be transformed
            </remarks>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.TransformWithHistory(Rhino.DocObjects.RhinoObject,Rhino.Geometry.Transform)">
            <summary>
            Creates a new object that is the transformation of the existing object
            and records history of the transformation if history recording is turned on.
            If history recording is not enabled, this function will act the same as
            Transform(obj, xform, false)
            </summary>
            <param name="obj">
            Rhino object to transform
            </param>
            <param name="xform">transformation to apply</param>
            <returns>
            Id of the new object that is the transformation of the existing_object.
            The new object has identical attributes.
            </returns>
            <remarks>
            If the object is locked or on a locked layer, then it cannot be transformed
            </remarks>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.TransformWithHistory(System.Guid,Rhino.Geometry.Transform)">
            <summary>
            Creates a new object that is the transformation of the existing object
            and records history of the transformation if history recording is turned on.
            If history recording is not enabled, this function will act the same as
            Transform(objectId, xform, false)
            </summary>
            <param name="objectId">
            Id of rhino object to transform
            </param>
            <param name="xform">transformation to apply</param>
            <returns>
            Id of the new object that is the transformation of the existing_object.
            The new object has identical attributes.
            </returns>
            <remarks>
            If the object is locked or on a locked layer, then it cannot be transformed
            </remarks>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.Duplicate(Rhino.DocObjects.ObjRef)">
            <summary>
            Same as Transform(objref, ON_Xform.Identity, false)
            </summary>
            <param name="objref">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.Duplicate(Rhino.DocObjects.RhinoObject)">
            <summary>
            Same as TransformObject(obj, ON_Xform.Identity, false)
            </summary>
            <param name="obj">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.Duplicate(System.Guid)">
            <summary>
            Same as TransformObject(objref, ON_Xform.Identity, false)
            </summary>
            <param name="objectId">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.GripUpdate(Rhino.DocObjects.RhinoObject,System.Boolean)">
            <summary>
            Altered grip positions on a RhinoObject are used to calculate an updated object
            that is added to the document
            </summary>
            <param name="obj">object with modified grips to update</param>
            <param name="deleteOriginal">if true, obj is deleted from the document</param>
            <returns>new RhinoObject on success; otherwise null</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.GetObjectList(Rhino.DocObjects.ObjectEnumeratorSettings)">
            <example>
                <code source="examples\vbnet\ex_findobjectsbyname.vb" lang="vbnet" />
                <code source="examples\cs\ex_findobjectsbyname.cs" lang="cs" />
                <code source="examples\py\ex_findobjectsbyname.py" lang="py" />
            </example>
        </member>
        <member name="P:Rhino.DocObjects.Tables.StringTable.Document">
            <summary>Document that owns this object table</summary>
        </member>
        <member name="P:Rhino.DocObjects.Tables.StringTable.Count">
            <summary>
            The number of user data strings in the current document
            </summary>
        </member>
        <member name="M:Rhino.DocObjects.Tables.StringTable.GetValue(System.String,System.String)">
            <summary>
            Get a user data string from the document
            </summary>
            <param name="section">
            </param>
            <param name="entry">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.StringTable.GetSectionNames">
            <summary>
            Return list of all the section names for user data strings in the document.
            By default a section name is a key that is prefixed with a string separated by a backslash
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.StringTable.GetEntryNames(System.String)">
            <summary>
            Return list of all entry names for a given section of user data strings in the document
            </summary>
            <param name="section">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.StringTable.SetString(System.String,System.String,System.String)">
            <summary>
            Adds or sets a user data string to the document. This string is the same string set when using RhinoScript or IronPython
            </summary>
            <param name="section">
            </param>
            <param name="entry">
            </param>
            <param name="value">
            </param>
            <returns>
            the previous value if successful and a previous value existed
            </returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.StringTable.Delete(System.String,System.String)">
            <summary>
            Removes user data strings from the document
            </summary>
            <param name="section">name of section to delete. If null, all sections will be deleted</param>
            <param name="entry">name of entry to delete. If null, all entries will be deleted for a given section</param>
            <returns>true or false indicating success or failure</returns>
        </member>
        <member name="T:Rhino.DocObjects.ObjectEnumeratorSettings">
            <summary>
            Settings used for getting an enumerator of objects in a document
            See Rhino.Collections.ObjectTable.GetEnumerator()
            </summary>
        </member>
        <member name="M:Rhino.DocObjects.ObjectEnumeratorSettings.#ctor">
            <example>
                <code source="examples\vbnet\ex_findobjectsbyname.vb" lang="vbnet" />
                <code source="examples\cs\ex_findobjectsbyname.cs" lang="cs" />
                <code source="examples\py\ex_findobjectsbyname.py" lang="py" />
            </example>
        </member>
        <member name="P:Rhino.DocObjects.ObjectEnumeratorSettings.NameFilter">
            <example>
                <code source="examples\vbnet\ex_findobjectsbyname.vb" lang="vbnet" />
                <code source="examples\cs\ex_findobjectsbyname.cs" lang="cs" />
                <code source="examples\py\ex_findobjectsbyname.py" lang="py" />
            </example>
        </member>
        <member name="T:Rhino.Geometry.Arc">
            <summary>
            An Arc is a subcurve of 3d circle.
            The curve is parameterized by an angle expressed in radians. For an IsValid arc
            the total subtended angle AngleRadians() = Domain()(1) - Domain()(0) must satisfy
            0 &lt; AngleRadians() &lt; 2*Pi
            The parameterization of the Arc is inherited from the Circle it is derived from.
            In particular
            t -&gt; center + cos(t)*radius*xaxis + sin(t)*radius*yaxis
            where xaxis and yaxis, (part of Circle.Plane) form an othonormal frame of the plane
            containing the circle.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Arc.#ctor(Rhino.Geometry.Circle,System.Double)">
            <summary>
            Create a new arc from a base circle and an angle.
            </summary>
            <param name="circle">Circle to base arc upon.</param>
            <param name="angleRadians">Sweep angle of arc (in radians)</param>
        </member>
        <member name="M:Rhino.Geometry.Arc.#ctor(Rhino.Geometry.Circle,Rhino.Geometry.Interval)">
            <summary>
            Create a new arc from a base circle and an interval of angles.
            </summary>
            <param name="circle">Circle to base arc upon.</param>
            <param name="angleIntervalRadians">
            Increasing angle interval in radians with angleIntervalRadians.Length() &lt;= 2.0*Math.PI
            </param>
        </member>
        <member name="M:Rhino.Geometry.Arc.#ctor(Rhino.Geometry.Plane,System.Double,System.Double)">
            <summary>
            Create a new arc from a base plane, a radius value and an angle.
            </summary>
            <param name="plane">The plane of the arc (arc center will be located at plane origin)</param>
            <param name="radius">Radius of arc.</param>
            <param name="angleRadians">Sweep angle of arc (in radians)</param>
        </member>
        <member name="M:Rhino.Geometry.Arc.#ctor(Rhino.Geometry.Point3d,System.Double,System.Double)">
            <summary>
            Create a new horizontal arc at the given center point, with a custom radius and angle.
            </summary>
            <param name="center">Center point of arc.</param>
            <param name="radius">Radius of arc.</param>
            <param name="angleRadians">Sweep angle of arc (in radians)</param>
        </member>
        <member name="M:Rhino.Geometry.Arc.#ctor(Rhino.Geometry.Plane,Rhino.Geometry.Point3d,System.Double,System.Double)">
            <summary>
            Create a new aligned arc at the given center point, with a custom radius and angle.
            </summary>
            <param name="plane">Alignment plane for arc. The arc will be parallel to this plane.</param>
            <param name="center">Center point for arc.</param>
            <param name="radius">Radius of arc.</param>
            <param name="angleRadians">Sweep angle of arc (in radians)</param>
        </member>
        <member name="M:Rhino.Geometry.Arc.#ctor(Rhino.Geometry.Point3d,Rhino.Geometry.Point3d,Rhino.Geometry.Point3d)">
            <summary>
            Create a new arc through three points. If the points are coincident
            or colinear, this will result in an Invalid arc.
            </summary>
            <param name="startPoint">Start point of arc.</param>
            <param name="pointOnInterior">Point on arc interior.</param>
            <param name="endPoint">End point of arc.</param>
        </member>
        <member name="M:Rhino.Geometry.Arc.#ctor(Rhino.Geometry.Point3d,Rhino.Geometry.Vector3d,Rhino.Geometry.Point3d)">
            <summary>
            Create a new arc from end points and a tangent vector.
            If the tangent is parallel with the endpoints this will result in an Invalid arc.
            </summary>
            <param name="pointA">Start point of arc.</param>
            <param name="tangentA">Tangent at start of arc.</param>
            <param name="pointB">End point of arc.</param>
        </member>
        <member name="P:Rhino.Geometry.Arc.Invalid">
            <summary>
            Create an invalid arc.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Arc.Unset">
            <summary>
            Gets an Arc with Unset components.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Arc.IsValid">
            <summary>
            Gets a value indicating whether or not this arc is valid.
            Detail:
            	 Radius&gt;0 and 0&lt;AngleRadians()&lt;=2*Math.Pi
            </summary>
            <returns>True if the arc is valid.</returns>
        </member>
        <member name="P:Rhino.Geometry.Arc.IsCircle">
            <summary>
            Gets a value indicating whether or not this arc is a complete circle.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Arc.Plane">
            <summary>
            Gets or sets the plane in which this arc lies.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Arc.Radius">
            <summary>
            Gets or sets the radius of this arc.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Arc.Diameter">
            <summary>
            Gets or sets the Diameter of this arc.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Arc.Center">
            <summary>
            Gets or sets the center point for this arc.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Arc.Circumference">
            <summary>
            Gets the circumference of the circle that is coincident with this arc.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Arc.Length">
            <summary>
            Gets the length of the arc. (Length = Radius * (subtended angle in radians)).
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Arc.StartPoint">
            <summary>
            Gets the start point of the arc.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Arc.MidPoint">
            <summary>
            Gets the mid-point of the arc.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Arc.EndPoint">
            <summary>
            Gets the end point of the arc.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Arc.AngleDomain">
            <summary>
            Gets or sets the angle domain (in Radians) of this arc.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Arc.StartAngle">
            <summary>
            Gets or sets the start angle (in Radians) for this arc segment.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Arc.EndAngle">
            <summary>
            Gets or sets the end angle (in Radians) for this arc segment.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Arc.Angle">
            <summary>
            Gets or sets the sweep -or subtended- angle (in Radians) for this arc segment.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Arc.StartAngleDegrees">
            <summary>
            Gets or sets the start angle (in Radians) for this arc segment.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Arc.EndAngleDegrees">
            <summary>
            Gets or sets the end angle (in Radians) for this arc segment.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Arc.AngleDegrees">
            <summary>
            Gets or sets the sweep -or subtended- angle (in Radians) for this arc segment.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Arc.Trim(Rhino.Geometry.Interval)">
            <summary>
            Set arc's angle domain (in radians) as a subdomain of the circle.
            </summary>
            <param name="domain">
            0 &lt; domain[1] - domain[0] &lt;= 2.0 * RhinoMath.Pi
            </param>
            <returns>True on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Arc.BoundingBox">
            <summary>
            Compute the 3D axis aligned bounding box for this arc.
            </summary>
            <returns>Bounding box of arc.</returns>
        </member>
        <member name="M:Rhino.Geometry.Arc.PointAt(System.Double)">
            <summary>
            Gets the point at the given arc parameter.
            </summary>
            <param name="t">Arc parameter to evaluate.</param>
            <returns>The point at the given parameter.</returns>
        </member>
        <member name="M:Rhino.Geometry.Arc.TangentAt(System.Double)">
            <summary>
            Gets the tangent at the given parameter.
            </summary>
            <param name="t">Parameter of tangent to evaluate.</param>
            <returns>The tangent at the arc at the given parameter.</returns>
        </member>
        <member name="M:Rhino.Geometry.Arc.ClosestParameterTo(Rhino.Geometry.Point3d)">
            <summary>
            This method is Obsolete, use ClosestParameter() instead.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Arc.ClosestParameter(Rhino.Geometry.Point3d)">
            <summary>
            Get parameter on the arc closest to a test point.
            </summary>
            <param name="testPoint">Point to get close to.</param>
            <returns>Parameter (in radians) of the point on the arc that
            is closest to the test point. If testPoint is the center
            of the arc, then the starting point of the arc is
            (arc.Domain()[0]) returned. If no parameter could be found,
            RhinoMath.UnsetValue is returned.</returns>
        </member>
        <member name="M:Rhino.Geometry.Arc.ClosestPointTo(Rhino.Geometry.Point3d)">
            <summary>
            This method is Obsolete, use ClosestPoint() instead.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Arc.ClosestPoint(Rhino.Geometry.Point3d)">
            <summary>
            Get the point on the arc that is closest to a test point.
            </summary>
            <param name="testPoint">Point to get close to.</param>
            <returns>
            The point on the arc that is closest to testPoint. If testPoint is
            the center of the arc, then the starting point of the arc is returned.
            UnsetPoint on failure.
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Arc.Reverse">
            <summary>
            Reverse the orientation of the arc. Changes the domain from [a,b]
            to [-b,-a].
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Arc.Transform(Rhino.Geometry.Transform)">
            <summary>
            Transform the arc using a Transformation matrix.
            </summary>
            <param name="xform">Transformations to apply.
            Note that arcs cannot handle non-euclidian transformations.</param>
            <returns>True on success, False on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Arc.ToNurbsCurve">
            <summary>
            Create a nurbs curve representation of this arc.
            This amounts to the same as calling NurbsCurve.CreateFromArc().
            </summary>
            <returns>A nurbs curve representation of this arc or null if no such representation could be made.</returns>
        </member>
        <member name="T:Rhino.Geometry.BoundingBox">
            <summary>
            Represents a world aligned boundingbox defined by the two extreme corner points.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.BoundingBox.#ctor(Rhino.Geometry.Point3d,Rhino.Geometry.Point3d)">
            <summary>
            Create a new boundingbox from two corner points.
            </summary>
            <param name="min">Point containing all the minimum coordinates.</param>
            <param name="max">Point containing all the maximum coordinates.</param>
            <example>
                <code source="examples\vbnet\ex_addbrepbox.vb" lang="vbnet" />
                <code source="examples\cs\ex_addbrepbox.cs" lang="cs" />
                <code source="examples\py\ex_addbrepbox.py" lang="py" />
            </example>
        </member>
        <member name="M:Rhino.Geometry.BoundingBox.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Create a boundingbox from numeric extremes.
            </summary>
            <param name="minX">Lower extreme for box X size.</param>
            <param name="minY">Lower extreme for box Y size.</param>
            <param name="minZ">Lower extreme for box Z size.</param>
            <param name="maxX">Upper extreme for box X size.</param>
            <param name="maxY">Upper extreme for box Y size.</param>
            <param name="maxZ">Upper extreme for box Z size.</param>
        </member>
        <member name="M:Rhino.Geometry.BoundingBox.#ctor(System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d})">
            <summary>
            Create a boundingbox from a collection of points.
            </summary>
            <param name="points">Points to include in the boundingbox.</param>
        </member>
        <member name="P:Rhino.Geometry.BoundingBox.Empty">
            <summary>
            Gets an [Empty] boundingbox. An Empty box is an invalid structure that has negative width.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.BoundingBox.Unset">
            <summary>
            Gets a boundingbox that has Unset coordinates for Min and Max.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.BoundingBox.IsValid">
            <summary>
            Gets a value that indicates whether or not this boundingbox is valid.
            Empty boxes are not valid, and neither are boxes with unset points.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.BoundingBox.Min">
            <summary>
            Gets or sets the point in the minimal corner.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.BoundingBox.Max">
            <summary>
            Gets or sets the point in the maximal corner.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.BoundingBox.Center">
            <summary>
            Gets the point in the center of the boundingbox.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.BoundingBox.PointAt(System.Double,System.Double,System.Double)">
            <summary>
            Evaluate the box with normalized parameters.
            </summary>
            <param name="tx">Normalized parameter along the x-direction.</param>
            <param name="ty">Normalized parameter along the y-direction.</param>
            <param name="tz">Normalized parameter along the z-direction.</param>
            <returns>The point at the {tx, ty, tz} parameters.</returns>
        </member>
        <member name="M:Rhino.Geometry.BoundingBox.ClosestPoint(Rhino.Geometry.Point3d)">
            <summary>
            Find the closest point on or in the Box.
            </summary>
            <param name="point">Sample point.</param>
            <returns>The point on or in the box that is closest to the sample point.</returns>
        </member>
        <member name="M:Rhino.Geometry.BoundingBox.ClosestPoint(Rhino.Geometry.Point3d,System.Boolean)">
            <summary>
            Find the closest point on or in the Box.
            </summary>
            <param name="point">Sample point.</param>
            <param name="includeInterior">If False, the point is projected onto the boundary faces only,
            otherwise the interior of the box is also taken into consideration.</param>
            <returns>The point on or in the box that is closest to the sample point.</returns>
        </member>
        <member name="M:Rhino.Geometry.BoundingBox.FurthestPoint(Rhino.Geometry.Point3d)">
            <summary>
            Find the furthest point on the Box.
            </summary>
            <param name="point">Sample point.</param>
            <returns>The point on the box that is furthest from the sample point.</returns>
        </member>
        <member name="M:Rhino.Geometry.BoundingBox.Inflate(System.Double)">
            <summary>
            Inflate the box with equal amounts in all directions.
            Inflating with negative amounts may result in decreasing boxes.
            InValid boxes can not be inflated.
            </summary>
            <param name="amount">Amount (in model units) to inflate this box in all directions.</param>
        </member>
        <member name="M:Rhino.Geometry.BoundingBox.Inflate(System.Double,System.Double,System.Double)">
            <summary>
            Inflate the box with custom amounts in all directions.
            Inflating with negative amounts may result in decreasing boxes.
            InValid boxes can not be inflated.
            </summary>
            <param name="xAmount">Amount (in model units) to inflate this box in the x direction.</param>
            <param name="yAmount">Amount (in model units) to inflate this box in the y direction.</param>
            <param name="zAmount">Amount (in model units) to inflate this box in the z direction.</param>
        </member>
        <member name="M:Rhino.Geometry.BoundingBox.Contains(Rhino.Geometry.Point3d)">
            <summary>
            Test a point for BoundingBox inclusion. This is the same as calling Contains(point, false)
            </summary>
            <param name="point">Point to test.</param>
            <returns>True if the point is on the inside of or coincident with this BoundingBox.</returns>
        </member>
        <member name="M:Rhino.Geometry.BoundingBox.Contains(Rhino.Geometry.Point3d,System.Boolean)">
            <summary>
            Test a point for BoundingBox inclusion.
            </summary>
            <param name="point">Point to test.</param>
            <param name="strict">If true, the point needs to be fully on the inside of the BoundingBox.
            I.e. coincident points will be considered 'outside'.</param>
            <returns>True if the point is (strictly) on the inside of this BoundingBox.</returns>
        </member>
        <member name="M:Rhino.Geometry.BoundingBox.Contains(Rhino.Geometry.BoundingBox)">
            <summary>
            Test a box for BoundingBox inclusion. This is the same as calling Contains(box,false)
            </summary>
            <param name="box">Box to test.</param>
            <returns>True if the box is on the inside of or coincident with this BoundingBox.</returns>
        </member>
        <member name="M:Rhino.Geometry.BoundingBox.Contains(Rhino.Geometry.BoundingBox,System.Boolean)">
            <summary>
            Test a box for BoundingBox inclusion.
            </summary>
            <param name="box">Box to test.</param>
            <param name="strict">If true, the box needs to be fully on the inside of the BoundingBox.
            I.e. coincident boxes will be considered 'outside'.</param>
            <returns>True if the box is (strictly) on the inside of this BoundingBox.</returns>
        </member>
        <member name="M:Rhino.Geometry.BoundingBox.MakeValid">
            <summary>
            Ensure the box is defined in an increasing fashion along x, y and z axes.
            If the Min or Max points are unset, this function will not change the box.
            </summary>
            <returns>True if the box was made valid, False if the box could not be made valid.</returns>
        </member>
        <member name="M:Rhino.Geometry.BoundingBox.GetCorners">
            <summary>
            Gets an array of the 8 corner points of this box.
            </summary>
            <returns>An array of 8 corners.</returns>
        </member>
        <member name="M:Rhino.Geometry.BoundingBox.GetEdges">
            <summary>
            Gets an array of the 12 edges of this box
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:Rhino.Geometry.BoundingBox.ToBrep">
            <summary>
            Create a Brep representation of this BoundingBox.
            </summary>
            <returns>A Brep representation of this box or null.</returns>
            <example>
                <code source="examples\vbnet\ex_addbrepbox.vb" lang="vbnet" />
                <code source="examples\cs\ex_addbrepbox.cs" lang="cs" />
                <code source="examples\py\ex_addbrepbox.py" lang="py" />
            </example>
        </member>
        <member name="M:Rhino.Geometry.BoundingBox.Union(Rhino.Geometry.BoundingBox)">
            <summary>
            Updates this BoundingBox to represent the union of itself and another box.
            </summary>
            <param name="other">Box to include in this union.</param>
            <remarks>If either this BoundingBox or the other BoundingBox is InValid,
            the Valid BoundingBox will be the only one included in the union.</remarks>
        </member>
        <member name="M:Rhino.Geometry.BoundingBox.Union(Rhino.Geometry.Point3d)">
            <summary>
            Updates this BoundingBox to represent the union of itself and a point.
            </summary>
            <param name="point">Point to include in the union.</param>
            <remarks>If this boundingbox is InValid then the union will be
            the BoundingBox containing only the point. If the point is InValid,
            this BoundingBox will remain unchanged.
            </remarks>
        </member>
        <member name="M:Rhino.Geometry.BoundingBox.Union(Rhino.Geometry.BoundingBox,Rhino.Geometry.BoundingBox)">
            <summary>
            Returns a new BoundingBox that represents the union of boxes a and b.
            </summary>
            <param name="a">First box to include in union.</param>
            <param name="b">Second box to include in union.</param>
            <returns>The BoundingBox that contains both a and b.</returns>
            <remarks>Invalid boxes are ignored and will not affect the union.</remarks>
        </member>
        <member name="M:Rhino.Geometry.BoundingBox.Intersection(Rhino.Geometry.BoundingBox,Rhino.Geometry.BoundingBox)">
            <summary>
            Computes the intersection of two bounding boxes
            </summary>
            <param name="a">
            </param>
            <param name="b">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Rhino.Geometry.BoundingBox.Union(Rhino.Geometry.BoundingBox,Rhino.Geometry.Point3d)">
            <summary>
            Returns a new BoundingBox that represents the union of a bounding box and a point.
            </summary>
            <param name="box">Box to include in the union.</param>
            <param name="point">Point to include in the union.</param>
            <returns>The BoundingBox that contains both the box and the point.</returns>
            <remarks>Invalid boxes and points are ignored and will not affect the union.</remarks>
        </member>
        <member name="T:Rhino.Geometry.Circle">
            <summary>
            ON_Circle is a circle in 3d. The cirle is represented by a radius and an
            orthonormal frame	of the plane containing the circle, with origin at the center.
            An Is_Valid() circle has positive radius and an Is_ Valid() plane defining the frame.
            The circle is parameterized by radians from 0 to 2 Pi given by
            t -&gt; center + cos(t)*radius*xaxis + sin(t)*radius*yaxis
            where center, xaxis and yaxis define the orthonormal frame of the circle's plane.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Circle.#ctor(System.Double)">
            <summary>
            Create a circle with center (0,0,0) in the world XY plane
            </summary>
            <param name="radius">Radius of circle, should be a positive number.</param>
        </member>
        <member name="M:Rhino.Geometry.Circle.#ctor(Rhino.Geometry.Plane,System.Double)">
            <summary>
            Creates a circle in the plane with a given radius.
            </summary>
            <param name="plane">Plane of circle. Plane origin defines the center of the circle.</param>
            <param name="radius">Radius of circle (should be a positive value).</param>
            <example>
                <code source="examples\vbnet\ex_addcircle.vb" lang="vbnet" />
                <code source="examples\cs\ex_addcircle.cs" lang="cs" />
                <code source="examples\py\ex_addcircle.py" lang="py" />
            </example>
        </member>
        <member name="M:Rhino.Geometry.Circle.#ctor(Rhino.Geometry.Point3d,System.Double)">
            <summary>
            Creates a circle parallel to the world XY plane with given center and radius.
            </summary>
            <param name="center">Center of circle.</param>
            <param name="radius">Radius of circle (should be a positive value).</param>
            <example>
                <code source="examples\vbnet\ex_addtruncatedcone.vb" lang="vbnet" />
                <code source="examples\cs\ex_addtruncatedcone.cs" lang="cs" />
                <code source="examples\py\ex_addtruncatedcone.py" lang="py" />
            </example>
        </member>
        <member name="M:Rhino.Geometry.Circle.#ctor(Rhino.Geometry.Arc)">
            <summary>
            Create a circle from an arc.
            </summary>
            <param name="arc">Arc that defines the plane and radius.</param>
        </member>
        <member name="M:Rhino.Geometry.Circle.#ctor(Rhino.Geometry.Point3d,Rhino.Geometry.Point3d,Rhino.Geometry.Point3d)">
            <summary>
            Create a circle through three 3d points. The start/end of the circle is at point1.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Circle.#ctor(Rhino.Geometry.Plane,Rhino.Geometry.Point3d,System.Double)">
            <summary>
            Create a circle parallel to a given plane with given center and radius.
            </summary>
            <param name="plane">Plane for circle.</param>
            <param name="center">Center point override.</param>
            <param name="radius">Radius of circle (should be a positive value).</param>
        </member>
        <member name="M:Rhino.Geometry.Circle.#ctor(Rhino.Geometry.Point3d,Rhino.Geometry.Vector3d,Rhino.Geometry.Point3d)">
            <summary>
            Create a circle from two 3d points and a tangent at the first point.
            The start/end of the circle is at point "startPoint".
            </summary>
            <param name="startPoint">Start point of circle.</param>
            <param name="tangentAtP">Tangent vector at start.</param>
            <param name="pointOnCircle">Point coincident with desired circle.</param>
            <remarks>May create an Invalid circle</remarks>
        </member>
        <member name="P:Rhino.Geometry.Circle.Unset">
            <summary>
            Gets a circle with Unset components.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Circle.IsValid">
            <summary>
            A valid circle has radius larger than 0.0 and a base plane which is must also be valid.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Circle.Radius">
            <summary>
            Gets or sets the radius of this circle.
            Radii should be positive values.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Circle.Diameter">
            <summary>
            Gets or sets the diameter (radius * 2.0) of this circle.
            Diameters should be positive values.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Circle.Plane">
            <summary>
            Gets or sets the plane of the circle.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Circle.Center">
            <summary>
            Gets or sets the center point of this circle.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Circle.Normal">
            <summary>
            Gets the normal vector for this circle.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Circle.Circumference">
            <summary>
            Gets or sets the circumference of this circle.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Circle.BoundingBox">
            <summary>
            Gets the circle's 3d axis aligned bounding box.
            </summary>
            <returns>3d bounding box.</returns>
        </member>
        <member name="M:Rhino.Geometry.Circle.IsInPlane(Rhino.Geometry.Plane,System.Double)">
            <summary>
            Evaluates whether or not this circle is co-planar with a given plane.
            </summary>
            <param name="plane">Plane.</param>
            <param name="tolerance">Tolerance to use.</param>
            <returns>True if the circle plane is co-planar with the given plane within tolerance.</returns>
        </member>
        <member name="M:Rhino.Geometry.Circle.PointAt(System.Double)">
            <summary>
            Circles use trigonometric parameterization:
            t -&gt; center + cos(t)*radius*xaxis + sin(t)*radius*yaxis
            </summary>
            <param name="t">Parameter of point to evaluate.</param>
            <returns>The point on the circle at the given parameter.</returns>
        </member>
        <member name="M:Rhino.Geometry.Circle.TangentAt(System.Double)">
            <summary>
            Circles use trigonometric parameterization:
            t -&gt; center + cos(t)*radius*xaxis + sin(t)*radius*yaxis
            </summary>
            <param name="t">Parameter of tangent to evaluate.</param>
            <returns>The tangent at the circle at the given parameter.</returns>
        </member>
        <member name="M:Rhino.Geometry.Circle.DerivativeAt(System.Int32,System.Double)">
            <summary>
            Determine the Nth order derivative.
            </summary>
            <param name="derivative">
            </param>
            <param name="t">Parameter to evaluate derivative. Valid values are 0, 1, 2 and 3.</param>
            <returns>The derivative of the circle at the given parameter.</returns>
        </member>
        <member name="M:Rhino.Geometry.Circle.ClosestParameterTo(Rhino.Geometry.Point3d,System.Double@)">
            <summary>
            This method is Obsolete, use ClosestParameter() instead.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Circle.ClosestParameter(Rhino.Geometry.Point3d,System.Double@)">
            <summary>
            Get the parameter on the circle which is closest to a test point.
            </summary>
            <param name="testPoint">Point to project onto the circle.</param>
            <param name="t">Parameter on circle closes to testPoint.</param>
            <returns>True on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Circle.ClosestPointTo(Rhino.Geometry.Point3d)">
            <summary>
            This method is Obsolete, use ClosestPoint() instead.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Circle.ClosestPoint(Rhino.Geometry.Point3d)">
            <summary>
            Get the point on the circle which is closest to a test point.
            </summary>
            <param name="testPoint">Point to project onto the circle.</param>
            <returns>
            The point on the circle that is closest to testPoint or
            Point3d.Unset on failure.
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Circle.Transform(Rhino.Geometry.Transform)">
            <summary>
            Transform this circle using an xform matrix.
            </summary>
            <param name="xform">Transformation to apply.</param>
            <returns>True on success, false on failure.</returns>
            <remarks>
            Circles may not be transformed accurately if the xform defines a
            non-euclidian transformation.
            </remarks>
        </member>
        <member name="M:Rhino.Geometry.Circle.Rotate(System.Double,System.Double,Rhino.Geometry.Vector3d)">
            <summary>
            Rotate the circle.
            </summary>
            <param name="sinAngle">Dude, I've never understood how these sin/cos rotations work.
            Someone else please write these comments.</param>
            <param name="cosAngle">see sinAngle.</param>
            <param name="axis">Rotation axis.</param>
            <returns>True on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Circle.Rotate(System.Double,Rhino.Geometry.Vector3d)">
            <summary>
            Rotate the circle through a given angle.
            </summary>
            <param name="angle">Angle (in radians) of the rotation.</param>
            <param name="axis">Rotation axis.</param>
            <returns>True on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Circle.Rotate(System.Double,Rhino.Geometry.Vector3d,Rhino.Geometry.Point3d)">
            <summary>
            Rotate the circle through a given angle.
            </summary>
            <param name="angle">Angle (in radians) of the rotation.</param>
            <param name="axis">Rotation axis.</param>
            <param name="point">Rotation anchor point.</param>
            <returns>True on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Circle.Translate(Rhino.Geometry.Vector3d)">
            <summary>
            Translate (move) the circle.
            </summary>
            <param name="delta">Translation vector.</param>
            <returns>True on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Circle.Reverse">
            <summary>
            Reverse the orientation of the circle. Changes the domain from [a,b]
            to [-b,-a].
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Circle.ToNurbsCurve">
            <summary>
            Create a nurbs curve representation of this circle.
            This amounts to the same as calling NurbsCurve.CreateFromCircle().
            </summary>
            <returns>A nurbs curve representation of this circle or null if no such representation could be made.</returns>
        </member>
        <member name="M:Rhino.Geometry.Cone.#ctor(Rhino.Geometry.Plane,System.Double,System.Double)">
            <summary>
            Create a new Cone with a specified baseplane, height and radius.
            </summary>
            <param name="plane">Base plane of cone.</param>
            <param name="height">Height of cone.</param>
            <param name="radius">Radius of cone.</param>
        </member>
        <member name="P:Rhino.Geometry.Cone.Plane">
            <summary>
            Gets or sets the base plane of the Cone.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Cone.Height">
            <summary>
            Gets or sets the height of the cone.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Cone.Radius">
            <summary>
            Gets or sets the Radius of the cone.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Cone.IsValid">
            <summary>
            True is plane is valid, height is not zero and radius is not zero
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Cone.BasePoint">
            <summary>Center of base circle</summary>
        </member>
        <member name="P:Rhino.Geometry.Cone.ApexPoint">
            <summary>Point at tip of the cone</summary>
        </member>
        <member name="P:Rhino.Geometry.Cone.Axis">
            <summary>Unit vector axis of cone</summary>
        </member>
        <member name="M:Rhino.Geometry.Cone.AngleInRadians">
            <summary>
            The angle (in radians) between the axis and the
            side of the cone.
            The angle and the height have the same sign.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Cone.AngleInDegrees">
            <summary>
            The angle (in degrees) between the axis and the
            side of the cone.
            The angle and the height have the same sign.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Cone.ToNurbsSurface">
            <summary>
            Create a Nurbs surface representation of this Cone.
            This is synonymous with calling NurbsSurface.CreateFromCone().
            </summary>
            <returns>A Nurbs surface representation of the cone or null.</returns>
        </member>
        <member name="M:Rhino.Geometry.Cone.ToRevSurface">
            <summary>
            Create a RevSurface representation of this Cone.
            This is synonymous with calling RevSurface.CreateFromCone().
            </summary>
            <returns>A RevSurface representation of the cone or null.</returns>
        </member>
        <member name="M:Rhino.Geometry.Cone.ToBrep(System.Boolean)">
            <summary>
            Get a Brep representation of the cone with a single
            face for the cone, an edge along the cone seam,
            and vertices at the base and apex ends of this seam edge.
            The optional cap is a single face with one circular edge
            starting and ending at the base vertex.
            </summary>
            <param name="capBottom">
            </param>
            <returns>
            </returns>
        </member>
        <member name="T:Rhino.Geometry.CurveOffsetCornerStyle">
            <summary>
            Lists all possible corner styles for curve offsets.
            </summary>
        </member>
        <member name="T:Rhino.Geometry.CurveKnotStyle">
            <summary>
            Lists all possible knot spacing styles for Interpolated curves.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.CurveKnotStyle.Uniform">
            <summary>
            Parameter spacing between consecutive knots is 1.0
            </summary>
        </member>
        <member name="F:Rhino.Geometry.CurveKnotStyle.Chord">
            <summary>
            Chord length spacing, requires degree=3 with CV1 and CVn1 specified.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.CurveKnotStyle.ChordSquareRoot">
            <summary>
            Square root of chord length, requires degree=3 with CV1 and CVn1 specified.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.CurveKnotStyle.UniformPeriodic">
            <summary>
            Periodic with uniform spacing.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.CurveKnotStyle.ChordPeriodic">
            <summary>
            Periodic with chord length spacing.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.CurveKnotStyle.ChordSquareRootPeriodic">
            <summary>
            Periodic with square roor of chord length spacing.
            </summary>
        </member>
        <member name="T:Rhino.Geometry.CurveOrientation">
            <summary>
            Lists all possible closed curve orientations.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.CurveOrientation.Undefined">
            <summary>
            Orientation is undefined.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.CurveOrientation.Clockwise">
            <summary>
            The curve's orientation is clockwise in the xy plane.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.CurveOrientation.CounterClockwise">
            <summary>
            The curve's orientation is counter clockwise in the xy plane.
            </summary>
        </member>
        <member name="T:Rhino.Geometry.PointContainment">
            <summary>
            Enumerates all possible closed curve/point spatial relationships.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.PointContainment.Unset">
            <summary>
            Relation is meaningless.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.PointContainment.Inside">
            <summary>
            Point is on the interior of the region implied by the closed curve.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.PointContainment.Outside">
            <summary>
            Point is on the exterior of the region implied by the closed curve.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.PointContainment.Coincident">
            <summary>
            Point is coincident with the curve and therefor neither inside not outside.
            </summary>
        </member>
        <member name="T:Rhino.Geometry.CurveExtensionStyle">
            <summary>
            Enumerates all possible styles to use during curve Extension.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.CurveExtensionStyle.Line">
            <summary>
            Curve ends will be propagated linearly according to tangents.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.CurveExtensionStyle.Arc">
            <summary>
            Curve ends will be propagated arc-wise according to curvature.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.CurveExtensionStyle.Smooth">
            <summary>
            Curve ends will be propagated smoothly according to curvature.
            </summary>
        </member>
        <member name="T:Rhino.Geometry.CurveSimplifyOptions">
            <summary>
            Enumerates the options to use when simplifying a curve.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.CurveSimplifyOptions.SplitAtFullyMultipleKnots">
            <summary>
            Split NurbsCurves at fully multiple knots.
            Effectively turning single nurbs segments with kinks into multiple segments.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.CurveSimplifyOptions.RebuildLines">
            <summary>
            Replace linear segments with LineCurves.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.CurveSimplifyOptions.RebuildArcs">
            <summary>
            Replace partially circualr segments with ArcCurves.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.CurveSimplifyOptions.RebuildRationals">
            <summary>
            Replace rational nurbscurves with constant weights
            with an equivalent non-rational NurbsCurve.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.CurveSimplifyOptions.AdjustG1">
            <summary>
            Adjust Curves at G1-joins.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.CurveSimplifyOptions.Merge">
            <summary>
            Merge adjacent co-linear lines or co-circular arcs
            or combine consecutive line segments into a polyline.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.CurveSimplifyOptions.All">
            <summary>
            Implies all of the simplification functions will be used.
            </summary>
        </member>
        <member name="T:Rhino.Geometry.CurveEvaluationSide">
            <summary>
            Enumerates the possible options for curve evaluation side.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Curve.Domain">
            <summary>
            Gets or sets the domain of the curve.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Curve.SpanCount">
            <summary>
            Gets the number of non-empty smooth (c-infinity) spans in the curve.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Curve.Degree">
            <summary>
            Gets the maximum algebraic degree of any span
            or a good estimate if curve spans are not algebraic.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Curve.IsClosed">
            <summary>
            Gets a value indicating whether or not this curve is a closed curve.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Curve.IsPeriodic">
            <summary>
            Gets a value indicating whether or not this curve is considered to be Periodic.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Curve.PointAtStart">
            <summary>
            Evaluate point at the start of the curve.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Curve.PointAtEnd">
            <summary>
            Evaluate point at the end of the curve.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Curve.TangentAtStart">
            <summary>Evaluate unit tangent vector at the start of the curve.</summary>
            <returns>Unit tangent vector of the curve at the start point.</returns>
            <remarks>No error handling.</remarks>
        </member>
        <member name="P:Rhino.Geometry.Curve.TangentAtEnd">
            <summary>Evaluate unit tangent vector at the end of the curve.</summary>
            <returns>Unit tangent vector of the curve at the end point.</returns>
            <remarks>No error handling.</remarks>
        </member>
        <member name="M:Rhino.Geometry.Curve.CreateInterpolatedCurve(System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d},System.Int32)">
            <summary>
            Interpolates a sequence of points. Used by InterpCurve Command
            This routine works best when degree=3.
            </summary>
            <param name="degree">The degree of the curve &gt;=1.  Degree must be odd.</param>
            <param name="points">
            Points to interpolate (Count must be &gt;= 2)
            </param>
            <returns>interpolated curve on success. null on failure</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.CreateInterpolatedCurve(System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d},System.Int32,Rhino.Geometry.CurveKnotStyle)">
            <summary>
            Interpolates a sequence of points. Used by InterpCurve Command
            This routine works best when degree=3.
            </summary>
            <param name="degree">The degree of the curve &gt;=1.  Degree must be odd.</param>
            <param name="points">
            Points to interpolate. For periodic curves if the final point is a
            duplicate of the initial point it is  ignored. (Count must be &gt;=2)
            </param>
            <param name="knots">
            Knot-style to use  and specifies if the curve should be periodic.
            </param>
            <returns>interpolated curve on success. null on failure</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.CreateInterpolatedCurve(System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d},System.Int32,Rhino.Geometry.CurveKnotStyle,Rhino.Geometry.Vector3d,Rhino.Geometry.Vector3d)">
            <summary>
            Interpolates a sequence of points. Used by InterpCurve Command
            This routine works best when degree=3.
            </summary>
            <param name="degree">The degree of the curve &gt;=1.  Degree must be odd.</param>
            <param name="points">
            Points to interpolate. For periodic curves if the final point is a
            duplicate of the initial point it is  ignored. (Count must be &gt;=2)
            </param>
            <param name="knots">
            Knot-style to use  and specifies if the curve should be periodic.
            </param>
            <param name="startTangent">
            </param>
            <param name="endTangent">
            </param>
            <returns>interpolated curve on success. null on failure</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.CreateControlPointCurve(System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d},System.Int32)">
            <summary>
            Create a curve from a set of control-point locations.
            </summary>
            <param name="points">Control points.</param>
            <param name="degree">Degree of curve. The number of control points must be at least degree+1.</param>
        </member>
        <member name="M:Rhino.Geometry.Curve.CreateControlPointCurve(System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d})">
            <summary>
            Create a control-point of degree=3 (or less).
            </summary>
            <param name="points">Control points of curve.</param>
        </member>
        <member name="M:Rhino.Geometry.Curve.JoinCurves(System.Collections.Generic.IEnumerable{Rhino.Geometry.Curve})">
            <summary>
            Join a collection of curve segments together.
            </summary>
            <param name="inputCurves">Curve segments to join.</param>
            <returns>An array of curves which contains</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.JoinCurves(System.Collections.Generic.IEnumerable{Rhino.Geometry.Curve},System.Double)">
            <summary>
            Join a collection of curve segments together.
            </summary>
            <param name="inputCurves">Curve segments to join.</param>
            <param name="joinTolerance">Joining tolerance,
            i.e. the distance between segment end-points that is allowed.</param>
            <returns>An array of curves which contains</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.JoinCurves(System.Collections.Generic.IEnumerable{Rhino.Geometry.Curve},System.Double,System.Boolean)">
            <summary>
            Join a collection of curve segments together.
            </summary>
            <param name="inputCurves">Curve segments to join.</param>
            <param name="joinTolerance">Joining tolerance,
            i.e. the distance between segment end-points that is allowed.</param>
            <param name="preserveDirection">
            If true, curve endpoints will be compared to curve startpoints.
            If false, all start and endpoints will be compared and copies of input curves may be reversed in output.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.GetFilletPoints(Rhino.Geometry.Curve,Rhino.Geometry.Curve,System.Double,System.Double,System.Double,System.Double@,System.Double@,Rhino.Geometry.Plane@)">
            <summary>
            Find points at which to cut a pair of curves so that a fillet of given radius can be inserted.
            </summary>
            <param name="curve0">First curve to fillet.</param>
            <param name="curve1">Second curve to fillet.</param>
            <param name="radius">Fillet radius.</param>
            <param name="t0Base">Parameter value for base point on curve0.</param>
            <param name="t1Base">Parameter value for base point on curve1.</param>
            <param name="t0">Parameter value of fillet point on curve 0.</param>
            <param name="t1">Parameter value of fillet point on curve 1.</param>
            <param name="filletPlane">
            The fillet is contained in this plane with the fillet center at the plane origin.
            </param>
            <returns>True on success, false on failure.</returns>
            <remarks>
            A fillet point is a pair of curve parameters (t0,t1) such that there is a circle
            of radius point3 tangent to curve c0 at t0 and tangent to curve c1 at t1. Of all possible
            fillet points this function returns the one which is the closest to the base point
            t0Base, t1Base. Distance from the base point is measured by the sum of arc lengths
            along the two curves.
            </remarks>
        </member>
        <member name="M:Rhino.Geometry.Curve.CreateFillet(Rhino.Geometry.Curve,Rhino.Geometry.Curve,System.Double,System.Double,System.Double)">
            <summary>
            Compute the fillet arc for a curve filleting operation.
            </summary>
            <param name="curve0">First curve to fillet.</param>
            <param name="curve1">Second curve to fillet.</param>
            <param name="radius">Fillet radius.</param>
            <param name="t0Base">Parameter on curve0 where the fillet ought to start (approximately).</param>
            <param name="t1Base">Parameter on curve1 where the fillet ought to end (approximately).</param>
            <returns>The fillet arc on success, or Arc.Unset on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.CreateBooleanUnion(System.Collections.Generic.IEnumerable{Rhino.Geometry.Curve})">
            <summary>
            Calculates the boolean union of two or more closed, planar curves.
            Note, curves must be co-planar.
            </summary>
            <param name="curves">The co-planar curves to union.</param>
            <returns>Result curves on success, null if no union could be calculated.</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.CreateBooleanIntersection(Rhino.Geometry.Curve,Rhino.Geometry.Curve)">
            <summary>
            Calculates the boolean intersection of two closed, planar curves.
            Note, curves must be co-planar.
            </summary>
            <param name="curveA">The first closed, planar curve.</param>
            <param name="curveB">The second closed, planar curve.</param>
            <returns>Result curves on success, null if no intersection could be calculated.</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.CreateBooleanDifference(Rhino.Geometry.Curve,Rhino.Geometry.Curve)">
            <summary>
            Calculates the boolean difference between two closed, planar curves.
            Note, curves must be co-planar.
            </summary>
            <param name="curveA">The first closed, planar curve.</param>
            <param name="curveB">The second closed, planar curve.</param>
            <returns>Result curves on success, null if no difference could be calculated.</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.CreateBooleanDifference(Rhino.Geometry.Curve,System.Collections.Generic.IEnumerable{Rhino.Geometry.Curve})">
            <summary>
            Calculates the boolean difference between a closed planar curve, and a list of closed planar curves.
            Note, curves must be co-planar.
            </summary>
            <param name="curveA">The first closed, planar curve.</param>
            <param name="subtractors">curves to subtract from the first closed curve</param>
            <returns>Result curves on success, null if no difference could be calculated.</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.DoDirectionsMatch(Rhino.Geometry.Curve,Rhino.Geometry.Curve)">
            <summary>
            Compare two curves to see if they travel more or less in the same direction.
            </summary>
            <param name="curveA">First curve to test.</param>
            <param name="curveB">Second curve to test.</param>
            <returns>True if both curves more or less point in the same direction,
            false if they point in the opposite directions.</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.ProjectToBrep(Rhino.Geometry.Curve,Rhino.Geometry.Brep,Rhino.Geometry.Vector3d,System.Double)">
            <summary>
            Project a Curve onto a Brep along a given direction.
            </summary>
            <param name="curve">Curve to project.</param>
            <param name="brep">Brep to project onto.</param>
            <param name="direction">Direction of projection.</param>
            <param name="tolerance">Tolerance to use for projection.</param>
            <returns>An array of projected curves or null if the projection set is empty.</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.ProjectToBrep(Rhino.Geometry.Curve,System.Collections.Generic.IEnumerable{Rhino.Geometry.Brep},Rhino.Geometry.Vector3d,System.Double)">
            <summary>
            Project a Curve onto a collection of Breps along a given direction.
            </summary>
            <param name="curve">Curve to project.</param>
            <param name="breps">Breps to project onto.</param>
            <param name="direction">Direction of projection.</param>
            <param name="tolerance">Tolerance to use for projection.</param>
            <returns>An array of projected curves or null if the projection set is empty.</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.ProjectToBrep(Rhino.Geometry.Curve,System.Collections.Generic.IEnumerable{Rhino.Geometry.Brep},Rhino.Geometry.Vector3d,System.Double,System.Int32[]@)">
            <summary>
            Project a Curve onto a collection of Breps along a given direction.
            </summary>
            <param name="curve">Curve to project.</param>
            <param name="breps">Breps to project onto.</param>
            <param name="direction">Direction of projection.</param>
            <param name="tolerance">Tolerance to use for projection.</param>
            <param name="brepIndices">(out) Integers that identify for each resulting curve which Brep it was projected onto.</param>
            <returns>An array of projected curves or null if the projection set is empty.</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.ProjectToBrep(System.Collections.Generic.IEnumerable{Rhino.Geometry.Curve},System.Collections.Generic.IEnumerable{Rhino.Geometry.Brep},Rhino.Geometry.Vector3d,System.Double)">
            <summary>
            Project a collection of Curves onto a collection of Breps along a given direction.
            </summary>
            <param name="curves">Curves to project.</param>
            <param name="breps">Breps to project onto.</param>
            <param name="direction">Direction of projection.</param>
            <param name="tolerance">Tolerance to use for projection.</param>
            <returns>An array of projected curves or null if the projection set is empty.</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.ProjectToBrep(System.Collections.Generic.IEnumerable{Rhino.Geometry.Curve},System.Collections.Generic.IEnumerable{Rhino.Geometry.Brep},Rhino.Geometry.Vector3d,System.Double,System.Int32[]@,System.Int32[]@)">
            <summary>
            Project a collection of Curves onto a collection of Breps along a given direction.
            </summary>
            <param name="curves">Curves to project.</param>
            <param name="breps">Breps to project onto.</param>
            <param name="direction">Direction of projection.</param>
            <param name="tolerance">Tolerance to use for projection.</param>
            <param name="curveIndices">Index of which curve in the input list was the source for a curve in the return array.</param>
            <param name="brepIndices">Index of which brep was used to generate a curve in the return array.</param>
            <returns>An array of projected curves. Array is empty if the projection set is empty.</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.GetDistancesBetweenCurves(Rhino.Geometry.Curve,Rhino.Geometry.Curve,System.Double,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            </summary>
            <param name="curveA">
            </param>
            <param name="curveB">
            </param>
            <param name="tolerance">
            </param>
            <param name="maxDistance">
            </param>
            <param name="maxDistanceParameterA">
            </param>
            <param name="maxDistanceParameterB">
            </param>
            <param name="minDistance">
            </param>
            <param name="minDistanceParameterA">
            </param>
            <param name="minDistanceParameterB">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.Duplicate">
            <summary>
            Create an exact duplicate of this Curve.
            </summary>
            <seealso cref="M:Rhino.Geometry.Curve.DuplicateCurve" />
        </member>
        <member name="M:Rhino.Geometry.Curve.DuplicateCurve">
            <summary>
            Create an exact duplicate of this curve.
            </summary>
            <returns>An exact copy of this curve.</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.IsLinear">
            <summary>
            Test a curve to see if it is linear to within RhinoMath.ZeroTolerance units (1e-12).
            </summary>
            <returns>True if the curve is linear.</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.IsLinear(System.Double)">
            <summary>
            Test a curve to see if it is linear to within the custom tolerance.
            </summary>
            <param name="tolerance">Tolerance to use when checking linearity.</param>
            <returns>
            True if the ends of the curve are farther than tolerance apart
            and the maximum distance from any point on the curve to
            the line segment connecting the curve ends is &lt;= tolerance.
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.IsPolyline">
            <summary>
            Several types of Curve can have the form of a polyline
            including a degree 1 NurbsCurve, a PolylineCurve,
            and a PolyCurve all of whose segments are some form of
            polyline. IsPolyline tests a curve to see if it can be
            represented as a polyline.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.TryGetPolyline(Rhino.Geometry.Polyline@)">
            <summary>
            Several types of Curve can have the form of a polyline
            including a degree 1 NurbsCurve, a PolylineCurve,
            and a PolyCurve all of whose segments are some form of
            polyline. IsPolyline tests a curve to see if it can be
            represented as a polyline.
            </summary>
            <param name="polyline">
            If true is returned, then the polyline form is returned here.
            </param>
            <returns>True if the curve can be represented as a polyline, false if not.</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.TryGetPolyline(Rhino.Geometry.Polyline@,System.Double[]@)">
            <summary>
            Several types of Curve can have the form of a polyline
            including a degree 1 NurbsCurve, a PolylineCurve,
            and a PolyCurve all of whose segments are some form of
            polyline. IsPolyline tests a curve to see if it can be
            represented as a polyline.
            </summary>
            <param name="polyline">
            If true is returned, then the polyline form is returned here.
            </param>
            <param name="parameters">
            if true is returned, then the parameters of the polyline
            points are returned here
            </param>
            <returns>True if the curve can be represented as a polyline, false if not.</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.IsArc">
            <summary>
            Test a curve to see if it can be represented by an arc or circle within RhinoMath.ZeroTolerance.
            </summary>
            <returns>
            True if the curve can be represented by an Arc or a Circle to within tolerance.
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.IsArc(System.Double)">
            <summary>
            Test a curve to see if it can be represented by an arc or circle within the given tolerance.
            </summary>
            <param name="tolerance">Tolerance to use when checking.</param>
            <returns>
            True if the curve can be represented by an Arc or a Circle to within tolerance.
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.TryGetArc(Rhino.Geometry.Arc@)">
            <summary>
            Try to convert this curve into an Arc using RhinoMath.ZeroTolerance.
            </summary>
            <param name="arc">On success, the Arc will be filled in.</param>
            <returns>True if the curve could be converted into an Arc.</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.TryGetArc(Rhino.Geometry.Arc@,System.Double)">
            <summary>
            Try to convert this curve into an Arc using a custom tolerance.
            </summary>
            <param name="arc">On success, the Arc will be filled in.</param>
            <param name="tolerance">Tolerance to use when checking.</param>
            <returns>True if the curve could be converted into an Arc.</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.TryGetArc(Rhino.Geometry.Plane,Rhino.Geometry.Arc@)">
            <summary>
            Try to convert this curve into an Arc using RhinoMath.ZeroTolerance.
            </summary>
            <param name="plane">Plane in which the comparison is performed.</param>
            <param name="arc">On success, the Arc will be filled in.</param>
            <returns>True if the curve could be converted into an Arc within the given plane.</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.TryGetArc(Rhino.Geometry.Plane,Rhino.Geometry.Arc@,System.Double)">
            <summary>
            Try to convert this curve into an Arc using a custom tolerance.
            </summary>
            <param name="plane">Plane in which the comparison is performed.</param>
            <param name="arc">On success, the Arc will be filled in.</param>
            <param name="tolerance">Tolerance to use when checking.</param>
            <returns>True if the curve could be converted into an Arc within the given plane.</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.IsCircle">
            <summary>
            Test a curve to see if it can be represented by a circle within RhinoMath.ZeroTolerance.
            </summary>
            <returns>
            True if the Curve can be represented by a circle within tolerance.
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.IsCircle(System.Double)">
            <summary>
            Test a curve to see if it can be represented by a circle within the given tolerance.
            </summary>
            <param name="tolerance">Tolerance to use when checking.</param>
            <returns>
            True if the curve can be represented by a Circle to within tolerance.
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.TryGetCircle(Rhino.Geometry.Circle@)">
            <summary>
            Try to convert this curve into a Circle using RhinoMath.ZeroTolerance.
            </summary>
            <param name="circle">On success, the Circle will be filled in.</param>
            <returns>True if the curve could be converted into a Circle.</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.TryGetCircle(Rhino.Geometry.Circle@,System.Double)">
            <summary>
            Try to convert this curve into a Circle using a custom tolerance.
            </summary>
            <param name="circle">On success, the Circle will be filled in.</param>
            <param name="tolerance">Tolerance to use when checking.</param>
            <returns>True if the curve could be converted into a Circle within tolerance.</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.IsEllipse">
            <summary>
            Test a curve to see if it can be represented by an ellipse within RhinoMath.ZeroTolerance.
            </summary>
            <returns>
            True if the Curve can be represented by an ellipse within tolerance.
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.IsEllipse(System.Double)">
            <summary>
            Test a curve to see if it can be represented by an ellipse within a given tolerance.
            </summary>
            <param name="tolerance">Tolerance to use for checking.</param>
            <returns>
            True if the Curve can be represented by an ellipse within tolerance.
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.TryGetEllipse(Rhino.Geometry.Ellipse@)">
            <summary>
            Try to convert this curve into an Ellipse within RhinoMath.ZeroTolerance.
            </summary>
            <param name="ellipse">On success, the Ellipse will be filled in.</param>
            <returns>True if the curve could be converted into an Ellipse.</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.TryGetEllipse(Rhino.Geometry.Ellipse@,System.Double)">
            <summary>
            Try to convert this curve into an Ellipse using a custom tolerance.
            </summary>
            <param name="ellipse">On success, the Ellipse will be filled in.</param>
            <param name="tolerance">Tolerance to use when checking.</param>
            <returns>True if the curve could be converted into an Ellipse.</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.TryGetEllipse(Rhino.Geometry.Plane,Rhino.Geometry.Ellipse@)">
            <summary>
            Try to convert this curve into an Ellipse within RhinoMath.ZeroTolerance.
            </summary>
            <param name="plane">Plane in which the comparison is performed.</param>
            <param name="ellipse">On success, the Ellipse will be filled in.</param>
            <returns>True if the curve could be converted into an Ellipse within the given plane.</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.TryGetEllipse(Rhino.Geometry.Plane,Rhino.Geometry.Ellipse@,System.Double)">
            <summary>
            Try to convert this curve into an Ellipse using a custom tolerance.
            </summary>
            <param name="plane">Plane in which the comparison is performed.</param>
            <param name="ellipse">On success, the Ellipse will be filled in.</param>
            <param name="tolerance">Tolerance to use when checking.</param>
            <returns>True if the curve could be converted into an Ellipse within the given plane.</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.IsPlanar">
            <summary>Test a curve for planarity.</summary>
            <returns>
            True if the curve is planar (flat) to within RhinoMath.ZeroTolerance units (1e-12).
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.IsPlanar(System.Double)">
            <summary>Test a curve for planarity.</summary>
            <param name="tolerance">Tolerance to use when checking.</param>
            <returns>
            True if there is a plane such that the maximum distance from the curve to the plane is &lt;= tolerance.
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.TryGetPlane(Rhino.Geometry.Plane@)">
            <summary>Test a curve for planarity and return the plane.</summary>
            <param name="plane">On success, the plane parameters are filled in.</param>
            <returns>
            True if there is a plane such that the maximum distance from the curve to the plane is &lt;= RhinoMath.ZeroTolerance.
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.TryGetPlane(Rhino.Geometry.Plane@,System.Double)">
            <summary>Test a curve for planarity and return the plane.</summary>
            <param name="plane">On success, the plane parameters are filled in.</param>
            <param name="tolerance">Tolerance to use when checking.</param>
            <returns>
            True if there is a plane such that the maximum distance from the curve to the plane is &lt;= tolerance.
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.IsInPlane(Rhino.Geometry.Plane)">
            <summary>Test a curve to see if it lies in a specific plane.</summary>
            <param name="testPlane">Plane to test for.</param>
            <returns>
            True if the maximum distance from the curve to the testPlane is &lt;= RhinoMath.ZeroTolerance.
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.IsInPlane(Rhino.Geometry.Plane,System.Double)">
            <summary>Test a curve to see if it lies in a specific plane.</summary>
            <param name="testPlane">Plane to test for.</param>
            <param name="tolerance">Tolerance to use when checking.</param>
            <returns>
            True if the maximum distance from the curve to the testPlane is &lt;= tolerance.
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.ChangeClosedCurveSeam(System.Double)">
            <summary>
            If this curve is closed, then modify it so that the start/end point is at curve parameter t.
            </summary>
            <param name="t">
            Curve parameter of new start/end point. The returned curves domain will start at t.
            </param>
            <returns>True on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.IsClosable(System.Double)">
            <summary>
            Decide if it makes sense to close off this curve by moving the endpoint
            to the start based on start-end gap size and length of curve as
            approximated by chord defined by 6 points.
            </summary>
            <param name="tolerance">
            Maximum allowable distance between start and end.
            If start - end gap is greater than tolerance, this function will return False.
            </param>
            <returns>True if start and end points are close enough based on above conditions.</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.IsClosable(System.Double,System.Double,System.Double)">
            <summary>
            Decide if it makes sense to close off this curve by moving the endpoint
            to the start based on start-end gap size and length of curve as
            approximated by chord defined by 6 points.
            </summary>
            <param name="tolerance">
            Maximum allowable distance between start and end.
            If start - end gap is greater than tolerance, this function will return False.
            </param>
            <param name="minimumAbsoluteSize">
            If greater than 0.0 and none of the interior sampled points are at
            least minimumAbsoluteSize from start, this function will return False.
            </param>
            <param name="minimumRelativeSize">
            If greater than 1.0 and chord length is less than
            minimumRelativeSize*gap, this function will return False.
            </param>
            <returns>True if start and end points are close enough based on above conditions.</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.MakeClosed(System.Double)">
            <summary>
            If IsClosed, just return True. Otherwise, decide if curve can be closed as
            follows: Linear curves polylinear curves with 2 segments, Nurbs with 3 or less
            control points cannot be made closed. Also, if tolerance &gt; 0 and the gap between
            start and end is larger than tolerance, curve cannot be made closed.
            Adjust the curve's endpoint to match its start point.
            </summary>
            <param name="tolerance">
            If nonzero, and the gap is more than tolerance, curve cannot be made closed.
            </param>
            <returns>True on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.ClosedCurveOrientation(Rhino.Geometry.Vector3d)">
            <summary>
            Determine the orientation (counterclockwise or clockwise) of a closed planar curve in a given plane.
            Only works with simple (no self intersections) closed planar curves.
            </summary>
            <param name="upDirection">
            </param>
            <returns>The orientation of this curve with respect to a defined up direction.</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.ClosedCurveOrientation(Rhino.Geometry.Plane)">
            <summary>
            Determine the orientation (counterclockwise or clockwise) of a closed planar curve in a given plane.
            Only works with simple (no self intersections) closed planar curves.
            </summary>
            <param name="plane">
            The plane in which to solve the orientation.
            </param>
            <returns>The orientation of this curve in the given plane.</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.ClosedCurveOrientation(Rhino.Geometry.Transform)">
            <summary>
            Determine the orientation (counterclockwise or clockwise) of a closed planar curve.
            Only works with simple (no self intersections) closed planar curves.
            </summary>
            <param name="xform">
            Transformation to map the curve to the xy plane. If the curve is parallel
            to the xy plane, you may pass Identity matrix.
            </param>
            <returns>The orientation of this curve in the world xy-plane.</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.Reverse">
            <summary>
            Reverse the direction of the curve.
            </summary>
            <returns>True on success, false on failure.</returns>
            <remarks>If reversed, the domain changes from [a,b] to [-b,-a]</remarks>
        </member>
        <member name="M:Rhino.Geometry.Curve.GetClosestPoint(Rhino.Geometry.Point3d,System.Double@)">
            <summary>
            This method is Obsolete, use ClosestPoint() instead.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Curve.ClosestPoint(Rhino.Geometry.Point3d,System.Double@)">
            <summary>
            Find parameter of the point on a curve that is closest to testPoint.
            If the maximumDistance parameter is &gt; 0, then only points whose distance
            to the given point is &lt;= maximumDistance will be returned.  Using a
            positive value of maximumDistance can substantially speed up the search.
            </summary>
            <param name="testPoint">Point to search from.</param>
            <param name="t">Parameter of local closest point.</param>
            <returns>True on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.GetClosestPoint(Rhino.Geometry.Point3d,System.Double@,System.Double)">
            <summary>
            This method is Obsolete, use ClosestPoint() instead.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Curve.ClosestPoint(Rhino.Geometry.Point3d,System.Double@,System.Double)">
            <summary>
            Find parameter of the point on a curve that is closest to testPoint.
            If the maximumDistance parameter is &gt; 0, then only points whose distance
            to the given point is &lt;= maximumDistance will be returned.  Using a
            positive value of maximumDistance can substantially speed up the search.
            </summary>
            <param name="testPoint">Point to project.</param>
            <param name="t">parameter of local closest point returned here</param>
            <param name="maximumDistance">
            </param>
            <returns>True on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.Contains(Rhino.Geometry.Point3d)">
            <summary>
            Compute the relationship between a point and a closed curve region.
            This curve must be closed or the return value will be Unset.
            Both curve and point are projected to the World XY plane.
            </summary>
            <param name="testPoint">Point to test.</param>
            <returns>Relationship between point and curve region.</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.Contains(Rhino.Geometry.Point3d,Rhino.Geometry.Plane)">
            <summary>
            Compute the relationship between a point and a closed curve region.
            This curve must be closed or the return value will be Unset.
            </summary>
            <param name="testPoint">Point to test.</param>
            <param name="plane">Plane in in which to compare point and region.</param>
            <returns>Relationship between point and curve region.</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.Contains(Rhino.Geometry.Point3d,Rhino.Geometry.Plane,System.Double)">
            <summary>
            Compute the relationship between a point and a closed curve region.
            This curve must be closed or the return value will be Unset.
            </summary>
            <param name="testPoint">Point to test.</param>
            <param name="plane">Plane in in which to compare point and region.</param>
            <param name="tolerance">Tolerance to use during comparison.</param>
            <returns>Relationship between point and curve region.</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.PointAt(System.Double)">
            <summary>Evaluate point at a curve parameter.</summary>
            <param name="t">Evaluation parameter.</param>
            <returns>Point (location of curve at the parameter t).</returns>
            <remarks>No error handling.</remarks>
        </member>
        <member name="M:Rhino.Geometry.Curve.PointAtLength(System.Double)">
            <summary>
            Get a point at a certain length along the curve. The length must be
            non-negative and less than or equal to the length of the curve.
            Lengths will not be wrapped when the curve is closed or periodic.
            </summary>
            <param name="length">Length along the curve between the start point and the returned point.</param>
            <returns>Point on the curve at the specified length from the start point or Poin3d.Unset on failure.</returns>
            <example>
                <code source="examples\vbnet\ex_arclengthpoint.vb" lang="vbnet" />
                <code source="examples\cs\ex_arclengthpoint.cs" lang="cs" />
                <code source="examples\py\ex_arclengthpoint.py" lang="py" />
            </example>
        </member>
        <member name="M:Rhino.Geometry.Curve.PointAtNormalizedLength(System.Double)">
            <summary>
            Get a point at a certain normalized length along the curve. The length must be
            between or including 0.0 and 1.0, where 0.0 equals the start of the curve and
            1.0 equals the end of the curve.
            </summary>
            <param name="length">Normalized length along the curve between the start point and the returned point.</param>
            <returns>Point on the curve at the specified normalized length from the start point or Poin3d.Unset on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.SetStartPoint(Rhino.Geometry.Point3d)">
            <summary>Force the curve to start at a specified point.
            Not all curve types support this operation.</summary>
            <param name="point">New start point of curve.</param>
            <returns>True on success, false on failure.</returns>
            <remarks>Some start points cannot be moved. Be sure to check return code.</remarks>
        </member>
        <member name="M:Rhino.Geometry.Curve.SetEndPoint(Rhino.Geometry.Point3d)">
            <summary>Force the curve to end at a specified point.
            Not all curve types support this operation.</summary>
            <param name="point">New end point of curve.</param>
            <returns>True on success, false on failure.</returns>
            <remarks>Some end points cannot be moved. Be sure to check return code</remarks>
        </member>
        <member name="M:Rhino.Geometry.Curve.TangentAt(System.Double)">
            <summary>Evaluate unit tangent vector at a curve parameter.</summary>
            <param name="t">Evaluation parameter.</param>
            <returns>Unit tangent vector of the curve at the parameter t.</returns>
            <remarks>No error handling.</remarks>
        </member>
        <member name="M:Rhino.Geometry.Curve.FrameAt(System.Double,Rhino.Geometry.Plane@)">
            <summary>Return a 3d frame at a parameter.</summary>
            <param name="t">Evaluation parameter.</param>
            <param name="plane">The frame is returned here.</param>
            <returns>True on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.DerivativeAt(System.Double)">
            <summary>Evaluate the first derivative at a curve parameter.</summary>
            <param name="t">Evaluation parameter.</param>
            <returns>First derivative of the curve at the parameter t.</returns>
            <remarks>No error handling.</remarks>
        </member>
        <member name="M:Rhino.Geometry.Curve.DerivativeAt(System.Double,System.Int32)">
            <summary>
            Evaluate the derivatives at the specified curve parameter.
            </summary>
            <param name="t">Curve parameter to evaluate.</param>
            <param name="derivativeCount">Number of derivatives to evaluate, must be at least 0.</param>
            <returns>An array of vectors that represents all the derivatives starting at zero.</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.DerivativeAt(System.Double,System.Int32,Rhino.Geometry.CurveEvaluationSide)">
            <summary>
            Evaluate the derivatives at the specified curve parameter.
            </summary>
            <param name="t">Curve parameter to evaluate.</param>
            <param name="derivativeCount">Number of derivatives to evaluate, must be at least 0.</param>
            <param name="side">Side of parameter to evaluate. If the parameter is at a kink,
            it makes a big difference whether the evaluation is from below or above.</param>
            <returns>An array of vectors that represents all the derivatives starting at zero.</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.CurvatureAt(System.Double)">
            <summary>Evaluate the curvature vector at a curve parameter.</summary>
            <param name="t">Evaluation parameter.</param>
            <returns>Curvature vector of the curve at the parameter t.</returns>
            <remarks>No error handling.</remarks>
        </member>
        <member name="M:Rhino.Geometry.Curve.GetPerpendicularFrames(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Get a collection of perpendicular frames along the curve. Perpendicular frames
            are also known as 'Zero-twisting frames' and they minimize rotation from one frame to the next.
            </summary>
            <param name="parameters">A collection of <i>strictly increasing</i> curve parameters to place perpendicular frames on.</param>
            <returns>An array of perpendicular frames on success or null on failure.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown when the curve parameters are not increasing.</exception>
        </member>
        <member name="M:Rhino.Geometry.Curve.IsContinuous(Rhino.Geometry.Continuity,System.Double)">
            <summary>
            Test continuity at a curve parameter value.
            </summary>
            <param name="continuityType">Type of continuity to test for.</param>
            <param name="t">Parameter to test.</param>
            <returns>
            True if the curve has at least the c type continuity at the parameter t.
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.GetNextDiscontinuity(Rhino.Geometry.Continuity,System.Double,System.Double,System.Double@)">
            <summary>
            Search for a derivative, tangent, or curvature discontinuity.
            </summary>
            <param name="continuityType">Type of continuity to search for.</param>
            <param name="t0">
            Search begins at t0. If there is a discontinuity at t0, it will be ignored. This makes it
            possible to repeatedly call GetNextDiscontinuity() and step through the discontinuities.
            </param>
            <param name="t1">
            (t0 != t1)  If there is a discontinuity at t1 it will be ignored unless continuityType is
            a locus discontinuity type and t1 is at the start or end of the curve.
            </param>
            <param name="t">If a discontinuity is found, then t reports the parameter at the discontinuity.</param>
            <returns>
            Parametric continuity tests c = (C0_continuous, ..., G2_continuous):
            true if a parametric discontinuity was found strictly between t0 and t1. Note well that
            all curves are parametrically continuous at the ends of their domains.
            Locus continuity tests c = (C0_locus_continuous, ...,G2_locus_continuous):
            true if a locus discontinuity was found strictly between t0 and t1 or at t1 is the at the end
            of a curve. Note well that all open curves (IsClosed()=false) are locus discontinuous at the
            ends of their domains.  All closed curves (IsClosed()=true) are at least C0_locus_continuous at
            the ends of their domains.
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.GetLength">
            <summary>
            Get the length of the curve with a fractional tolerance of 1.0e-8
            </summary>
            <returns>The length of the curve on success, or zero on failure.</returns>
            <example>
                <code source="examples\vbnet\ex_arclengthpoint.vb" lang="vbnet" />
                <code source="examples\cs\ex_arclengthpoint.cs" lang="cs" />
                <code source="examples\py\ex_arclengthpoint.py" lang="py" />
            </example>
        </member>
        <member name="M:Rhino.Geometry.Curve.GetLength(System.Double)">
            <summary>Get the length of the curve.</summary>
            <param name="fractionalTolerance">
            Desired fractional precision.
            fabs(("exact" length from start to t) - arc_length)/arc_length &lt;= fractionalTolerance.
            </param>
            <returns>The length of the curve on success, or zero on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.GetLength(Rhino.Geometry.Interval)">
            <summary>Get the length of a sub-section of the curve with a fractional tolerance of 1e-8.</summary>
            <param name="subdomain">
            The calculation is performed on the specified sub-domain of the curve (must be non-decreasing).
            </param>
            <returns>The length of the sub-curve on success, or zero on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.GetLength(System.Double,Rhino.Geometry.Interval)">
            <summary>Get the length of a sub-section of the curve.</summary>
            <param name="fractionalTolerance">
            Desired fractional precision.
            fabs(("exact" length from start to t) - arc_length)/arc_length &lt;= fractionalTolerance.
            </param>
            <param name="subdomain">
            The calculation is performed on the specified sub-domain of the curve (must be non-decreasing).
            </param>
            <returns>The length of the sub-curve on success, or zero on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.IsShort(System.Double)">
            <summary>Used to quickly find short curves.</summary>
            <param name="tolerance">Length threshold value for "shortness".</param>
            <returns>True if the length of the curve is &lt;= tolerance.</returns>
            <remarks>Faster than calling Length() and testing the result.</remarks>
            <example>
                <code source="examples\vbnet\ex_dividebylength.vb" lang="vbnet" />
                <code source="examples\cs\ex_dividebylength.cs" lang="cs" />
                <code source="examples\py\ex_dividebylength.py" lang="py" />
            </example>
        </member>
        <member name="M:Rhino.Geometry.Curve.IsShort(System.Double,Rhino.Geometry.Interval)">
            <summary>Used to quickly find short curves.</summary>
            <param name="tolerance">Length threshold value for "shortness".</param>
            <param name="subdomain">
            The test is performed on the interval that is the intersection of subdomain with Domain()
            </param>
            <returns>True if the length of the curve is &lt;= tolerance.</returns>
            <remarks>Faster than calling Length() and testing the result.</remarks>
        </member>
        <member name="M:Rhino.Geometry.Curve.RemoveShortSegments(System.Double)">
            <summary>
            Looks for segments that are shorter than tolerance that can be removed.
            Does not change the domain, but it will change the relative parameterization.
            </summary>
            <param name="tolerance">Tolerance which defines "short" segments.</param>
            <returns>
            True if removable short segments were found.
            False if no removable short segments were found.
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.LengthParameter(System.Double,System.Double@)">
            <summary>
            Get the parameter along the curve which coincides with a given length along the curve.
            A fractional tolerance of 1e-8 is used in this version of the function.
            </summary>
            <param name="segmentLength">
            Length of segment to measure. Must be less than or equal to the length of the curve.
            </param>
            <param name="t">
            Parameter such that the length of the curve from the curve start point to t equals length.
            </param>
            <returns>True on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.LengthParameter(System.Double,System.Double@,System.Double)">
            <summary>
            Get the parameter along the curve which coincides with a given length along the curve.
            </summary>
            <param name="segmentLength">
            Length of segment to measure. Must be less than or equal to the length of the curve.
            </param>
            <param name="t">
            Parameter such that the length of the curve from the curve start point to t equals s.
            </param>
            <param name="fractionalTolerance">
            Desired fractional precision.
            fabs(("exact" length from start to t) - arc_length)/arc_length &lt;= fractionalTolerance
            </param>
            <returns>True on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.LengthParameter(System.Double,System.Double@,Rhino.Geometry.Interval)">
            <summary>
            Get the parameter along the curve which coincides with a given length along the curve.
            A fractional tolerance of 1e-8 is used in this version of the function
            </summary>
            <param name="segmentLength">
            Length of segment to measure. Must be less than or equal to the length of the subdomain.
            </param>
            <param name="t">
            Parameter such that the length of the curve from the start of the subdomain to t is s.
            </param>
            <param name="subdomain">
            The calculation is performed on the specified sub-domain of the curve rather than the whole curve.
            </param>
            <returns>True on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.LengthParameter(System.Double,System.Double@,System.Double,Rhino.Geometry.Interval)">
            <summary>
            Get the parameter along the curve which coincides with a given length along the curve.
            </summary>
            <param name="segmentLength">
            Length of segment to measure. Must be less than or equal to the length of the subdomain.
            </param>
            <param name="t">
            Parameter such that the length of the curve from the start of the subdomain to t is s
            </param>
            <param name="fractionalTolerance">
            Desired fractional precision.
            fabs(("exact" length from start to t) - arc_length)/arc_length &lt;= fractionalTolerance
            </param>
            <param name="subdomain">
            The calculation is performed on the specified sub-domain of the curve rather than the whole curve.
            </param>
            <returns>True on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.NormalizedLengthParameter(System.Double,System.Double@)">
            <summary>
            Input the parameter of the point on the curve that is a prescribed arc length from the start of the curve.
            A fractional tolerance of 1e-8 is used in this version of the function.
            </summary>
            <param name="s">
            Normalized arc length parameter.
            E.g., 0 = start of curve, 1/2 = midpoint of curve, 1 = end of curve.
            </param>
            <param name="t">
            Parameter such that the length of the curve from its start to t is arc_length
            </param>
            <returns>True on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.NormalizedLengthParameter(System.Double,System.Double@,System.Double)">
            <summary>
            Input the parameter of the point on the curve that is a prescribed arc length from the start of the curve.
            </summary>
            <param name="s">
            Normalized arc length parameter.
            E.g., 0 = start of curve, 1/2 = midpoint of curve, 1 = end of curve.
            </param>
            <param name="t">
            Parameter such that the length of the curve from its start to t is arc_length.
            </param>
            <param name="fractionalTolerance">
            Desired fractional precision.
            fabs(("exact" length from start to t) - arc_length)/arc_length &lt;= fractionalTolerance.
            </param>
            <returns>True on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.NormalizedLengthParameter(System.Double,System.Double@,Rhino.Geometry.Interval)">
            <summary>
            Input the parameter of the point on the curve that is a prescribed arc length from the start of the curve.
            A fractional tolerance of 1e-8 is used in this version of the function.
            </summary>
            <param name="s">
            Normalized arc length parameter.
            E.g., 0 = start of curve, 1/2 = midpoint of curve, 1 = end of curve.
            </param>
            <param name="t">
            Parameter such that the length of the curve from its start to t is arc_length.
            </param>
            <param name="subdomain">
            The calculation is performed on the specified sub-domain of the curve.
            </param>
            <returns>True on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.NormalizedLengthParameter(System.Double,System.Double@,System.Double,Rhino.Geometry.Interval)">
            <summary>
            Input the parameter of the point on the curve that is a prescribed arc length from the start of the curve.
            </summary>
            <param name="s">
            Normalized arc length parameter.
            E.g., 0 = start of curve, 1/2 = midpoint of curve, 1 = end of curve.
            </param>
            <param name="t">
            Parameter such that the length of the curve from its start to t is arc_length.
            </param>
            <param name="fractionalTolerance">
            Desired fractional precision.
            fabs(("exact" length from start to t) - arc_length)/arc_length &lt;= fractionalTolerance.
            </param>
            <param name="subdomain">
            The calculation is performed on the specified sub-domain of the curve.
            </param>
            <returns>True on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.NormalizedLengthParameters(System.Double[],System.Double)">
            <summary>
            Input the parameter of the point on the curve that is a prescribed arc length from the start of the curve.
            A fractional tolerance of 1e-8 is used in this version of the function.
            </summary>
            <param name="s">
            Array of normalized arc length parameters.
            E.g., 0 = start of curve, 1/2 = midpoint of curve, 1 = end of curve.
            </param>
            <param name="absoluteTolerance">
            If absoluteTolerance &gt; 0, then the difference between (s[i+1]-s[i])*curve_length
            and the length of the curve segment from t[i] to t[i+1] will be &lt;= absoluteTolerance.
            </param>
            <returns>
            If successful, array of curve parameters such that the length of the curve from its start to t[i] is s[i]*curve_length.
            Null on failure.
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.NormalizedLengthParameters(System.Double[],System.Double,System.Double)">
            <summary>
            Input the parameter of the point on the curve that is a prescribed arc length from the start of the curve.
            </summary>
            <param name="s">
            Array of normalized arc length parameters.
            E.g., 0 = start of curve, 1/2 = midpoint of curve, 1 = end of curve.
            </param>
            <param name="absoluteTolerance">
            If absoluteTolerance &gt; 0, then the difference between (s[i+1]-s[i])*curve_length
            and the length of the curve segment from t[i] to t[i+1] will be &lt;= absoluteTolerance.
            </param>
            <param name="fractionalTolerance">
            Desired fractional precision for each segment.
            fabs("true" length - actual length)/(actual length) &lt;= fractionalTolerance.
            </param>
            <returns>
            If successful, array of curve parameters such that the length of the curve from its start to t[i] is s[i]*curve_length.
            Null on failure.
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.NormalizedLengthParameters(System.Double[],System.Double,Rhino.Geometry.Interval)">
            <summary>
            Input the parameter of the point on the curve that is a prescribed arc length from the start of the curve.
            A fractional tolerance of 1e-8 is used in this version of the function.
            </summary>
            <param name="s">
            Array of normalized arc length parameters.
            E.g., 0 = start of curve, 1/2 = midpoint of curve, 1 = end of curve.
            </param>
            <param name="absoluteTolerance">
            If absoluteTolerance &gt; 0, then the difference between (s[i+1]-s[i])*curve_length
            and the length of the curve segment from t[i] to t[i+1] will be &lt;= absoluteTolerance.
            </param>
            <param name="subdomain">
            The calculation is performed on the specified sub-domain of the curve.
            A 0.0 s value corresponds to subdomain-&gt;Min() and a 1.0 s value corresponds to subdomain-&gt;Max().
            </param>
            <returns>
            If successful, array of curve parameters such that the length of the curve from its start to t[i] is s[i]*curve_length.
            Null on failure.
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.NormalizedLengthParameters(System.Double[],System.Double,System.Double,Rhino.Geometry.Interval)">
            <summary>
            Input the parameter of the point on the curve that is a prescribed arc length from the start of the curve.
            </summary>
            <param name="s">
            Array of normalized arc length parameters.
            E.g., 0 = start of curve, 1/2 = midpoint of curve, 1 = end of curve.
            </param>
            <param name="absoluteTolerance">
            If absoluteTolerance &gt; 0, then the difference between (s[i+1]-s[i])*curve_length
            and the length of the curve segment from t[i] to t[i+1] will be &lt;= absoluteTolerance.
            </param>
            <param name="fractionalTolerance">
            Desired fractional precision for each segment.
            fabs("true" length - actual length)/(actual length) &lt;= fractionalTolerance.
            </param>
            <param name="subdomain">
            The calculation is performed on the specified sub-domain of the curve.
            A 0.0 s value corresponds to subdomain-&gt;Min() and a 1.0 s value corresponds to subdomain-&gt;Max().
            </param>
            <returns>
            If successful, array of curve parameters such that the length of the curve from its start to t[i] is s[i]*curve_length.
            Null on failure.
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.DivideByCount(System.Int32,System.Boolean)">
            <summary>
            Divide the curve into a number of equal-length segments.
            </summary>
            <param name="segmentCount">Segment count. Note that the number of division points may differ from the segment count.</param>
            <param name="includeEnds">If true, then the points at the start and end of the curve are included.</param>
            <returns>
            List of curve parameters at the division points on success, null on failure.
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.DivideByCount(System.Int32,System.Boolean,Rhino.Geometry.Point3d[]@)">
            <summary>
            Divide the curve into a number of equal-length segments.
            </summary>
            <param name="segmentCount">Segment count. Note that the number of division points may differ from the segment count.</param>
            <param name="includeEnds">If true, then the points at the start and end of the curve are included.</param>
            <param name="points">A list of division points. If the function returns successfully, this point-array will be filled in.</param>
            <returns>Array containing division curve parameters on success, null on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.DivideByLength(System.Double,System.Boolean)">
            <summary>
            Divide the curve into specific length segments.
            </summary>
            <param name="segmentLength">The length of each and every segment (except potentially the last one).</param>
            <param name="includeStart">If true, then the points at the start of the curve is included.</param>
            <returns>Array containing division curve parameters if successful, null on failure.</returns>
            <example>
                <code source="examples\vbnet\ex_dividebylength.vb" lang="vbnet" />
                <code source="examples\cs\ex_dividebylength.cs" lang="cs" />
                <code source="examples\py\ex_dividebylength.py" lang="py" />
            </example>
        </member>
        <member name="M:Rhino.Geometry.Curve.DivideByLength(System.Double,System.Boolean,Rhino.Geometry.Point3d[]@)">
            <summary>
            Divide the curve into specific length segments.
            </summary>
            <param name="segmentLength">The length of each and every segment (except potentially the last one).</param>
            <param name="includeStart">If true, then the point at the start of the curve is included.</param>
            <param name="points">If function is successful, points at each parameter value are returned in points</param>
            <returns>Array containing division curve parameters if successful, null on failure.</returns>
            <example>
                <code source="examples\vbnet\ex_dividebylength.vb" lang="vbnet" />
                <code source="examples\cs\ex_dividebylength.cs" lang="cs" />
                <code source="examples\py\ex_dividebylength.py" lang="py" />
            </example>
        </member>
        <member name="M:Rhino.Geometry.Curve.DivideEquidistant(System.Double)">
            <summary>
            Calculates 3d points on a curve where the linear distance between the points is equal
            </summary>
            <param name="distance">The distance betwen division points</param>
            <returns>
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.DivideAsContour(Rhino.Geometry.Point3d,Rhino.Geometry.Point3d,System.Double)">
            <summary>
            Contour divide the curve by defining a contour line
            </summary>
            <param name="contourStart">
            </param>
            <param name="contourEnd">
            </param>
            <param name="interval">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.GetCurveParameterFromNurbsFormParameter(System.Double,System.Double@)">
            <summary>
            Convert a NURBS curve parameter to a curve parameter.
            </summary>
            <param name="nurbsParameter">Nurbs form parameter.</param>
            <param name="curveParameter">Curve parameter</param>
            <returns>True on success, false on failure.</returns>
            <remarks>
            If HasNurbForm returns 2, this function converts the curve parameter to the NURBS curve parameter.
            </remarks>
        </member>
        <member name="M:Rhino.Geometry.Curve.GetNurbsFormParameterFromCurveParameter(System.Double,System.Double@)">
            <summary>Convert a curve parameter to a NURBS curve parameter</summary>
            <param name="curveParameter">Curve parameter</param>
            <param name="nurbsParameter">Nurbs form parameter</param>
            <returns>True on success, false on failure.</returns>
            <remarks>
            If GetNurbForm returns 2, this function converts the curve parameter to the NURBS curve parameter.
            </remarks>
        </member>
        <member name="M:Rhino.Geometry.Curve.Trim(System.Double,System.Double)">
            <summary>
            Removes portions of the curve outside the specified interval.
            </summary>
            <param name="t0">
            Start of the trimming interval. Portions of the curve before curve(t0) are removed.
            </param>
            <param name="t1">
            End of the trimming interval. Portions of the curve after curve(t1) are removed.
            </param>
            <returns>Trimmed portion of this curve is successfull, null on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.Trim(Rhino.Geometry.Interval)">
            <summary>
            Removes portions of the curve outside the specified interval.
            </summary>
            <param name="domain">
            Trimming interval. Portions of the curve before curve(domain[0])
            and after curve(domain[1]) are removed.
            </param>
            <returns>Trimmed portion of this curve is successfull, null on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.Split(System.Double)">
            <summary>
            Splits (divides) the curve at the specified parameter.
            The parameter must be in the interior of the curve's domain.
            </summary>
            <param name="t">
            Parameter to split the curve at in the interval returned by Domain().
            </param>
            <returns>
            Two curves on success, null on failure.
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.Split(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Splits (divides) the curve at a series of specified parameters.
            The parameter must be in the interior of the curve's domain.
            </summary>
            <param name="t">
            Parameters to split the curve at in the interval returned by Domain().
            </param>
            <returns>
            Multiple curves on success, null on failure.
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.Extend(System.Double,System.Double)">
            <summary>
            Where possible, analytically extends curve to include the given domain.
            This will not work on closed curves. The original curve will be identical to the
            restriction of the resulting curve to the original curve domain.
            </summary>
            <param name="t0">Start of extension domain, if the start is not inside the
            Domain of this curve, an attempt will be made to extend the curve.</param>
            <param name="t1">End of extension domain, if the end is not inside the
            Domain of this curve, an attempt will be made to extend the curve.</param>
            <returns>Extended curve on success, null on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.Extend(Rhino.Geometry.Interval)">
            <summary>
            Where possible, analytically extends curve to include the given domain.
            This will not work on closed curves. The original curve will be identical to the
            restriction of the resulting curve to the original curve domain.
            </summary>
            <param name="domain">Extension domain.</param>
            <returns>Extended curve on success, null on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.Extend(Rhino.Geometry.CurveEnd,System.Double,Rhino.Geometry.CurveExtensionStyle)">
            <summary>
            Extend a curve by a specific length.
            </summary>
            <param name="side">Curve end to extend.</param>
            <param name="length">Length to add to the curve end.</param>
            <param name="style">Extension style.</param>
            <returns>A curve with extended ends or null on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.Extend(Rhino.Geometry.CurveEnd,Rhino.Geometry.CurveExtensionStyle,System.Collections.Generic.IEnumerable{Rhino.Geometry.GeometryBase})">
            <summary>
            Extend a curve until it intersects a collection of objects
            </summary>
            <param name="side">The end of the curve to extend.</param>
            <param name="style">
            </param>
            <param name="geometry">A collection of objects. Allowable object types are Curve, Surface, Brep.</param>
            <returns>New extended curve result on success, null on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.Extend(Rhino.Geometry.CurveEnd,Rhino.Geometry.CurveExtensionStyle,Rhino.Geometry.Point3d)">
            <summary>
            Extend a curve to a point
            </summary>
            <param name="side">The end of the curve to extend.</param>
            <param name="style">
            </param>
            <param name="endPoint">
            </param>
            <returns>New extended curve result on success, null on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.ExtendByLine(Rhino.Geometry.CurveEnd,System.Collections.Generic.IEnumerable{Rhino.Geometry.GeometryBase})">
            <summary>
            Extend a curve by a line until it intersects a collection of objects.
            </summary>
            <param name="side">The end of the curve to extend.</param>
            <param name="geometry">A collection of objects. Allowable object types are Curve, Surface, Brep.</param>
            <returns>New extended curve result on success, null on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.ExtendByArc(Rhino.Geometry.CurveEnd,System.Collections.Generic.IEnumerable{Rhino.Geometry.GeometryBase})">
            <summary>
            Extend a curve by an Arc until it intersects a collection of objects.
            </summary>
            <param name="side">The end of the curve to extend.</param>
            <param name="geometry">A collection of objects. Allowable object types are Curve, Surface, Brep.</param>
            <returns>New extended curve result on success, null on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.Simplify(Rhino.Geometry.CurveSimplifyOptions,System.Double,System.Double)">
            <summary>
            Returns a geometrically equivalent PolyCurve.
            <para>The PolyCurve has the following properties</para><para>
            	1. All the PolyCurve segments are LineCurve, PolylineCurve, ArcCurve, or NurbsCurve.
            </para><para>
            	2. The Nurbs Curves segments do not have fully multiple interior knots.
            </para><para>
            	3. Rational Nurbs curves do not have constant weights.
            </para><para>
            	4. Any segment for which IsLinear() or IsArc() is true is a Line,
            Polyline segment, or an Arc.
            </para><para>
            	5. Adjacent Colinear or Cocircular segments are combined.
            </para><para>
            	6. Segments that meet with G1-continuity have there ends tuned up so
            that they meet with G1-continuity to within machine precision.
            </para></summary>
            <param name="options">Simplification options</param>
            <param name="distanceTolerance">
            </param>
            <param name="angleToleranceRadians">
            </param>
            <returns>New simplified curve on success, null on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.SimplifyEnd(Rhino.Geometry.CurveEnd,Rhino.Geometry.CurveSimplifyOptions,System.Double,System.Double)">
            <summary>
            Same as SimplifyCurve, but simplifies only the last two segments at "side" end.
            </summary>
            <param name="end">If CurveEnd.Start the function simplifies the last two start
            side segments, otherwise if CurveEnd.End the last two end side segments are simplified.
            </param>
            <param name="options">simplification options.</param>
            <param name="distanceTolerance">
            </param>
            <param name="angleToleranceRadians">
            </param>
            <returns>New simplified curve on success, null on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.Fair(System.Double,System.Double,System.Int32,System.Int32,System.Int32)">
            <summary>
            Fairs a curve object. Fair works best on degree 3 (cubic) curves. Attempts to
            remove large curvature variations while limiting the geometry changes to be no
            more than the specified tolerance.
            </summary>
            <param name="distanceTolerance">Maximum allowed distance the faired curve is allowed to deviate from the input.</param>
            <param name="angleTolerance">(in radians) kinks with angles &lt;= angleTolerance are smoothed out 0.05 is a good default.</param>
            <param name="clampStart">The number of (control vertices-1) to preserve at start.
            <para>0 = preserve start point</para><para>1 = preserve start point and 1st derivative</para><para>2 = preserve start point, 1st and 2nd derivative</para></param>
            <param name="clampEnd">Same as clampStart</param>
            <param name="iterations">The number of iteratoins to use in adjusting the curve.</param>
            <returns>Returns new faired Curve on success, null on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.Fit(System.Int32,System.Double,System.Double)">
            <summary>
            Fits a new curve through an existing curve.
            </summary>
            <param name="degree">The degree of the returned Curve. Must be bigger than 1.</param>
            <param name="fitTolerance">The fitting tolerance. If fitTolerance is RhinoMath.UnsetValue or &lt;=0.0,
            the document absolute tolerance is used.</param>
            <param name="angleTolerance">The kink smoothing tolerance in radians.
            <para>If angleTolerance is 0.0, all kinks are smoothed</para><para>If angleTolerance is &gt;0.0, kinks smaller than angleTolerance are smoothed</para><para>If angleTolerance is RhinoMath.UnsetValue or &lt;0.0, the document angle tolerance is used for the kink smoothing</para></param>
            <returns>Returns a new fitted Curve if successful, null on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.Rebuild(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Rebuild a curve with a specific point count.
            </summary>
            <param name="pointCount">Number of control points in the rebuild curve.</param>
            <param name="degree">Degree of curve. Valid values are between and including 1 and 11.</param>
            <param name="preserveTangents">If true, the end tangents of the input curve will be preserved.</param>
            <returns>A Nurbs curve on success or null on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.HasNurbsForm">
            <summary>
            Does a NURBS curve representation of this curve exist?
            </summary>
            <returns>
            0   unable to create NURBS representation with desired accuracy.
            1   success - NURBS parameterization matches the curve's to the desired accuracy
            2   success - NURBS point locus matches the curve's and the domain of the NURBS
            curve is correct. However, This curve's parameterization and the
            NURBS curve parameterization may not match. This situation happens
            when getting NURBS representations of curves that have a
            transendental parameterization like circles
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.ToNurbsCurve">
            <summary>
            Create a NURBS curve representation of this curve.
            </summary>
            <returns>NURBS representation of the curve on success, null on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.ToNurbsCurve(Rhino.Geometry.Interval)">
            <summary>
            Create a NURBS curve representation of this curve.
            </summary>
            <param name="subdomain">The NURBS representation for this portion of the curve is returned.</param>
            <returns>NURBS representation of the curve on success, null on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.ToPolyline(System.Int32,System.Int32,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Get a polyline approximation of a curve.
            </summary>
            <param name="mainSegmentCount">
            If mainSegmentCount &lt;= 0, then both subSegmentCount and mainSegmentCount are ignored.
            If mainSegmentCount &gt; 0, then subSegmentCount must be &gt;= 1. In this
            case the nurb will be broken into mainSegmentCount equally spaced
            chords. If needed, each of these chords can be split into as many
            subSegmentCount sub-parts if the subdivision is necessary for the
            mesh to meet the other meshing constraints. In particular, if
            subSegmentCount = 0, then the curve is broken into mainSegmentCount
            pieces and no further testing is performed.</param>
            <param name="subSegmentCount">
            </param>
            <param name="maxAngleRadians">
            ( 0 to pi ) Maximum angle (in radians) between unit tangents at
            adjacent vertices.</param>
            <param name="maxChordLengthRatio">Maximum permitted value of
            (distance chord midpoint to curve) / (length of chord).</param>
            <param name="maxAspectRatio">If maxAspectRatio &lt; 1.0, the parameter is ignored.
            If 1 &lt;= maxAspectRatio &lt; sqrt(2), it is treated as if maxAspectRatio = sqrt(2).
            This parameter controls the maximum permitted value of
            (length of longest chord) / (length of shortest chord).</param>
            <param name="tolerance">If tolerance = 0, the parameter is ignored.
            This parameter controls the maximum permitted value of the
            distance from the curve to the polyline.</param>
            <param name="minEdgeLength">
            </param>
            <param name="maxEdgeLength">If maxEdgeLength = 0, the parameter
            is ignored. This parameter controls the maximum permitted edge length.
            </param>
            <param name="keepStartPoint">If true the starting point of the curve
            is added to the polyline. If false the starting point of the curve is
            not added to the polyline.</param>
            <returns>PolylineCurve on success, null on error.</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.ToPolyline(System.Int32,System.Int32,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Boolean,Rhino.Geometry.Interval)">
            <summary>
            Get a polyline approximation of a curve.
            </summary>
            <param name="mainSegmentCount">
            If mainSegmentCount &lt;= 0, then both subSegmentCount and mainSegmentCount are ignored.
            If mainSegmentCount &gt; 0, then subSegmentCount must be &gt;= 1. In this
            case the nurb will be broken into mainSegmentCount equally spaced
            chords. If needed, each of these chords can be split into as many
            subSegmentCount sub-parts if the subdivision is necessary for the
            mesh to meet the other meshing constraints. In particular, if
            subSegmentCount = 0, then the curve is broken into mainSegmentCount
            pieces and no further testing is performed.</param>
            <param name="subSegmentCount">
            </param>
            <param name="maxAngleRadians">
            ( 0 to pi ) Maximum angle (in radians) between unit tangents at
            adjacent vertices.</param>
            <param name="maxChordLengthRatio">Maximum permitted value of
            (distance chord midpoint to curve) / (length of chord).</param>
            <param name="maxAspectRatio">If maxAspectRatio &lt; 1.0, the parameter is ignored.
            If 1 &lt;= maxAspectRatio &lt; sqrt(2), it is treated as if maxAspectRatio = sqrt(2).
            This parameter controls the maximum permitted value of
            (length of longest chord) / (length of shortest chord).</param>
            <param name="tolerance">If tolerance = 0, the parameter is ignored.
            This parameter controls the maximum permitted value of the
            distance from the curve to the polyline.</param>
            <param name="minEdgeLength">
            </param>
            <param name="maxEdgeLength">If maxEdgeLength = 0, the parameter
            is ignored. This parameter controls the maximum permitted edge length.
            </param>
            <param name="keepStartPoint">If true the starting point of the curve
            is added to the polyline. If false the starting point of the curve is
            not added to the polyline.</param>
            <param name="curveDomain">This subdomain of the NURBS curve is approximated.</param>
            <returns>PolylineCurve on success, null on error.</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.PullToMesh(Rhino.Geometry.Mesh,System.Double)">
            <summary>
            Makes a polyline approximation of the curve and gets the closest point on the mesh for each point on the curve.
            Then it "connects the points" so that you have a polyline on the mesh.
            </summary>
            <param name="mesh">Mesh to project onto.</param>
            <param name="tolerance">Input tolerance (RhinoDoc.ModelAbsoluteTolerance is a good default)</param>
            <returns>A polyline curve on success, null on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.Offset(Rhino.Geometry.Vector3d,Rhino.Geometry.Point3d,System.Double,System.Double,System.Double,Rhino.Geometry.CurveOffsetCornerStyle)">
            <summary>
            Offsets a curve. If you have a nice offset, then there will be one entry in
            the array. If the original curve had kinks or the offset curve had self
            intersections, you will get multiple segments in the offset_curves[] array.
            </summary>
            <param name="normal">The normal to the offset plane.</param>
            <param name="origin">A point on offset plane.</param>
            <param name="distance">The positive or negative distance to offset.</param>
            <param name="tolerance">The offset or fitting tolerance.</param>
            <param name="angleTolerance">The angle tolerance (radians).</param>
            <param name="cornerStyle">Corner style for offset kinks.</param>
            <returns>Offset curves on success, null on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.Offset(Rhino.Geometry.Plane,System.Double,System.Double,Rhino.Geometry.CurveOffsetCornerStyle)">
            <summary>
            Offsets a curve. If you have a nice offset, then there will be one entry in
            the array. If the original curve had kinks or the offset curve had self
            intersections, you will get multiple segments in the offset_curves[] array.
            </summary>
            <param name="plane">Offset solution plane.</param>
            <param name="distance">The positive or negative distance to offset.</param>
            <param name="tolerance">The offset or fitting tolerance.</param>
            <param name="cornerStyle">Corner style for offset kinks.</param>
            <returns>Offset curves on success, null on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.Offset(Rhino.Geometry.Point3d,Rhino.Geometry.Vector3d,System.Double,System.Double,Rhino.Geometry.CurveOffsetCornerStyle)">
            <summary>
            Offsets a curve. If you have a nice offset, then there will be one entry in
            the array. If the original curve had kinks or the offset curve had self
            intersections, you will get multiple segments in the offset_curves[] array.
            </summary>
            <param name="directionPoint">A point that indicates the direction of the offset.</param>
            <param name="normal">The normal to the offset plane.</param>
            <param name="distance">The positive or negative distance to offset.</param>
            <param name="tolerance">The offset or fitting tolerance.</param>
            <param name="cornerStyle">Corner style for offset kinks.</param>
            <returns>Offset curves on success, null on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.OffsetOnSurface(Rhino.Geometry.BrepFace,System.Double,System.Double)">
            <summary>
            Offset a curve on a surface. This curve must lie on the surface.
            </summary>
            <param name="face">
            </param>
            <param name="distance">distance to offset (+)left, (-)right</param>
            <param name="fittingTolerance">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.OffsetOnSurface(Rhino.Geometry.BrepFace,Rhino.Geometry.Point2d,System.Double)">
            <summary>
            Offset a curve on a surface. This curve must lie on the surface.
            </summary>
            <param name="face">
            </param>
            <param name="throughPoint">2d point on the brep face to offset through</param>
            <param name="fittingTolerance">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.OffsetOnSurface(Rhino.Geometry.BrepFace,System.Double[],System.Double[],System.Double)">
            <summary>
            Offset a curve on a surface. This curve must lie on the surface.
            </summary>
            <param name="face">
            </param>
            <param name="curveParameters">curve parameters corresponding to the offset distances</param>
            <param name="offsetDistances">distances to offset (+)left, (-)right</param>
            <param name="fittingTolerance">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.OffsetOnSurface(Rhino.Geometry.Surface,System.Double,System.Double)">
            <summary>
            Offset a curve on a surface. This curve must lie on the surface.
            </summary>
            <param name="surface">
            </param>
            <param name="distance">distance to offset (+)left, (-)right</param>
            <param name="fittingTolerance">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.OffsetOnSurface(Rhino.Geometry.Surface,Rhino.Geometry.Point2d,System.Double)">
            <summary>
            Offset a curve on a surface. This curve must lie on the surface.
            </summary>
            <param name="surface">
            </param>
            <param name="throughPoint">2d point on the brep face to offset through</param>
            <param name="fittingTolerance">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.OffsetOnSurface(Rhino.Geometry.Surface,System.Double[],System.Double[],System.Double)">
            <summary>
            Offset a curve on a surface. This curve must lie on the surface.
            </summary>
            <param name="surface">
            </param>
            <param name="curveParameters">curve parameters corresponding to the offset distances</param>
            <param name="offsetDistances">distances to offset (+)left, (-)right</param>
            <param name="fittingTolerance">
            </param>
            <returns>
            </returns>
        </member>
        <member name="T:Rhino.Geometry.Cylinder">
            <summary>
            A right circular cylinder
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Cylinder.#ctor(Rhino.Geometry.Circle)">
            <summary>
            Create a new cylinder with infinite height.
            </summary>
            <param name="baseCircle">Base circle for infinite cylinder.</param>
        </member>
        <member name="M:Rhino.Geometry.Cylinder.#ctor(Rhino.Geometry.Circle,System.Double)">
            <summary>
            Create a new cylinder with a finite height.
            </summary>
            <param name="baseCircle">Base circle for cylinder.</param>
            <param name="height">Height of cylinder (zero for infinite cylinder).</param>
            <example>
                <code source="examples\vbnet\ex_addcylinder.vb" lang="vbnet" />
                <code source="examples\cs\ex_addcylinder.cs" lang="cs" />
                <code source="examples\py\ex_addcylinder.py" lang="py" />
            </example>
        </member>
        <member name="P:Rhino.Geometry.Cylinder.IsFinite">
            <summary>
            True if the cylinder is finite (height[0] != height[1])
            False if the cylinder is infinite.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Cylinder.Center">
            <summary>
            Gets the center point of the defining circle.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Cylinder.Axis">
            <summary>
            Gets the axis direction of the cylinder.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Cylinder.TotalHeight">
            <summary>
            Gets the height of the cylinder.
            Infinite cylinders have a height of zero, not Double.PositiveInfinity.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Cylinder.Height1">
            <summary>
            Gets or sets the start height of the cylinder.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Cylinder.Height2">
            <summary>
            Gets or sets the end height of the cylinder.
            If the end height equals the start height, the cylinder is
            presumed to be infinite.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Cylinder.CircleAt(System.Double)">
            <summary>
            Compute the circle at the given elevation parameter.
            </summary>
            <param name="linearParameter">Height parameter for circle section.</param>
        </member>
        <member name="M:Rhino.Geometry.Cylinder.LineAt(System.Double)">
            <summary>
            Compute the line at the given angle parameter. This line will be degenerate if the cylinder is infite.
            </summary>
            <param name="angularParameter">Angle parameter for line section.</param>
        </member>
        <member name="M:Rhino.Geometry.Cylinder.ToBrep(System.Boolean,System.Boolean)">
            <summary>
            Create a Brep representation of this Cylinder.
            This is synonymous with calling NurbsSurface.CreateFromCylinder().
            </summary>
            <param name="capBottom">If true, the bottom of the cylinder will be capped.</param>
            <param name="capTop">If true, the top of the cylinder will be capped.</param>
            <returns>A Brep representation of the cylinder or null.</returns>
            <example>
                <code source="examples\vbnet\ex_addcylinder.vb" lang="vbnet" />
                <code source="examples\cs\ex_addcylinder.cs" lang="cs" />
                <code source="examples\py\ex_addcylinder.py" lang="py" />
            </example>
        </member>
        <member name="M:Rhino.Geometry.Cylinder.ToNurbsSurface">
            <summary>
            Create a Nurbs surface representation of this Cylinder.
            This is synonymous with calling NurbsSurface.CreateFromCylinder().
            </summary>
            <returns>A Nurbs surface representation of the cylinder or null.</returns>
        </member>
        <member name="M:Rhino.Geometry.Cylinder.ToRevSurface">
            <summary>
            Create a RevSurface representation of this Cylinder.
            This is synonymous with calling RevSurface.CreateFromCylinder().
            </summary>
            <returns>A RevSurface representation of the cylinder or null.</returns>
        </member>
        <member name="M:Rhino.Geometry.Ellipse.#ctor(Rhino.Geometry.Plane,System.Double,System.Double)">
            <summary>
            Create a new Ellipse from base plane and both principal radii.
            </summary>
            <param name="plane">Base plane of ellipse.</param>
            <param name="radius1">Ellipse radius along base plane X direction.</param>
            <param name="radius2">Ellipse radius along base plane Y direction.</param>
        </member>
        <member name="M:Rhino.Geometry.Ellipse.#ctor(Rhino.Geometry.Point3d,Rhino.Geometry.Point3d,Rhino.Geometry.Point3d)">
            <summary>
            Create a new Ellipse from three points.
            </summary>
            <param name="center">
            </param>
            <param name="second">
            </param>
            <param name="third">
            </param>
        </member>
        <member name="P:Rhino.Geometry.Ellipse.Plane">
            <summary>
            Gets or sets the Base pane of the Ellipse.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Ellipse.Radius1">
            <summary>
            Gets or sets the Radius of the ellipse along the Base plane X direction.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Ellipse.Radius2">
            <summary>
            Gets or sets the Radius of the ellipse along the Base plane Y direction.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Ellipse.ToNurbsCurve">
            <summary>
            Create a nurbs curve representation of this ellipse.
            This amounts to the same as calling NurbsCurve.CreateFromEllipse().
            </summary>
            <returns>A nurbs curve representation of this ellipse or null if no such representation could be made.</returns>
        </member>
        <member name="P:Rhino.Geometry.GeometryBase.IsDocumentControlled">
            <summary>
            If true this object may not be modified. Any properties or functions that attempt
            to modify this object when it is set to "IsReadOnly" will throw a NotSupportedException
            </summary>
        </member>
        <member name="P:Rhino.Geometry.GeometryBase.ObjectType">
            <summary>
            Useful for switch statements that need to differentiate between
            basic object types like points, curves, surfaces, and so on.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.GeometryBase.IsDeformable">
            <summary>
            True if object can be accurately modified with "squishy" transformations like
            projections, shears, and non-uniform scaling.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.GeometryBase.Transform(Rhino.Geometry.Transform)">
            <summary>
            Transforms the geometry. If the input Transform has a SimilarityType of
            OrientationReversing, you may want to consider flipping the transformed
            geometry after calling this function when it makes sense. For example,
            you may want to call Flip() on a Brep after transforming it.
            </summary>
            <param name="xform">
            Transformation to apply to geometry.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Rhino.Geometry.GeometryBase.Translate(Rhino.Geometry.Vector3d)">
            <summary>Translates the object along the specified vector.</summary>
            <param name="translationVector">
            </param>
            <returns>true if geometry successfully translated</returns>
        </member>
        <member name="M:Rhino.Geometry.GeometryBase.Translate(System.Double,System.Double,System.Double)">
            <summary>Translates the object along the specified vector.</summary>
            <param name="x">
            </param>
            <param name="y">
            </param>
            <param name="z">
            </param>
            <returns>true if geometry successfully translated</returns>
        </member>
        <member name="M:Rhino.Geometry.GeometryBase.Scale(System.Double)">
            <summary>
            Scales the object by the specified factor. The scale is centered at the origin.
            </summary>
            <param name="scaleFactor">
            </param>
            <returns>true if geometry successfully scaled</returns>
        </member>
        <member name="M:Rhino.Geometry.GeometryBase.Rotate(System.Double,Rhino.Geometry.Vector3d,Rhino.Geometry.Point3d)">
            <summary>
            Rotates the object about the specified axis. A positive rotation
            angle results in a counter-clockwise rotation about the axis (right hand rule).
            </summary>
            <param name="angleRadians">angle of rotation in radians</param>
            <param name="rotationAxis">direction of the axis of rotation</param>
            <param name="rotationCenter">point on the axis of rotation</param>
            <returns>true if geometry successfully rotated</returns>
        </member>
        <member name="M:Rhino.Geometry.GeometryBase.GetBoundingBox(System.Boolean)">
            <summary>
            Boundingbox solver. Gets the world axis aligned boundingbox for the geometry.
            </summary>
            <param name="accurate">If True, a physically accurate boundingbox will be computed.
            If not, a boundingbox estimate will be computed. For some geometry types there is no
            difference between the estimate and the accurate boundingbox. Estimated boundingboxes
            can be computed much (much) faster than accurate (or "tight") bounding boxes.
            Estimated bounding boxes are always similar to or larger than accurate bounding boxes.</param>
            <returns>The boundingbox of the geometry in world coordinates or BoundingBox.Empty
            if not bounding box could be found.</returns>
        </member>
        <member name="M:Rhino.Geometry.GeometryBase.GetBoundingBox(Rhino.Geometry.Transform)">
            <summary>
            Aligned Boundingbox solver. Gets the world axis aligned boundingbox for the transformed geometry.
            </summary>
            <param name="xform">Transformation to apply to object prior to the BoundingBox computation.
            The geometry itself is not modified.</param>
            <returns>The accurate boundingbox of the transformed geometry in world coordinates
            or BoundingBox.Empty if not bounding box could be found.</returns>
        </member>
        <member name="M:Rhino.Geometry.GeometryBase.GetBoundingBox(Rhino.Geometry.Plane)">
            <summary>
            Aligned Boundingbox solver. Gets the plane aligned boundingbox.
            </summary>
            <param name="plane">Orientation plane for BoundingBox.</param>
            <returns>A BoundingBox in plane coordinates.</returns>
        </member>
        <member name="M:Rhino.Geometry.GeometryBase.GetBoundingBox(Rhino.Geometry.Plane,Rhino.Geometry.Box@)">
            <summary>
            Aligned Boundingbox solver. Gets the plane aligned boundingbox.
            </summary>
            <param name="plane">Orientation plane for BoundingBox.</param>
            <param name="worldBox">Aligned box in World coordinates.</param>
            <returns>A BoundingBox in plane coordinates.</returns>
        </member>
        <member name="M:Rhino.Geometry.GeometryBase.MakeDeformable">
            <summary>
            If possible, converts the object into a form that can be accurately modified
            with "squishy" transformations like projections, shears, an non-uniform scaling.
            </summary>
            <returns>
            False if object cannot be converted to a deformable object. True if object was
            already deformable or was converted into a deformable object.
            </returns>
        </member>
        <member name="M:Rhino.Geometry.GeometryBase.ComponentIndex">
            <summary>
            If this piece of geometry is a component in something larger, like a BrepEdge
            in a Brep, then this function returns the component index.
            </summary>
            <returns>
            This object's component index.  If this object is not a sub-piece of a larger
            geometric entity, then the returned index has
            m_type = ComponentIndex.InvalidType
            and m_index = -1.
            </returns>
        </member>
        <member name="M:Rhino.Geometry.GeometryBase.SetUserString(System.String,System.String)">
            <summary>
            Attach a user string (key,value combination) to this geometry
            </summary>
            <param name="key">id used to retrieve this string</param>
            <param name="value">string associated with key</param>
            <returns>true on success</returns>
        </member>
        <member name="M:Rhino.Geometry.GeometryBase.GetUserString(System.String)">
            <summary>
            Get user string from this geometry
            </summary>
            <param name="key">id used to retrieve the string</param>
            <returns>string associated with the key if successful. null if no key was found</returns>
        </member>
        <member name="M:Rhino.Geometry.GeometryBase.GetUserStrings">
            <summary>
            Get all (key, value) user strings attached to this geometry
            </summary>
            <returns>
            </returns>
        </member>
        <member name="T:Rhino.Geometry.Line">
            <summary>
            Represents a single line segment.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Line.#ctor(Rhino.Geometry.Point3d,Rhino.Geometry.Point3d)">
            <summary>
            Create a new line segment between two points.
            </summary>
            <param name="from">Start point of line.</param>
            <param name="to">End point of line.</param>
        </member>
        <member name="M:Rhino.Geometry.Line.#ctor(Rhino.Geometry.Point3d,Rhino.Geometry.Vector3d)">
            <summary>
            Create a new line segment from start point and span vector.
            </summary>
            <param name="start">Start point of line segment.</param>
            <param name="span">Direction and length of line segment.</param>
        </member>
        <member name="M:Rhino.Geometry.Line.#ctor(Rhino.Geometry.Point3d,Rhino.Geometry.Vector3d,System.Double)">
            <summary>
            Create a new line segment from start point, direction and length.
            </summary>
            <param name="start">Start point of line segment.</param>
            <param name="direction">Direction of line segment.</param>
            <param name="length">Length of line segment.</param>
        </member>
        <member name="P:Rhino.Geometry.Line.From">
            <summary>
            Start point of line segment.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Line.FromX">
            <summary>
            Gets or sets the X coordinate of the line From point.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Line.FromY">
            <summary>
            Gets or sets the Y coordinate of the line From point.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Line.FromZ">
            <summary>
            Gets or sets the Z coordinate of the line From point.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Line.To">
            <summary>
            End point of line segment.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Line.ToX">
            <summary>
            Gets or sets the X coordinate of the line To point.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Line.ToY">
            <summary>
            Gets or sets the Y coordinate of the line To point.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Line.ToZ">
            <summary>
            Gets or sets the Z coordinate of the line To point.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Line.Unset">
            <summary>
            Get a line segment which has Unset end points.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Line.IsValid">
            <summary>
            Gets a value indicating whether or not this line is valid.
            Valid lines must have valid start and end points.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Line.Length">
            <summary>
            Gets or sets the length of this line segment.
            Note that a negative length will invert the line segment without
            making the actual length negative. The line From point will remain fixed
            when a new Length is set.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Line.Direction">
            <summary>
            Gets the direction of this line segment.
            The length of the direction vector equals the length of
            the line segment.
            </summary>
            <value>Sets both the direction and the length of the line.</value>
        </member>
        <member name="P:Rhino.Geometry.Line.UnitTangent">
            <summary>
            Gets the tangent of the line segment.
            Note that tangent vectors are always unit vectors.
            </summary>
            <value>Sets only the direction of the line, the length is maintained.</value>
        </member>
        <member name="P:Rhino.Geometry.Line.BoundingBox">
            <summary>
            Gets the line's 3d axis aligned bounding box.
            </summary>
            <returns>3d bounding box.</returns>
        </member>
        <member name="M:Rhino.Geometry.Line.TryFitLineToPoints(System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d},Rhino.Geometry.Line@)">
            <summary>
            Attempt to fit a line through a set of points.
            </summary>
            <param name="points">The points through which to fit.</param>
            <param name="fitLine">The resulting line on success</param>
            <returns>True on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Line.Flip">
            <summary>
            Flip the endpoints of the line segment.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Line.PointAt(System.Double)">
            <summary>
            Evaluates the line at the specified parameter.
            </summary>
            <param name="t">Parameter to evaluate line segment at. Line parameters are normalised parameters.</param>
            <returns>The point at the specified parameter.</returns>
        </member>
        <member name="M:Rhino.Geometry.Line.ClosestParameterTo(Rhino.Geometry.Point3d)">
            <summary>
            This method is Obsolete, use ClosestParameter() instead.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Line.ClosestParameter(Rhino.Geometry.Point3d)">
            <summary>
            Finds the parameter on the infinite line segment that is closest to a test point.
            </summary>
            <param name="testPoint">Point to project onto the line.</param>
            <returns>The parameter on the line that is closest to testPoint.</returns>
        </member>
        <member name="M:Rhino.Geometry.Line.ClosestPointTo(Rhino.Geometry.Point3d,System.Boolean)">
            <summary>
            This method is Obsolete, use ClosestPoint() instead.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Line.ClosestPoint(Rhino.Geometry.Point3d,System.Boolean)">
            <summary>
            Finds the point on the (in)finite line segment that is closest to a test point.
            </summary>
            <param name="testPoint">Point to project onto the line.</param>
            <param name="limitToFiniteSegment">If true, the projection is limited to the finite line segment.</param>
            <returns>The point on the (in)finite line that is closest to testPoint.</returns>
        </member>
        <member name="M:Rhino.Geometry.Line.DistanceTo(Rhino.Geometry.Point3d,System.Boolean)">
            <summary>
            Compute the shortest distance between this line segment and a test point.
            </summary>
            <param name="testPoint">Point for distance computation.</param>
            <param name="limitToFiniteSegment">If true, the distance is limited to the finite line segment.</param>
            <returns>The shortest distance between this line segment and testPoint.</returns>
        </member>
        <member name="M:Rhino.Geometry.Line.MinimumDistanceTo(Rhino.Geometry.Point3d)">
            <summary>
            Find the shortest distance between this line as a finite segment
            and a test point
            </summary>
            <param name="testPoint">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Line.MinimumDistanceTo(Rhino.Geometry.Line)">
            <summary>
            Find the shortest distance between this line as a finite segment
            and another finite segment
            </summary>
            <param name="testLine">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Line.MaximumDistanceTo(Rhino.Geometry.Point3d)">
            <summary>
            Find the largest distance between this line as a finite segment
            and a test point
            </summary>
            <param name="testPoint">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Line.MaximumDistanceTo(Rhino.Geometry.Line)">
            <summary>
            Find the largest distance between this line as a finite segment
            and another finite segment
            </summary>
            <param name="testLine">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Line.Transform(Rhino.Geometry.Transform)">
            <summary>
            Transform the line using a Transformation matrix.
            </summary>
            <param name="xform">Transform to apply to this line.</param>
            <returns>True on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Line.ToNurbsCurve">
            <summary>
            Create a nurbs curve representation of this line.
            This amounts to the same as calling NurbsCurve.CreateFromLine().
            </summary>
            <returns>A nurbs curve representation of this line or null if no such representation could be made.</returns>
        </member>
        <member name="M:Rhino.Geometry.Line.Extend(System.Double,System.Double)">
            <summary>
            Extend the line by custom distances on both sides.
            </summary>
            <param name="startLength">
            Distance to extend the line at the start point.
            Positive distance result in longer lines.
            </param>
            <param name="endLength">
            Distance to extend the line at the end point.
            Positive distance result in longer lines.
            </param>
            <returns>True on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Line.ExtendThroughBox(Rhino.Geometry.BoundingBox)">
            <summary>
            Ensure the line extends all the way through a box.
            Note, this does not result in the shortest possible line
            that overlaps the box.
            </summary>
            <param name="box">Box to extend through.</param>
            <returns>True on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Line.ExtendThroughBox(Rhino.Geometry.BoundingBox,System.Double)">
            <summary>
            Ensure the line extends all the way through a box.
            Note, this does not result in the shortest possible line that overlaps the box.
            </summary>
            <param name="box">Box to extend through.</param>
            <param name="additionalLength">Additional length to append at both sides of the line.</param>
            <returns>True on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Line.ExtendThroughBox(Rhino.Geometry.Box)">
            <summary>
            Ensure the line extends all the way through a box.
            Note, this does not result in the shortest possible line that overlaps the box.
            </summary>
            <param name="box">Box to extend through.</param>
            <returns>True on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Line.ExtendThroughBox(Rhino.Geometry.Box,System.Double)">
            <summary>
            Ensure the line extends all the way through a box.
            Note, this does not result in the shortest possible line that overlaps the box.
            </summary>
            <param name="box">Box to extend through.</param>
            <param name="additionalLength">Additional length to append at both sides of the line.</param>
            <returns>True on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Line.TryGetPlane(Rhino.Geometry.Plane@)">
            <summary>
            Get a plane that contains the line. The origin of the plane is at the start of the line.
            If possible, a plane parallel to the world xy, yz, or zx plane is returned.
            </summary>
            <param name="plane">
            </param>
            <returns>true on success</returns>
        </member>
        <member name="M:Rhino.Geometry.NurbsCurve.#ctor(System.Int32,System.Int32)">
            <summary>
            Create a new Nurbscurve with a specific degree and control-point count.
            </summary>
            <param name="degree">Degree of curve. Must be equal to or larger than 1 and smaller than or equal to 11.</param>
            <param name="pointCount">Number of control-points.</param>
        </member>
        <member name="M:Rhino.Geometry.NurbsCurve.#ctor(System.Int32,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Create a new NurbsCurve with knot and CV memory allocated
            </summary>
            <param name="dimension">&gt;=1</param>
            <param name="rational">true to make a rational NURBS</param>
            <param name="order">(&gt;= 2) The order=degree+1</param>
            <param name="pointCount">(&gt;= order) number of control vertices</param>
            <example>
                <code source="examples\vbnet\ex_addnurbscircle.vb" lang="vbnet" />
                <code source="examples\cs\ex_addnurbscircle.cs" lang="cs" />
                <code source="examples\py\ex_addnurbscircle.py" lang="py" />
            </example>
        </member>
        <member name="P:Rhino.Geometry.NurbsCurve.Order">
            <summary>
            Gets the order of the curve. Order = Degree + 1
            </summary>
        </member>
        <member name="P:Rhino.Geometry.NurbsCurve.IsRational">
            <summary>
            Gets a value indicating whether or not the curve is rational.
            Rational curves have control-points with custom weights.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.NurbsCurve.Knots">
            <summary>
            Gets access to the knots (or "knot vector") of this nurbs curve.
            </summary>
            <example>
                <code source="examples\vbnet\ex_addnurbscircle.vb" lang="vbnet" />
                <code source="examples\cs\ex_addnurbscircle.cs" lang="cs" />
                <code source="examples\py\ex_addnurbscircle.py" lang="py" />
            </example>
        </member>
        <member name="P:Rhino.Geometry.NurbsCurve.Points">
            <summary>
            Gets access to the control points of this nurbs curve.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.NurbsCurve.HasBezierSpans">
            <summary>
            Returns true if the NURBS curve has bezier spans (all distinct knots have multiplitity = degree)
            </summary>
        </member>
        <member name="M:Rhino.Geometry.NurbsCurve.CreateFromLine(Rhino.Geometry.Line)">
            <summary>
            Get a non-rational, degree 1 Nurbs curve representation of the line.
            </summary>
            <returns>Curve on success, null on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.NurbsCurve.CreateFromArc(Rhino.Geometry.Arc)">
            <summary>
            Get a rational degree 2 NURBS curve representation
            of the arc. Note that the parameterization of NURBS curve
            does not match arc's transcendental paramaterization.
            </summary>
            <returns>Curve on success, null on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.NurbsCurve.CreateFromCircle(Rhino.Geometry.Circle)">
            <summary>
            Get a rational degree 2 NURBS curve representation
            of the circle. Note that the parameterization of NURBS curve
            does not match circle's transcendental paramaterization.
            Use GetRadianFromNurbFormParameter() and
            GetParameterFromRadian() to convert between the NURBS curve
            parameter and the transcendental parameter.
            </summary>
            <returns>Curve on success, null on failure</returns>
        </member>
        <member name="M:Rhino.Geometry.NurbsCurve.CreateFromEllipse(Rhino.Geometry.Ellipse)">
            <summary>
            Get a rational degree 2 NURBS curve representation
            of the ellipse. Note that the parameterization of NURBS curve
            does not match ellsipses transcendental paramaterization.
            </summary>
            <returns>Curve on success, null on failure</returns>
        </member>
        <member name="M:Rhino.Geometry.NurbsCurve.IsDuplicate(Rhino.Geometry.NurbsCurve,Rhino.Geometry.NurbsCurve,System.Boolean,System.Double)">
            <summary>
            Test two curves for similarity.
            </summary>
            <param name="curveA">First curve used in comparison.</param>
            <param name="curveB">Second curve used in comparison.</param>
            <param name="ignoreParameterization">if true, parameterization and orientaion are ignored.</param>
            <param name="tolerance">tolerance to use when comparing control points.</param>
            <returns>true if curves are similar within tolerance.</returns>
        </member>
        <member name="M:Rhino.Geometry.NurbsCurve.Create(System.Boolean,System.Int32,System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d})">
            <summary>
            Create a 3D NURBS curve from a list of control points
            </summary>
            <param name="periodic">If true, create a periodic uniform curve. If false, create a clamped uniform curve</param>
            <param name="degree">(&gt;=1) degree=order-1</param>
            <param name="points">control vertex locations</param>
            <returns>
            new NURBS curve on success
            null on error
            </returns>
            <example>
                <code source="examples\vbnet\ex_addnurbscurve.vb" lang="vbnet" />
                <code source="examples\cs\ex_addnurbscurve.cs" lang="cs" />
                <code source="examples\py\ex_addnurbscurve.py" lang="py" />
            </example>
        </member>
        <member name="M:Rhino.Geometry.NurbsCurve.IncreaseDegree(System.Int32)">
            <summary>
            Increase the degree of this curve.
            </summary>
            <param name="desiredDegree">The desired degree.
            Degrees should be number between and including 1 and 11.</param>
            <returns>True on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.NurbsCurve.MakePiecewiseBezier(System.Boolean)">
            <summary>
            Clamps ends and adds knots so the NURBS curve has bezier spans
            (all distinct knots have multiplitity = degree).
            </summary>
            <param name="setEndWeightsToOne">
            If true and the first or last weight is not one, then the first and
            last spans are reparameterized so that the end weights are one.
            </param>
            <returns>True on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.NurbsCurve.Reparameterize(System.Double)">
            <summary>
            Use a linear fractional transformation to reparameterize the NURBS curve.
            This does not change the curve's domain.
            </summary>
            <param name="c">
            reparameterization constant (generally speaking, c should be &gt; 0). The
            control points and knots are adjusted so that
            output_nurbs(t) = input_nurbs(lambda(t)), where lambda(t) = c*t/( (c-1)*t + 1 ).
            Note that lambda(0) = 0, lambda(1) = 1, lambda'(t) &gt; 0,
            lambda'(0) = c and lambda'(1) = 1/c.
            </param>
            <returns>true if successful</returns>
            <remarks>
            The cv and knot values are values are changed so that output_nurbs(t) = input_nurbs(lambda(t)).
            </remarks>
        </member>
        <member name="M:Rhino.Geometry.NurbsCurve.GrevilleParameter(System.Int32)">
            <summary>
            Get the greville (edit point) parameter that belongs
            to the control point at the specified index.
            </summary>
            <param name="index">Index of Greville (Edit) point.</param>
        </member>
        <member name="M:Rhino.Geometry.NurbsCurve.GrevillePoint(System.Int32)">
            <summary>
            Get the greville (edit point) parameter that belongs
            to the control point at the specified index.
            </summary>
            <param name="index">Index of Greville (Edit) point.</param>
        </member>
        <member name="M:Rhino.Geometry.NurbsCurve.GrevilleParameters">
            <summary>
            Get all Greville (Edit point) parameters for this curve.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.NurbsCurve.GrevillePoints">
            <summary>
            Get all Greville (Edit) points for this curve.
            </summary>
        </member>
        <member name="T:Rhino.Geometry.ControlPoint">
            <summary>
            Represents a geometry control-point.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.ControlPoint.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Create a new unweighted Control Point.
            </summary>
            <param name="x">X coordinate of Control Point.</param>
            <param name="y">Y coordinate of Control Point.</param>
            <param name="z">Z coordinate of Control Point.</param>
        </member>
        <member name="M:Rhino.Geometry.ControlPoint.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Create a new weighted Control Point.
            </summary>
            <param name="x">X coordinate of Control Point.</param>
            <param name="y">Y coordinate of Control Point.</param>
            <param name="z">Z coordinate of Control Point.</param>
            <param name="weight">Weight factor of Control Point.
            You should not use weights equal to or less than zero.</param>
        </member>
        <member name="M:Rhino.Geometry.ControlPoint.#ctor(Rhino.Geometry.Point3d)">
            <summary>
            Create a new unweighted Control Point.
            </summary>
            <param name="pt">Coordinate of Control Point.</param>
        </member>
        <member name="M:Rhino.Geometry.ControlPoint.#ctor(Rhino.Geometry.Point3d,System.Double)">
            <summary>
            Create a new weighted Control Point.
            </summary>
            <param name="pt">Coordinate of Control Point.</param>
            <param name="weight">Weight factor of Control Point.
            You should not use weights equal to or less than zero.</param>
        </member>
        <member name="M:Rhino.Geometry.ControlPoint.#ctor(Rhino.Geometry.Point4d)">
            <summary>
            Create a new weighted Control Point.
            </summary>
            <param name="pt">Control point values.</param>
        </member>
        <member name="P:Rhino.Geometry.ControlPoint.Unset">
            <summary>
            Gets the predefined unset control point.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.ControlPoint.Location">
            <summary>
            Gets or sets the location of the control point.
            Internally, Rhino stores the location of a weighted control-point
            as a pre-multiplied coordinate, but RhinoCommon always provides
            Euclidean coordinates for control-points, regardless of weight.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.ControlPoint.Weight">
            <summary>
            Gets or sets the weight of this control point.
            </summary>
        </member>
        <member name="T:Rhino.Geometry.Collections.NurbsCurveKnotList">
            <summary>
            Provides access to the knot vector of a nurbs curve.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Collections.NurbsCurveKnotList.Item(System.Int32)">
            <summary>
            Gets or sets the knot vector value at the given index.
            </summary>
            <param name="index">Index of knot to access.</param>
            <returns>The knot value at [index]</returns>
        </member>
        <member name="P:Rhino.Geometry.Collections.NurbsCurveKnotList.Count">
            <summary>Total number of knots in this curve.</summary>
        </member>
        <member name="P:Rhino.Geometry.Collections.NurbsCurveKnotList.IsClampedStart">
            <summary>
            Gets a value indicating whether or not the knot vector is clamped at the start of the curve.
            Clamped curves start at the first control-point. This requires fully multiple knots.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Collections.NurbsCurveKnotList.IsClampedEnd">
            <summary>
            Gets a value indicating whether or not the knot vector is clamped at the end of the curve.
            Clamped curves are coincident with the first and last control-point. This requires fully multiple knots.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Collections.NurbsCurveKnotList.InsertKnot(System.Double)">
            <summary>
            Insert a knot and update control point locations.
            Does not change parameterization or locus of curve.
            </summary>
            <param name="value">Knot value to insert.</param>
            <returns>True on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.NurbsCurveKnotList.InsertKnot(System.Double,System.Int32)">
            <summary>
            Insert a knot and update control point locations.
            Does not change parameterization or locus of curve.
            </summary>
            <param name="value">Knot value to insert.</param>
            <param name="multiplicity">Multiplicity of knot to insert.</param>
            <returns>True on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.NurbsCurveKnotList.KnotMultiplicity(System.Int32)">
            <summary>Get knot multiplicity</summary>
            <param name="index">Index of knot to query.</param>
            <returns>The multiplicity (valence) of the knot.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.NurbsCurveKnotList.CreateUniformKnots(System.Double)">
            <summary>
            Compute a clamped, uniform knot vector based on the current
            degree and control point count. Does not change values of control
            vertices.
            </summary>
            <param name="knotSpacing">Spacing of subsequent knots.</param>
            <returns>True on success, False on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.NurbsCurveKnotList.CreatePeriodicKnots(System.Double)">
            <summary>
            Compute a clamped, uniform, periodic knot vector based on the current
            degree and control point count. Does not change values of control
            vertices.
            </summary>
            <param name="knotSpacing">Spacing of subsequent knots.</param>
            <returns>True on success, False on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.NurbsCurveKnotList.ClampEnd(Rhino.Geometry.CurveEnd)">
            <summary>
            Clamp end knots. Does not modify control point locations.
            </summary>
            <param name="end">Curve end to clamp.</param>
            <returns>True on success, false on failure.</returns>
        </member>
        <member name="T:Rhino.Geometry.Collections.NurbsCurvePointList">
            <summary>
            Provides access to the control points of a nurbs curve.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Collections.NurbsCurvePointList.Item(System.Int32)">
            <summary>
            Gets or sets the control point location at the given index.
            </summary>
            <param name="index">Index of control vertex to access.</param>
            <returns>The control vertex at [index]</returns>
        </member>
        <member name="P:Rhino.Geometry.Collections.NurbsCurvePointList.Count">
            <summary>
            Gets the number of control points in this curve.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Collections.NurbsCurvePointList.ControlPolygonLength">
            <summary>
            Gets the length of the polyline connecting all control points.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Collections.NurbsCurvePointList.ControlPolygon">
            <summary>
            Create a polyline through all the control points.
            Note that periodic curves generate a closed polyline with <i>fewer</i>
            points than control-points.
            </summary>
            <returns>A polyline connecting all control points.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.NurbsCurvePointList.ChangeEndWeights(System.Double,System.Double)">
            <summary>
            Use a combination of scaling and reparameterization to change the end weights to the specified values.
            </summary>
            <param name="w0">Weight for first control point.</param>
            <param name="w1">Weight for last control point.</param>
            <returns>True on success, false on failure.</returns>
            <remarks>
            The domain, euclidean locations of the control points, and locus of the curve
            do not change, but the weights, homogeneous cv values and internal knot values
            may change. If w0 and w1 are 1 and the curve is not rational, the curve is not changed.
            </remarks>
        </member>
        <member name="M:Rhino.Geometry.Collections.NurbsCurvePointList.MakeRational">
            <summary>
            Turns the curve into a Rational nurbs curve.
            </summary>
            <returns>True on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.NurbsCurvePointList.MakeNonRational">
            <summary>
            Sets all the control points to 1.0
            </summary>
            <returns>True on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.NurbsCurvePointList.SetPoint(System.Int32,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Set a specific control-point.
            </summary>
            <param name="index">Index of control-point to set.</param>
            <param name="x">X coordinate of control-point.</param>
            <param name="y">Y coordinate of control-point.</param>
            <param name="z">Z coordinate of control-point.</param>
            <param name="weight">Weight of control-point.</param>
            <example>
                <code source="examples\vbnet\ex_addnurbscircle.vb" lang="vbnet" />
                <code source="examples\cs\ex_addnurbscircle.cs" lang="cs" />
                <code source="examples\py\ex_addnurbscircle.py" lang="py" />
            </example>
        </member>
        <member name="M:Rhino.Geometry.Collections.NurbsCurvePointList.SetPoint(System.Int32,Rhino.Geometry.Point3d)">
            <summary>
            Set a specific control-point.
            </summary>
            <param name="index">Index of control-point to set.</param>
            <param name="point">Coordinate of control-point.</param>
        </member>
        <member name="M:Rhino.Geometry.Collections.NurbsCurvePointList.SetPoint(System.Int32,Rhino.Geometry.Point4d)">
            <summary>
            Set a specific weighted control-point.
            </summary>
            <param name="index">Index of control-point to set.</param>
            <param name="point">Coordinate and weight of control-point.</param>
        </member>
        <member name="T:Rhino.Geometry.PlaneFitResult">
            <summary>
            Enumerates all possible outcomes of a Least-Squares plane fitting operation.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.PlaneFitResult.Failure">
            <summary>
            No plane could be found.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.PlaneFitResult.Success">
            <summary>
            A plane was successfully fitted.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.PlaneFitResult.Inconclusive">
            <summary>
            A valid plane was found, but it is an inconclusive result.
            This might happen with co-linear points for example.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Plane.#ctor(Rhino.Geometry.Plane)">
            <summary>Copy constructor</summary>
            <param name="other">
            </param>
        </member>
        <member name="M:Rhino.Geometry.Plane.#ctor(Rhino.Geometry.Point3d,Rhino.Geometry.Vector3d)">
            <summary>
            Construct a plane from a point and a normal vector.
            </summary>
            <param name="origin">Origin point of the plane.</param>
            <param name="normal">Non-zero normal to the plane.</param>
            <seealso>CreateFromNormal</seealso>
            <example>
                <code source="examples\vbnet\ex_addcylinder.vb" lang="vbnet" />
                <code source="examples\cs\ex_addcylinder.cs" lang="cs" />
                <code source="examples\py\ex_addcylinder.py" lang="py" />
            </example>
        </member>
        <member name="M:Rhino.Geometry.Plane.#ctor(Rhino.Geometry.Point3d,Rhino.Geometry.Vector3d,Rhino.Geometry.Vector3d)">
            <summary>
            Construct a plane from a point and two vectors in the plane.
            </summary>
            <param name="origin">Origin point of the plane.</param>
            <param name="xDirection">
            Non-zero vector in the plane that determines the x-axis direction.
            </param>
            <param name="yDirection">
            Non-zero vector not parallel to x_dir that is used to determine the
            yaxis direction. y_dir does not need to be perpendicular to x_dir.
            </param>
        </member>
        <member name="M:Rhino.Geometry.Plane.#ctor(Rhino.Geometry.Point3d,Rhino.Geometry.Point3d,Rhino.Geometry.Point3d)">
            <summary>
            Construct a plane from three non-colinear points.
            </summary>
            <param name="origin">Origin point of the plane.</param>
            <param name="xPoint">
            Second point in the plane. The x-axis will be parallel to x_point-origin.
            </param>
            <param name="yPoint">
            Third point on the plane that is not colinear with the first two points.
            yaxis*(y_point-origin) will be &gt; 0.
            </param>
            <example>
                <code source="examples\vbnet\ex_addclippingplane.vb" lang="vbnet" />
                <code source="examples\cs\ex_addclippingplane.cs" lang="cs" />
                <code source="examples\py\ex_addclippingplane.py" lang="py" />
            </example>
        </member>
        <member name="M:Rhino.Geometry.Plane.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Construct a plane from an equation
            ax+by+cz=d
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Plane.Origin">
            <summary>
            Gets or sets the origin point of this plane.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Plane.OriginX">
            <summary>
            Gets or sets the X coordinate of the origin of this plane.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Plane.OriginY">
            <summary>
            Gets or sets the Y coordinate of the origin of this plane.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Plane.OriginZ">
            <summary>
            Gets or sets the Z coordinate of the origin of this plane.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Plane.XAxis">
            <summary>
            Gets or sets the Xaxis vector of this plane.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Plane.YAxis">
            <summary>
            Gets or sets the Yaxis vector of this plane.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Plane.ZAxis">
            <summary>
            Gets or sets the Zaxis vector of this plane.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Plane.WorldXY">
            <summary>
            plane coincident with the World XY plane
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Plane.WorldYZ">
            <summary>
            plane coincident with the World YZ plane
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Plane.WorldZX">
            <summary>
            plane coincident with the World ZX plane
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Plane.Unset">
            <summary>
            Gets a plane that contains Unset origin and axis vectors.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Plane.Normal">
            <summary>
            Gets the normal of this plane. This is essentially the ZAxis of the plane.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Plane.IsValid">
            <summary>
            Gets a value indicating whether or not this is a valid plane.
            A plane is considered to be valid when all fields contain reasonable
            information and the equation jibes with point and zaxis.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Plane.FitPlaneToPoints(System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d},Rhino.Geometry.Plane@)">
            <summary>Fit a plane through a collection of points.</summary>
            <param name="points">Points to fit to.</param>
            <param name="plane">Resulting plane</param>
            <returns>A value indicating the result of the operation.</returns>
        </member>
        <member name="M:Rhino.Geometry.Plane.FitPlaneToPoints(System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d},Rhino.Geometry.Plane@,System.Double@)">
            <summary>Fit a plane through a collection of points.</summary>
            <param name="points">Points to fit to.</param>
            <param name="plane">Resulting plane</param>
            <param name="maximumDeviation">The distance from the furthest point to the plane.</param>
            <returns>A value indicating the result of the operation.</returns>
        </member>
        <member name="M:Rhino.Geometry.Plane.GetPlaneEquation">
            <summary>
            Get the plane equation for this plane in the format of Ax+By+Cz+D=0
            </summary>
            <returns>
            Array of four values
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Plane.PointAt(System.Double,System.Double)">
            <summary>
            Evaluate a point on the plane.
            </summary>
            <param name="u">evaulation parameter</param>
            <param name="v">evaulation parameter</param>
            <returns>plane.origin + u*plane.xaxis + v*plane.yaxis</returns>
        </member>
        <member name="M:Rhino.Geometry.Plane.PointAt(System.Double,System.Double,System.Double)">
            <summary>
            Evaluate a point on the plane
            </summary>
            <param name="u">evaulation parameter</param>
            <param name="v">evaulation parameter</param>
            <param name="w">evaulation parameter</param>
            <returns>plane.origin + u*plane.xaxis + v*plane.yaxis + z*plane.zaxis</returns>
        </member>
        <member name="M:Rhino.Geometry.Plane.ExtendThroughBox(Rhino.Geometry.BoundingBox,Rhino.Geometry.Interval@,Rhino.Geometry.Interval@)">
            <summary>
            Extend this plane through a Box.
            </summary>
            <param name="box">
            </param>
            <param name="s">
            If this function returns True,
            the s parameter returns the Interval on the plane along the X direction that will
            encompass the Box.
            </param>
            <param name="t">
            If this function returns True,
            the t parameter returns the Interval on the plane along the Y direction that will
            encompass the Box.
            </param>
            <returns>True on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Plane.ExtendThroughBox(Rhino.Geometry.Box,Rhino.Geometry.Interval@,Rhino.Geometry.Interval@)">
            <summary>
            Extend this plane through a Box.
            </summary>
            <param name="box">
            </param>
            <param name="s">
            If this function returns True,
            the s parameter returns the Interval on the plane along the X direction that will
            encompass the Box.
            </param>
            <param name="t">
            If this function returns True,
            the t parameter returns the Interval on the plane along the Y direction that will
            encompass the Box.
            </param>
            <returns>True on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Plane.ClosestParameterTo(Rhino.Geometry.Point3d,System.Double@,System.Double@)">
            <summary>
            This method is Obsolete, use ClosestParameter() instead.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Plane.ClosestParameter(Rhino.Geometry.Point3d,System.Double@,System.Double@)">
            <summary>
            Gets the parameters of the point on the plane closest to a test point.
            </summary>
            <param name="testPoint">Point to get close to.</param>
            <param name="s">Parameter along plane X-direction.</param>
            <param name="t">Parameter along plane Y-direction.</param>
            <returns>
            True if a parameter could be found,
            false if the point could not be projected successfully.
            </returns>
            <example>
                <code source="examples\vbnet\ex_addlineardimension2.vb" lang="vbnet" />
                <code source="examples\cs\ex_addlineardimension2.cs" lang="cs" />
                <code source="examples\py\ex_addlineardimension2.py" lang="py" />
            </example>
        </member>
        <member name="M:Rhino.Geometry.Plane.ClosestPointTo(Rhino.Geometry.Point3d)">
            <summary>
            This method is Obsolete, use ClosestPoint() instead.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Plane.ClosestPoint(Rhino.Geometry.Point3d)">
            <summary>
            Gets the point on the plane closest to a test point.
            </summary>
            <param name="testPoint">Point to get close to.</param>
            <returns>
            The point on the plane that is closest to testPoint,
            or Point3d.Unset on failure.
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Plane.DistanceTo(Rhino.Geometry.Point3d)">
            <summary>
            Returns the signed distance from testPoint to its projection onto this plane.
            If the point is below the plane, a negative distance is returned.
            </summary>
            <param name="testPoint">Point to test.</param>
            <returns>Signed distance from this plane to testPoint.</returns>
        </member>
        <member name="M:Rhino.Geometry.Plane.RemapToPlaneSpace(Rhino.Geometry.Point3d,Rhino.Geometry.Point3d@)">
            <summary>
            Convert a point from World space coordinates into Plane space coordinates.
            </summary>
            <param name="ptSample">World point to remap.</param>
            <param name="ptPlane">Point in plane (s,t,d) coordinates.</param>
            <returns>True on success, false on failure.</returns>
            <remarks>D stands for distance, not disease.</remarks>
        </member>
        <member name="M:Rhino.Geometry.Plane.Flip">
            <summary>
            Flip this plane by swapping out the X and Y axes and inverting the Z axis.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Plane.Transform(Rhino.Geometry.Transform)">
            <summary>
            Transform the plane with a Transformation matrix.
            </summary>
            <param name="xform">Transformation to apply to plane.</param>
            <returns>True on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Plane.Translate(Rhino.Geometry.Vector3d)">
            <summary>
            Translate (move) the plane along a vector.
            </summary>
            <param name="delta">Translation (motion) vector</param>
            <returns>True on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Plane.Rotate(System.Double,System.Double,Rhino.Geometry.Vector3d)">
            <summary>
            Rotate the plane about its origin point.
            </summary>
            <param name="sinAngle">Sin(angle).</param>
            <param name="cosAngle">Cos(angle).</param>
            <param name="axis">Axis of rotation.</param>
            <returns>True on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Plane.Rotate(System.Double,Rhino.Geometry.Vector3d)">
            <summary>
            Rotate the plane about its origin point.
            </summary>
            <param name="angle">Angle in radians.</param>
            <param name="axis">Axis of rotation.</param>
            <returns>True on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Plane.Rotate(System.Double,Rhino.Geometry.Vector3d,Rhino.Geometry.Point3d)">
            <summary>
            Rotate the plane about a custom anchor point.
            </summary>
            <param name="angle">Angle in radians.</param>
            <param name="axis">Axis of rotation.</param>
            <param name="centerOfRotation">Center of rotation.</param>
            <returns>True on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Plane.Rotate(System.Double,System.Double,Rhino.Geometry.Vector3d,Rhino.Geometry.Point3d)">
            <summary>Rotate the plane about a custom anchor point.</summary>
            <param name="sinAngle">Sin(angle)</param>
            <param name="cosAngle">Cos(angle)</param>
            <param name="axis">Axis of rotation.</param>
            <param name="centerOfRotation">Center of rotation.</param>
            <returns>True on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Point2f.#ctor(System.Single,System.Single)">
            <summary>
            Create a new two-dimensional vector from two components.
            </summary>
            <param name="x">X component of vector.</param>
            <param name="y">Y component of vector.</param>
        </member>
        <member name="M:Rhino.Geometry.Point2f.#ctor(System.Double,System.Double)">
            <summary>
            Create a new two-dimensional vector from two components.
            </summary>
            <param name="x">X component of vector.</param>
            <param name="y">Y component of vector.</param>
        </member>
        <member name="P:Rhino.Geometry.Point2f.Unset">
            <summary>
            Gets the standard Unset point.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Point2f.IsValid">
            <summary>
            Gets a value indicating whether or not this Point is considered valid.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Point2f.X">
            <summary>
            Gets or sets the X component of the vector.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Point2f.Y">
            <summary>
            Gets or sets the Y component of the vector.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Vector3f.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Create a new vector from 3 single precision numbers.
            </summary>
            <param name="x">X component of vector.</param>
            <param name="y">Y component of vector.</param>
            <param name="z">Z component of vector.</param>
        </member>
        <member name="P:Rhino.Geometry.Quaternion.IsValid">
            <summary>
            returns true if a, b, c, and d are valid finite IEEE doubles.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Quaternion.Conjugate">
            <summary>
            Returns the conjugate of the quaternion = (a,-b,-c,-d)
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Quaternion.Inverse">
            <summary>
            Sets the quaternion to a/L2, -b/L2, -c/L2, -d/L2, where
            L2 = length squared = (a*a + b*b + c*c + d*d). This is
            the multiplicative inverse, i.e.,
            (a,b,c,d)*(a/L2, -b/L2, -c/L2, -d/L2) = (1,0,0,0).
            If "this" is the zero quaternion, then the zero quaternion is returned.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Quaternion.LengthSquared">
            <summary>
            Returns a*a + b*b + c*c + d*d
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Quaternion.Vector">
            <summary>
            The "vector" or "imaginary" part of the quaternion = (b,c,d)
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Quaternion.Scalar">
            <summary>
            The "real" or "scalar" part of the quaternion = a.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Quaternion.IsZero">
            <summary>
            True if a, b, c, and d are all zero.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Quaternion.IsScalar">
            <summary>
            True if b, c, and d are all zero.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Quaternion.IsVector">
            <summary>
            True if a = 0 and at least one of b, c, or d is not zero.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Quaternion.Invert">
            <summary>
            Sets the quaternion to a/L2, -b/L2, -c/L2, -d/L2, where
            L2 = length squared = (a*a + b*b + c*c + d*d).  This is
            the multiplicative inverse, i.e.,
            (a,b,c,d)*(a/L2, -b/L2, -c/L2, -d/L2) = (1,0,0,0).
            </summary>
            <returns>
            True if successful.  False if the quaternion is zero and cannot be inverted.
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Quaternion.MatrixForm">
            <summary>
            Returns 4x4 real valued matrix form of the quaternion
            a  b  c  d
            -b  a -d  c
            -c  d  a -b
            -d -c  b  a
            which has the same arithmetic properties in as the quaternion.
            </summary>
            <returns>
            </returns>
            <remarks>
            Do not confuse this with the rotation defined by the quaternion. This
            function will only be interesting to math nerds and is not useful in
            rendering or animation applications.
            </remarks>
        </member>
        <member name="M:Rhino.Geometry.Quaternion.SetRotation(System.Double,Rhino.Geometry.Vector3d)">
            <summary>
            Sets the quaternion to cos(angle/2), sin(angle/2)*x, sin(angle/2)*y, sin(angle/2)*z
            where (x,y,z) is the unit vector parallel to axis.  This is the unit quaternion
            that represents the rotation of angle about axis.
            </summary>
            <param name="angle">in radians</param>
            <param name="axisOfRotation">
            </param>
        </member>
        <member name="M:Rhino.Geometry.Quaternion.Rotation(System.Double,Rhino.Geometry.Vector3d)">
            <summary>
            Returns the unit quaternion
            cos(angle/2), sin(angle/2)*x, sin(angle/2)*y, sin(angle/2)*z
            where (x,y,z) is the unit vector parallel to axis.  This is the
            unit quaternion that represents the rotation of angle about axis.
            </summary>
            <param name="angle">in radians</param>
            <param name="axisOfRotation">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Quaternion.Product(Rhino.Geometry.Quaternion,Rhino.Geometry.Quaternion)">
            <summary>
            The quaternion product of p and q.  This is the same value as p*q.
            </summary>
            <param name="p">
            </param>
            <param name="q">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Quaternion.CrossProduct(Rhino.Geometry.Quaternion,Rhino.Geometry.Quaternion)">
            <summary>
            The vector cross product of p and q = (0,x,y,z) where
            (x,y,z) = ON_CrossProduct(p.Vector(),q.Vector())
            This is NOT the same as the quaternion product p*q.
            </summary>
            <param name="p">
            </param>
            <param name="q">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Quaternion.op_Multiply(Rhino.Geometry.Quaternion,Rhino.Geometry.Quaternion)">
            <summary>
            quaternion multiplication is not commutative
            </summary>
            <param name="a">
            </param>
            <param name="b">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Sphere.#ctor(Rhino.Geometry.Point3d,System.Double)">
            <example>
                <code source="examples\vbnet\ex_addsphere.vb" lang="vbnet" />
                <code source="examples\cs\ex_addsphere.cs" lang="cs" />
                <code source="examples\py\ex_addsphere.py" lang="py" />
            </example>
        </member>
        <member name="P:Rhino.Geometry.Sphere.BoundingBox">
            <summary>
            Gets the world aligned boundingbox for this Sphere.
            If the Sphere is Invalid, an empty box is returned.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Sphere.Diameter">
            <summary>
            Gets or sets the diameter for this Sphere.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Sphere.Radius">
            <summary>
            Gets or sets the Radius for this Sphere.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Sphere.EquitorialPlane">
            <summary>
            Gets or sets the Equatorial plane for this sphere.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Sphere.Center">
            <summary>
            Gets or sets the center point for the sphere.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Sphere.NorthPole">
            <summary>
            Gets the point at the North Pole of the sphere.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Sphere.SouthPole">
            <summary>
            Gets the point at the South Pole of the sphere.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Sphere.PointAt(System.Double,System.Double)">
            <summary>
            </summary>
            <param name="longitudeRadians">[0,2pi]</param>
            <param name="latitudeRadians">[-pi/2,pi/2]</param>
            <returns>
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Sphere.NormalAt(System.Double,System.Double)">
            <summary>
            </summary>
            <param name="longitudeRadians">[0,2pi]</param>
            <param name="latitudeRadians">[-pi/2,pi/2]</param>
            <returns>
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Sphere.ClosestPointTo(Rhino.Geometry.Point3d)">
            <summary>
            This method is Obsolete, use ClosestPoint() instead.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Sphere.ClosestPoint(Rhino.Geometry.Point3d)">
            <summary>
            returns point on sphere that is closest to given point
            </summary>
            <param name="testPoint">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Sphere.Rotate(System.Double,System.Double,Rhino.Geometry.Vector3d)">
            <summary>
            Rotate the sphere about the center point.
            </summary>
            <param name="sinAngle">sin(angle)</param>
            <param name="cosAngle">cos(angle)</param>
            <param name="axisOfRotation">
            </param>
        </member>
        <member name="M:Rhino.Geometry.Sphere.Rotate(System.Double,Rhino.Geometry.Vector3d)">
            <summary>
            Rotate the sphere about the center point.
            </summary>
            <param name="angleRadians">Angle of rotation (in radians)</param>
            <param name="axisOfRotation">Rotation axis.</param>
        </member>
        <member name="M:Rhino.Geometry.Sphere.Rotate(System.Double,System.Double,Rhino.Geometry.Vector3d,Rhino.Geometry.Point3d)">
            <summary>
            Rotate the sphere about a point and an axis.
            </summary>
            <param name="sinAngle">sin(angle)</param>
            <param name="cosAngle">cod(angle)</param>
            <param name="axisOfRotation">Axis of rotation.</param>
            <param name="centerOfRotation">Center of rotation.</param>
        </member>
        <member name="M:Rhino.Geometry.Sphere.Rotate(System.Double,Rhino.Geometry.Vector3d,Rhino.Geometry.Point3d)">
            <summary>
            rotate sphere about a point and axis
            </summary>
            <param name="angleRadians">Rotation angle (in Radians)</param>
            <param name="axisOfRotation">Axis of rotation.</param>
            <param name="centerOfRotation">Center of rotation.</param>
        </member>
        <member name="M:Rhino.Geometry.Sphere.Translate(Rhino.Geometry.Vector3d)">
            <summary>
            Translate (move) the sphere along a motion vector.
            </summary>
            <param name="delta">Motion vector.</param>
        </member>
        <member name="M:Rhino.Geometry.Sphere.Transform(Rhino.Geometry.Transform)">
            <summary>
            Transform the Sphere. Note that non-similarity preserving transformations
            cannot be applied to a sphere as that would result in an ellipsoid.
            </summary>
            <param name="xform">Transformation matrix to apply.</param>
            <returns>True on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Sphere.ToNurbsSurface">
            <summary>
            Convert this Sphere to a NurbsSurface representation.
            This is synonymous with calling NurbsSurface.CreateFromSphere().
            </summary>
            <returns>A nurbs surface representation of this sphere or null.</returns>
        </member>
        <member name="M:Rhino.Geometry.Sphere.ToRevSurface">
            <summary>
            Convert this Sphere to a RevSurface representation.
            This is synonymous with calling RevSurface.CreateFromSphere().
            </summary>
            <returns>A surface of revolution representation of this sphere or null.</returns>
        </member>
        <member name="M:Rhino.Geometry.Torus.#ctor(Rhino.Geometry.Plane,System.Double,System.Double)">
            <summary>
            Create a new Torus from base pane and two radii.
            </summary>
            <param name="basePlane">Base plane for major radius circle.</param>
            <param name="majorRadius">Radius of circle that lies at the heart of the torus.</param>
            <param name="minorRadius">Radius of torus section.</param>
            <example>
                <code source="examples\vbnet\ex_addtorus.vb" lang="vbnet" />
                <code source="examples\cs\ex_addtorus.cs" lang="cs" />
                <code source="examples\py\ex_addtorus.py" lang="py" />
            </example>
        </member>
        <member name="P:Rhino.Geometry.Torus.Plane">
            <summary>
            Gets or sets the plane for the torus large circle.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Torus.MajorRadius">
            <summary>
            Gets or sets the radius of the circle that lies at the heart of the torus.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Torus.MinorRadius">
            <summary>
            Gets or sets the radius of the torus section.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Torus.ToNurbsSurface">
            <summary>
            Convert this Torus to a NurbsSurface representation.
            This is synonymous with calling NurbsSurface.CreateFromTorus().
            </summary>
            <returns>A nurbs surface representation of this torus or null.</returns>
        </member>
        <member name="M:Rhino.Geometry.Torus.ToRevSurface">
            <summary>
            Convert this Torus to a RevSurface representation.
            This is synonymous with calling RevSurface.CreateFromTorus().
            </summary>
            <returns>A surface of revolution representation of this torus or null.</returns>
            <example>
                <code source="examples\vbnet\ex_addtorus.vb" lang="vbnet" />
                <code source="examples\cs\ex_addtorus.cs" lang="cs" />
                <code source="examples\py\ex_addtorus.py" lang="py" />
            </example>
        </member>
        <member name="T:Rhino.Geometry.Transform">
            <summary>
            parallel to C++ ON_Xform
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Transform.#ctor(System.Double)">
            <summary>
            Creates a new Transform matrix with specific values along the diagonal.
            </summary>
            <param name="diagonalValue">Value to assign to all diagonal cells except M33 which is set to 1.0.</param>
        </member>
        <member name="P:Rhino.Geometry.Transform.Item(System.Int32,System.Int32)">
            <summary>
            Gets or sets the matrix value at the given row and column indixes.
            </summary>
            <param name="row">Index of row to access, must be 0, 1, 2 or 3.</param>
            <param name="column">Index of column to access, must be 0, 1, 2 or 3.</param>
            <returns>The value at [row, column]</returns>
            <value>The new value at [row, column]</value>
        </member>
        <member name="P:Rhino.Geometry.Transform.Identity">
            <summary>
            Gets a new Identity transform matrix. An identity matrix defines no transformation.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Transform.Unset">
            <summary>
            Get an XForm filled with RhinoMath.UnsetValue.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Transform.IsValid">
            <summary>
            Gets a value indicating whether or not this Transform is a valid matrix.
            A valid transform matrix is not allowed to have any invalid numbers.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Transform.SimilarityType">
            <summary>
            Gets a value indicating whether or not the Transform maintains similarity.
            The easiest way to think of Similarity is that any circle, when transformed,
            remains a circle. Whereas a non-similarity Transform deforms circles into ellipses.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Transform.Determinant">
            <summary>
            The determinant of this 4x4 matrix.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Transform.Translation(Rhino.Geometry.Vector3d)">
            <summary>
            Create a new Translation (move) transformation.
            </summary>
            <param name="motion">Translation (motion) vector.</param>
            <returns>A transform matrix which moves geometry along the motion vector.</returns>
        </member>
        <member name="M:Rhino.Geometry.Transform.Translation(System.Double,System.Double,System.Double)">
            <summary>
            Create a new Translation (move) tranformation.
            Right column is (dx, dy, dz, 1.0).
            </summary>
            <param name="dx">Distance to translate (move) geometry along the world X axis.</param>
            <param name="dy">Distance to translate (move) geometry along the world Y axis.</param>
            <param name="dz">Distance to translate (move) geometry along the world Z axis.</param>
            <returns>A transform matrix which moves geometry with the specified distances.</returns>
        </member>
        <member name="M:Rhino.Geometry.Transform.Scale(Rhino.Geometry.Point3d,System.Double)">
            <summary>
            Create a new Uniform Scaling transformation with a specified scaling anchor point.
            </summary>
            <param name="anchor">Defines the anchor point of the scaling operation.</param>
            <param name="scaleFactor">Scaling factor in all directions.</param>
            <returns>A transform matrix which scales geometry uniformly around the anchor point.</returns>
        </member>
        <member name="M:Rhino.Geometry.Transform.Scale(Rhino.Geometry.Plane,System.Double,System.Double,System.Double)">
            <summary>
            Create a new Non-Uniform Scaling transformation with a specified scaling anchor point.
            </summary>
            <param name="plane">Defines the center and orientation of the scaling operation.</param>
            <param name="xScaleFactor">Scaling factor along the anchor plane X-Axis direction.</param>
            <param name="yScaleFactor">Scaling factor along the anchor plane Y-Axis direction.</param>
            <param name="zScaleFactor">Scaling factor along the anchor plane Z-Axis direction.</param>
            <returns>A transformation matrix which scales geometry non-uniformly.</returns>
        </member>
        <member name="M:Rhino.Geometry.Transform.Rotation(System.Double,System.Double,Rhino.Geometry.Vector3d,Rhino.Geometry.Point3d)">
            <summary>
            Create a new Rotation transformation with specified angles, rotation centers and rotation axes.
            </summary>
            <param name="sinAngle">Sin of the rotation angle.</param>
            <param name="cosAngle">Cos of the rotation angle.</param>
            <param name="rotationAxis">Axis direction of rotation.</param>
            <param name="rotationCenter">Center point of rotation.</param>
            <returns>A transformation matrix which rotates geometry around an anchor point.</returns>
        </member>
        <member name="M:Rhino.Geometry.Transform.Rotation(System.Double,Rhino.Geometry.Point3d)">
            <summary>
            Create a new Rotation transformation with specified angles and rotation centers.
            </summary>
            <param name="angleRadians">Angle (in Radians) of the rotation.</param>
            <param name="rotationCenter">Center point of rotation. Rotation axis is vertical.</param>
            <returns>A transformation matrix which rotates geometry around an anchor point.</returns>
        </member>
        <member name="M:Rhino.Geometry.Transform.Rotation(System.Double,Rhino.Geometry.Vector3d,Rhino.Geometry.Point3d)">
            <summary>
            Create a new Rotation transformation with specified angles, rotation centers and rotation axes.
            </summary>
            <param name="angleRadians">Angle (in Radians) of the rotation.</param>
            <param name="rotationAxis">Axis direction of rotation operation.</param>
            <param name="rotationCenter">Center point of rotation. Rotation axis is vertical.</param>
            <returns>A transformation matrix which rotates geometry around an anchor point.</returns>
        </member>
        <member name="M:Rhino.Geometry.Transform.Rotation(Rhino.Geometry.Vector3d,Rhino.Geometry.Vector3d,Rhino.Geometry.Vector3d,Rhino.Geometry.Vector3d,Rhino.Geometry.Vector3d,Rhino.Geometry.Vector3d)">
            <summary>
            transformation maps X0 to X1, Y0 to Y1, Z0 to Z1
            </summary>
            <param name="x0">
            </param>
            <param name="y0">
            </param>
            <param name="z0">
            </param>
            <param name="x1">
            </param>
            <param name="y1">
            </param>
            <param name="z1">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Transform.Mirror(Rhino.Geometry.Point3d,Rhino.Geometry.Vector3d)">
            <summary>
            Create mirror transformation matrix
            The mirror transform maps a point Q to
            Q - (2*(Q-P)oN)*N, where
            P = pointOnMirrorPlane and N = normalToMirrorPlane.
            </summary>
            <param name="pointOnMirrorPlane">Point on the mirror plane.</param>
            <param name="normalToMirrorPlane">Normal vector to the mirror plane.</param>
            <returns>A transformation matrix which mirrors geometry in a specified plane.</returns>
        </member>
        <member name="M:Rhino.Geometry.Transform.Mirror(Rhino.Geometry.Plane)">
            <summary>
            Create a new Mirror transformation.
            </summary>
            <param name="mirrorPlane">Plane that defines the mirror orientation and position.</param>
            <returns>A transformation matrix which mirrors geometry in a specified plane.</returns>
        </member>
        <member name="M:Rhino.Geometry.Transform.ChangeBasis(Rhino.Geometry.Plane,Rhino.Geometry.Plane)">
            <summary>
            Computes a change of basis transformation. A basis change is essentially a remapping
            of geometry from one coordinate system to another.
            </summary>
            <param name="plane0">Coordinate system in which the geometry is currently described.</param>
            <param name="plane1">Target coordinate system in which we want the geometry to be described.</param>
            <returns>
            A transformation matrix which orients geometry from one coordinate system to another on success.
            Transform.Unset on failure
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Transform.PlaneToPlane(Rhino.Geometry.Plane,Rhino.Geometry.Plane)">
            <example>
                <code source="examples\vbnet\ex_orientonsrf.vb" lang="vbnet" />
                <code source="examples\cs\ex_orientonsrf.cs" lang="cs" />
                <code source="examples\py\ex_orientonsrf.py" lang="py" />
            </example>
        </member>
        <member name="M:Rhino.Geometry.Transform.ChangeBasis(Rhino.Geometry.Vector3d,Rhino.Geometry.Vector3d,Rhino.Geometry.Vector3d,Rhino.Geometry.Vector3d,Rhino.Geometry.Vector3d,Rhino.Geometry.Vector3d)">
            <summary>
            Computes a change of basis transformation. A basis change is essentially a remapping
            of geometry from one coordinate system to another.
            </summary>
            <param name="initialBasisX">can be any 3d basis</param>
            <param name="initialBasisY">can be any 3d basis</param>
            <param name="initialBasisZ">can be any 3d basis</param>
            <param name="finalBasisX">can be any 3d basis</param>
            <param name="finalBasisY">can be any 3d basis</param>
            <param name="finalBasisZ">can be any 3d basis</param>
            <returns>
            A transformation matrix which orients geometry from one coordinate system to another on success.
            Transform.Unset on failure
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Transform.PlanarProjection(Rhino.Geometry.Plane)">
            <summary>
            Create a projection transformation.
            </summary>
            <param name="plane">Plane onto which everything will be perpendicularly projected.</param>
            <returns>A transformation matrix which projects geometry onto a specified plane.</returns>
        </member>
        <member name="M:Rhino.Geometry.Transform.Shear(Rhino.Geometry.Plane,Rhino.Geometry.Vector3d,Rhino.Geometry.Vector3d,Rhino.Geometry.Vector3d)">
            <summary>
            Create a Shear transformation.
            </summary>
            <param name="plane">Base plane for shear.</param>
            <param name="x">Shearing vector along plane x-axis.</param>
            <param name="y">Shearing vector along plane y-axis.</param>
            <param name="z">Shearing vector along plane z-axis.</param>
            <returns>A transformation matrix which shear geometry.</returns>
        </member>
        <member name="M:Rhino.Geometry.Transform.Multiply(Rhino.Geometry.Transform,Rhino.Geometry.Transform)">
            <summary>
            Multiply (combine) two transformations.
            </summary>
            <param name="a">First transformation.</param>
            <param name="b">Second transformation.</param>
            <returns>A transformation matrix that combines the effect of both input transformations.
            The resulting Transform gives the same result as though you'd first apply A then B.</returns>
        </member>
        <member name="M:Rhino.Geometry.Transform.TryGetInverse(Rhino.Geometry.Transform@)">
            <summary>
            Attempt to get the Inverse Transform of this Transform.
            </summary>
            <param name="inverseTransform">
            </param>
            <returns>
            True on success.
            If false is returned and this Transform is Invalid, inserveTransform will be set to this Transform.
            If false is returned and this Transform is Valid, inverseTransform will be set to a pseudo inverse.
            </returns>
        </member>
        <member name="T:Rhino.Geometry.TransformSimilarityType">
            <summary>
            Lists all possible outcomes for Transform Similarity.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.TransformSimilarityType.OrientationReversing">
            <summary>
            Similarity is preserved, but orientation is flipped.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.TransformSimilarityType.NotSimilarity">
            <summary>
            Similarity is not preserved. Geometry needs to be deformable for this Transform to operate correctly.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.TransformSimilarityType.OrientationPreserving">
            <summary>
            Similarity and orientation are preserved.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.SpaceMorph.Tolerance">
            <summary>
            The desired accuracy of the morph. This value is primarily used for deforming
            surfaces and breps. The default is 0.0 and any value &lt;= 0.0 is ignored by
            morphing functions. The Tolerance value does not affect the way meshes and points
            are morphed.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.SpaceMorph.QuickPreview">
            <summary>
            True if the morph should be done as quickly as possible because the result
            is being used for some type of dynamic preview. If QuickPreview is true,
            the tolerance may be ignored.
            The QuickPreview value does not affect the way meshes and points are morphed.
            The default is false.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.SpaceMorph.PreserveStructure">
            <summary>
            True if the morph should be done in a way that preserves the structure of the geometry.
            In particular, for NURBS objects, true means that only the control points are moved.
            The PreserveStructure value does not affect the way meshes and points are morphed.
            The default is false.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.SpaceMorph.Morph(Rhino.Geometry.GeometryBase)">
            <summary>Apply the space morph to geometry</summary>
            <param name="geometry">
            </param>
            <returns>true on success, false on failure</returns>
        </member>
        <member name="M:Rhino.Geometry.SpaceMorph.IsMorphable(Rhino.Geometry.GeometryBase)">
            <summary>
            True if the geometry can be morphed by calling SpaceMorph.Morph(geometry)
            </summary>
        </member>
        <member name="M:Rhino.Geometry.SpaceMorph.MorphPoint(Rhino.Geometry.Point3d)">
            <summary>Morphs euclidean point</summary>
            <param name="point">
            </param>
            <returns>morphed point</returns>
        </member>
        <member name="T:Rhino.DocObjects.Tables.NamedConstructionPlaneTable">
            <summary>
            All named construction planes in a rhino document
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.Tables.NamedConstructionPlaneTable.Item(System.Int32)">
            <summary>
            Conceptually, the named construction plane table is an array of ConstructionPlanes
            and their associated names. The operator[] can be used to get individual ConstructionPlanes.
            </summary>
            <param name="index">zero based array index</param>
            <returns>
            </returns>
        </member>
        <member name="P:Rhino.DocObjects.Tables.NamedConstructionPlaneTable.Document">
            <summary>Document that owns this table</summary>
        </member>
        <member name="P:Rhino.DocObjects.Tables.NamedConstructionPlaneTable.Count">
            <summary>Number of construction planes in the table</summary>
        </member>
        <member name="M:Rhino.DocObjects.Tables.NamedConstructionPlaneTable.Find(System.String)">
            <summary>Find a named construction plane</summary>
            <param name="name">
            Name of construction plane to search for.
            </param>
            <returns>
            &gt;=0 index of the construction plane with the given name.
            -1 no construction plane found with the given name
            </returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.NamedConstructionPlaneTable.Add(System.String,Rhino.Geometry.Plane)">
            <summary>
            Add named construction plane to document.
            </summary>
            <param name="name">
            If name is empty, a unique name is automatically created.
            If there is already a named onstruction plane with the same name, that
            construction plane is replaced.
            </param>
            <param name="plane">
            </param>
            <returns>
            0 based index of named construction plane.
            -1 on failure
            </returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.NamedConstructionPlaneTable.Delete(System.Int32)">
            <summary>
            Remove named construction plane from the document
            </summary>
            <param name="index">zero based array index</param>
            <returns>true if successful</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.NamedConstructionPlaneTable.Delete(System.String)">
            <summary>
            Remove named construction plane from the document
            </summary>
            <param name="name">name of the construction plane</param>
            <returns>true if successful</returns>
        </member>
        <member name="T:Rhino.DocObjects.Tables.NamedViewTable">
            <summary>
            All named views in a rhino document
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.Tables.NamedViewTable.Item(System.Int32)">
            <summary>
            Conceptually, the named view table is an array of ViewInfo and their associated names.
            The operator[] can be used to get individual ViewInfo items.
            </summary>
            <param name="index">zero based array index</param>
            <returns>
            </returns>
        </member>
        <member name="P:Rhino.DocObjects.Tables.NamedViewTable.Document">
            <summary>Document that owns this table</summary>
        </member>
        <member name="P:Rhino.DocObjects.Tables.NamedViewTable.Count">
            <summary>Number of named views in the table</summary>
        </member>
        <member name="M:Rhino.DocObjects.Tables.NamedViewTable.Find(System.String)">
            <summary>Find a named view</summary>
            <param name="name">name to search for</param>
            <returns>
            &gt;=0 index of the found named view
            -1 no named view found
            </returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.NamedViewTable.Add(System.String,System.Guid)">
            <summary>
            Add named view to document which is based on an existing viewport
            </summary>
            <param name="name">
            If name is empty, a unique name is automatically created.
            If there is already a named view with the same name, that view is replaced.
            </param>
            <param name="viewportId">
            Id of an existing viewport in the document. View information is copied from this viewport</param>
            <returns>
            0 based index of named view.
            -1 on failure
            </returns>
            <example>
                <code source="examples\vbnet\ex_addnamedview.vb" lang="vbnet" />
                <code source="examples\cs\ex_addnamedview.cs" lang="cs" />
                <code source="examples\py\ex_addnamedview.py" lang="py" />
            </example>
        </member>
        <member name="M:Rhino.DocObjects.Tables.NamedViewTable.Delete(System.Int32)">
            <summary>Remove named view from the document</summary>
            <param name="index">index of the named view in the named view table</param>
            <returns>true if successful</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.NamedViewTable.Delete(System.String)">
            <summary>Remove named view from the document</summary>
            <param name="name">name of the view</param>
            <returns>true if successful</returns>
        </member>
        <member name="T:Rhino.DocObjects.Tables.FontTable">
            <summary>
            Font tables store the list of fonts in a Rhino document.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.Tables.FontTable.Document">
            <summary>Document that owns this table</summary>
        </member>
        <member name="P:Rhino.DocObjects.Tables.FontTable.Count">
            <summary>Number of fonts in the table</summary>
        </member>
        <member name="T:Rhino.DocObjects.Tables.GroupTable">
            <summary>
            Group tables store the list of groups in a Rhino document.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.Tables.GroupTable.Document">
            <summary>Document that owns this group table</summary>
        </member>
        <member name="P:Rhino.DocObjects.Tables.GroupTable.Count">
            <summary>Number of groups in the group table</summary>
        </member>
        <member name="M:Rhino.DocObjects.Tables.GroupTable.Find(System.String,System.Boolean)">
            <summary>Find group with a given name</summary>
            <param name="groupName">
            Name of group to search for. Ignores case
            </param>
            <param name="ignoreDeletedGroups">
            True means don't search deleted groups.
            </param>
            <returns>
            &gt;=0 index of the group with the given name.
            -1 no group found with the given name
            </returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.GroupTable.Add(System.String)">
            <summary>Add a new empty group to the group table</summary>
            <param name="groupName">name of new group</param>
            <returns>
            &gt;=0 index of new group.
            -1 group not added because a group with that name already exists.
            </returns>
            <remarks>
            In some cases, calling Add() can cause the group indices to become invalid.
            </remarks>
        </member>
        <member name="M:Rhino.DocObjects.Tables.GroupTable.Add">
            <summary>Add a new empty group to the group table</summary>
            <returns>
            &gt;=0 index of new group.
            -1 group not added because a group with that name already exists.
            </returns>
            <remarks>
            In some cases, calling Add() can cause the group indices to become invalid.
            </remarks>
        </member>
        <member name="M:Rhino.DocObjects.Tables.GroupTable.Add(System.String,System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Add a new group to the group table with a set of objects
            </summary>
            <param name="groupName">name of new group</param>
            <param name="objectIds">
            </param>
            <returns>
            &gt;=0 index of new group.
            -1 group not added because a group with that name already exists.
            </returns>
            <remarks>
            In some cases, calling Add() can cause the group indices to become invalid.
            </remarks>
        </member>
        <member name="M:Rhino.DocObjects.Tables.GroupTable.Add(System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Add a new group to the group table with a set of objects
            </summary>
            <param name="objectIds">
            </param>
            <returns>
            &gt;=0 index of new group.
            -1 group not added because a group with that name already exists.
            </returns>
            <remarks>
            In some cases, calling Add() can cause the group indices to become invalid.
            </remarks>
            <example>
                <code source="examples\vbnet\ex_addobjectstogroup.vb" lang="vbnet" />
                <code source="examples\cs\ex_addobjectstogroup.cs" lang="cs" />
                <code source="examples\py\ex_addobjectstogroup.py" lang="py" />
            </example>
        </member>
        <member name="M:Rhino.DocObjects.Tables.GroupTable.AddToGroup(System.Int32,System.Guid)">
            <summary>
            Add an object to an existing group
            </summary>
            <param name="groupIndex">
            </param>
            <param name="objectId">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.GroupTable.AddToGroup(System.Int32,System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Adds a list of objects to an existing group
            </summary>
            <param name="groupIndex">
            </param>
            <param name="objectIds">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.GroupTable.Delete(System.Int32)">
            <summary>
            Deleted groups are kept in the runtime group table so that undo
            will work with groups.  Call IsDeleted() to determine if a group is deleted.
            </summary>
            <param name="groupIndex">
            </param>
            <returns>
            </returns>
        </member>
        <member name="P:Rhino.DocObjects.HatchPattern.IsDeleted">
            <summary>
            Deleted hatch patterns are kept in the runtime hatch pattern table so that undo
            will work with hatch patterns.  Call IsDeleted to determine to determine if
            a hatch pattern is deleted.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.HatchPattern.IsReference">
            <summary>
            Rhino allows multiple files to be viewed simultaneously. Hatch patterns in the
            document are "normal" or "reference". Reference hatch patterns are not saved.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.HatchPattern.Index">
            <summary>
            Index in the hatch pattern table for this pattern. -1 if not in the table
            </summary>
        </member>
        <member name="M:Rhino.DocObjects.HatchPattern.ReadFromFile(System.String,System.Boolean)">
            <summary>
            Read hatch pattern definitions from a file
            </summary>
            <param name="filename">
            Name of an existing file. If filename is null or emtpty, default hatch pattern filename is used
            </param>
            <param name="quiet">
            If file doesn't exist, and quiet is false, an error meesage box is shown.
            </param>
            <returns>
            </returns>
        </member>
        <member name="T:Rhino.DocObjects.Tables.HatchPatternTable">
            <summary>
            All of the hatch pattern definitions contained in a rhino document
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.Tables.HatchPatternTable.Item(System.Int32)">
            <summary>
            Conceptually, the hatch pattern table is an array of hatch patterns.
            The operator[] can be used to get individual hatch patterns. A hatch pattern is
            either active or deleted and this state is reported by HatchPattern.IsDeleted
            </summary>
            <param name="index">zero based array index</param>
            <returns>
            If index is out of range, the current hatch pattern is returned
            </returns>
        </member>
        <member name="P:Rhino.DocObjects.Tables.HatchPatternTable.Document">
            <summary>Document that owns this table</summary>
        </member>
        <member name="P:Rhino.DocObjects.Tables.HatchPatternTable.Count">
            <summary>Number of patterns in the table</summary>
        </member>
        <member name="P:Rhino.DocObjects.Tables.HatchPatternTable.CurrentHatchPatternIndex">
            <summary>
            At all times, there is a "current" hatch pattern.  Unless otherwise
            specified, new objects are assigned to the current hatch pattern.
            The current hatch pattern is never locked, hidden, or deleted.
            </summary>
        </member>
        <member name="M:Rhino.DocObjects.Tables.HatchPatternTable.Find(System.String,System.Boolean)">
            <summary>
            Finds the hatch pattern with a given name. Search ignores case.
            </summary>
            <param name="name">
            </param>
            <param name="ignoreDeleted">true means don't search deleted hatch patterns</param>
            <returns>index of the hatch pattern with the given name. -1 if no hatch pattern found</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.HatchPatternTable.Add(Rhino.DocObjects.HatchPattern)">
            <summary>
            Adds a new hatch pattern with specified definition to the table
            </summary>
            <param name="pattern">
            definition of new hatch pattern. The information in pattern is copied.
            If patern.Name is empty the a unique name of the form "HatchPattern 01"
            will be automatically created.
            </param>
            <returns>
            &gt;=0 index of new hatch pattern
            -1  not added because a hatch pattern with that name already exists or
            some other problem occured
            </returns>
        </member>
        <member name="T:Rhino.DocObjects.InstanceDefinitionUpdateType">
            <summary>
            The possible relationships between the instance definition geometry
            and the archive containing the original defition.
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.InstanceDefinitionUpdateType.Static">
            <summary>
            This instance definition is never updated. If m_source_archive is set,
            it records the origin of the instance definition geometry, but
            m_source_archive is never used to update the instance definition
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.InstanceDefinitionUpdateType.Embedded">
            <summary>
            This instance definition geometry was imported from another archive (m_source_archive)
            and is embedded. If m_source_archive changes, the user is asked if they want to update
            the instance definition.
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.InstanceDefinitionUpdateType.LinkedAndEmbedded">
            <summary>
            This instance definition geometry was imported from another archive (m_source_archive)
            and is embedded. If m_source_archive changes, the instance definition is automatically
            updated. If m_source_archive is not available, the instance definition is still valid.
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.InstanceDefinitionUpdateType.Linked">
            <summary>
            This instance definition geometry was imported from another archive (m_source_archive)
            and is not embedded. If m_source_archive changes, the instance definition is automatically
            updated. If m_source_archive is not available, the instance definition is not valid.
            This does not save runtime memory.  It may save a little disk space, but it is a  foolish
            option requested by people who do not understand all the issues.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.InstanceObject.InstanceXform">
            <summary>
            transformation applied to an instance definition for this object
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.InstanceObject.InsertionPoint">
            <summary>Basepoint coordinates of a block</summary>
            <example>
                <code source="examples\vbnet\ex_blockinsertionpoint.vb" lang="vbnet" />
                <code source="examples\cs\ex_blockinsertionpoint.cs" lang="cs" />
                <code source="examples\py\ex_blockinsertionpoint.py" lang="py" />
            </example>
        </member>
        <member name="P:Rhino.DocObjects.InstanceObject.InstanceDefinition">
            <summary>
            instance definition that this object uses
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.InstanceDefinition.ObjectCount">
            <summary>
            Number of objects this definition uses. This counts the objects that are used to define the geometry.
            This does NOT count the number of references to this instance definition.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.InstanceDefinition.Index">
            <summary>
            index of this instance definition in the index definition table.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.InstanceDefinition.IsReference">
            <summary>
            An object from a work session reference model is reference a
            reference object and cannot be modified.  An object is a reference
            object if, and only if, it is on a reference layer.
            </summary>
        </member>
        <member name="M:Rhino.DocObjects.InstanceDefinition.Object(System.Int32)">
            <summary>
            returns an object used as part of this definition.
            </summary>
            <param name="index">0 &lt;= index &lt; ObjectCount</param>
            <returns>
            Returns an object that is used to define the geometry.
            Does NOT return an object that references this definition.count the number of references to this instance
            </returns>
        </member>
        <member name="M:Rhino.DocObjects.InstanceDefinition.GetObjects">
            <summary>
            Get a list of the objects that belong to this instance definition.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:Rhino.DocObjects.InstanceDefinition.GetReferences(System.Int32)">
            <summary>
            Get a list of the CRhinoInstanceObjects (inserts) that contains
            a reference this instance definition.
            </summary>
            <param name="wheretoLook">
            0 = get top level references in active document
            1 = get top level and nested references in active document
            2 = check for references from other instance definitions
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Rhino.DocObjects.InstanceDefinition.GetContainers">
            <summary>
            Get a list of all the InstanceDefinitions that contain a reference this InstanceDefinition.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:Rhino.DocObjects.InstanceDefinition.UsesDefinition(System.Int32)">
            <summary>
            Determine if this instance definition contains a reference to another instance definition.
            </summary>
            <param name="otherIdefIndex">index of another instance definition</param>
            <returns>
            0      no
            1      other_idef_index is the index of this instance definition
            &gt;1      This InstanceDefinition uses the instance definition
            and the returned value is the nesting depth.
            </returns>
        </member>
        <member name="M:Rhino.DocObjects.InstanceDefinition.InUse(System.Int32)">
            <summary>
            Returns true if the instance definition is refereneced.
            </summary>
            <param name="wheretoLook">
            0 = check for top level references in active document
            1 = check for top level and nested references in active document
            2 = check for references in other instance definitions
            </param>
            <returns>
            </returns>
        </member>
        <member name="P:Rhino.DocObjects.Tables.InstanceDefinitionTable.Document">
            <summary>Document that owns this table</summary>
        </member>
        <member name="P:Rhino.DocObjects.Tables.InstanceDefinitionTable.Count">
            <summary>Number of items in the instance definitions table</summary>
        </member>
        <member name="M:Rhino.DocObjects.Tables.InstanceDefinitionTable.Find(System.String,System.Boolean)">
            <summary>Finds the instance definition with a given name</summary>
            <param name="instanceDefinitionName">name of instance definition to search for (ignores case)</param>
            <param name="ignoreDeletedInstanceDefinitions">true means don't search deleted instance definitions</param>
            <returns>
            </returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.InstanceDefinitionTable.Find(System.Guid,System.Boolean)">
            <summary>Finds the instance definition with a given id</summary>
            <param name="instanceId">Unique id of the instance definition to search for</param>
            <param name="ignoreDeletedInstanceDefinitions">true means don't search deleted instance definitions</param>
            <returns>
            </returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.InstanceDefinitionTable.Modify(Rhino.DocObjects.InstanceDefinition,System.String,System.String,System.Boolean)">
            <summary>
            Modify instance definition name and description.
            Does not change instance defintion uuid or geometry.
            </summary>
            <param name="idef">
            </param>
            <param name="newName">
            </param>
            <param name="newDescription">
            </param>
            <param name="quiet">
            if true, information message boxes pop up when illegal changes are attempted.
            </param>
            <returns>
            true if successful
            </returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.InstanceDefinitionTable.MakeSourcePathRelative(Rhino.DocObjects.InstanceDefinition,System.Boolean,System.Boolean)">
            <summary>
            Marks the source path for a linked instance definition as relative or absolute
            </summary>
            <param name="idef">
            </param>
            <param name="relative">
            if true, the path should be considered as relative
            if false, the path should be considered as absolute
            </param>
            <param name="quiet">
            </param>
            <returns>
            true if the instance defintion could be modified
            </returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.InstanceDefinitionTable.Delete(System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Deletes instance definition
            </summary>
            <param name="idefIndex">
            zero based index of instance definition to delete.
            This must be in the range 0 &lt;= idefIndex &lt; InstanceDefinitionTable.Count
            </param>
            <param name="deleteReferences">
            true to delete all references to this definition.
            false to delete definition only if there are no references.
            </param>
            <param name="quiet">
            If true, no warning message box appears if an instance definition cannot be
            deleted because it is the current layer or it contains active geometry.
            </param>
            <returns>
            true if successful. false if the instance definition has active references and bDeleteReferences is false.
            </returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.InstanceDefinitionTable.GetList(System.Boolean)">
            <summary>
            </summary>
            <param name="ignoreDeleted">if true then deleted layers are filtered out</param>
            <returns>
            </returns>
        </member>
        <member name="P:Rhino.DocObjects.Layer.Name">
            <summary>The name of this layer</summary>
            <example>
                <code source="examples\vbnet\ex_sellayer.vb" lang="vbnet" />
                <code source="examples\cs\ex_sellayer.cs" lang="cs" />
                <code source="examples\py\ex_sellayer.py" lang="py" />
            </example>
        </member>
        <member name="P:Rhino.DocObjects.Layer.LayerIndex">
            <summary>
            Gets the index of this layer.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.Layer.Id">
            <summary>
            Gets the ID of this layer object.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.Layer.ParentLayerId">
            <summary>
            Gets the ID of the parent layer. Layers can be origanized in a hierarchical structure,
            in which case this returns the parent layer ID. If the layer has no parent,
            Guid.Empty will be returned.
            </summary>
            <example>
                <code source="examples\vbnet\ex_addchildlayer.vb" lang="vbnet" />
                <code source="examples\cs\ex_addchildlayer.cs" lang="cs" />
                <code source="examples\py\ex_addchildlayer.py" lang="py" />
            </example>
        </member>
        <member name="P:Rhino.DocObjects.Layer.IgesLevel">
            <summary>
            Gets the IGES level for this layer.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.Layer.Color">
            <summary>
            Gets the display color for this layer.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.Layer.PlotColor">
            <summary>
            Gets the plot color for this layer.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.Layer.PlotWeight">
            <summary>
            Gets the thickness of the plotting pen in millimeters.
            A thickness of 0.0 indicates the "default" pen weight should be used.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.Layer.LinetypeIndex">
            <summary>
            Gets the line-type index for this layer.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.Layer.RenderMaterialIndex">
            <summary>
            Gets the index of render material for objects on this layer that have
            MaterialSource() == MaterialFromLayer.
            A material index of -1 indicates no material has been assigned
            and the material created by the default Material constructor
            should be used.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.Layer.IsVisible">
            <summary>
            Gets the visibility of this layer.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.Layer.IsLocked">
            <summary>
            Gets a value indicating the locked state of this layer.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.Layer.IsExpanded">
            <summary>
            Gets a value indicating whether this layer is expanded in the Rhino Layer dialog.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.Layer.IsDeleted">
            <summary>
            Gets a value indicating whether this layer has been deleted and is
            currently in the Undo buffer.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.Layer.IsReference">
            <summary>
            Gets a value indicting whether this layer is a referenced layer.
            Referenced layers are part of referenced documents.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.Layer.SortIndex">
            <summary>Runtime index used to sort layers in layer dialog</summary>
        </member>
        <member name="M:Rhino.DocObjects.Layer.GetDefaultLayerProperties">
            <summary>
            Creates a Layer with the current default layer properties.
            The default layer properties are:
            color = Rhino.ApplicationSettings.AppearanceSettings.DefaultLayerColor
            line style = Rhino.ApplicationSettings.AppearanceSettings.DefaultLayerLineStyle
            material index = -1
            iges level = -1
            mode = NormalLayer
            name = empty
            layer index = 0 (ignored by AddLayer)
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:Rhino.DocObjects.Layer.Default">
            <summary>
            Set layer to default settings
            </summary>
        </member>
        <member name="M:Rhino.DocObjects.Layer.IsValidName(System.String)">
            <summary>
            Determine if a given string is valid for a layer name
            </summary>
            <param name="name">
            </param>
            <returns>
            </returns>
            <example>
                <code source="examples\vbnet\ex_addlayer.vb" lang="vbnet" />
                <code source="examples\cs\ex_addlayer.cs" lang="cs" />
                <code source="examples\py\ex_addlayer.py" lang="py" />
            </example>
        </member>
        <member name="M:Rhino.DocObjects.Layer.GetChildren">
            <summary>
            Get immediate children of this layer. Note that child layers may have their own children
            </summary>
            <returns>Array of child layers. null if this layer does not have any children</returns>
        </member>
        <member name="P:Rhino.DocObjects.Tables.LayerTable.Item(System.Int32)">
            <summary>
            Conceptually, the layer table is an array of layers.
            The operator[] can be used to get individual layers. A layer is
            either active or deleted and this state is reported by Layer.IsDeleted
            </summary>
            <param name="index">zero based array index</param>
            <returns>
            Refererence to the layer.  If layer_index is out of range, the current
            layer is returned. Note that this reference may become invalid after
            AddLayer() is called.
            </returns>
        </member>
        <member name="P:Rhino.DocObjects.Tables.LayerTable.Document">
            <summary>Document that owns this table</summary>
        </member>
        <member name="P:Rhino.DocObjects.Tables.LayerTable.Count">
            <summary>
            Returns number of layers in the layer table, including deleted layers.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.Tables.LayerTable.ActiveCount">
            <summary>
            Returns number of layers in the layer table, excluding deleted layers
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.Tables.LayerTable.CurrentLayerIndex">
            <summary>
            At all times, there is a "current" layer.  Unless otherwise specified, new objects
            are assigned to the current layer. The current layer is never locked, hidden, or deleted.
            Resturns: Zero based layer table index of the current layer
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.Tables.LayerTable.CurrentLayer">
            <summary>
            At all times, there is a "current" layer. Unless otherwise specified,
            new objects are assigned to the current layer. The current layer is
            never locked, hidden, or deleted.
            Returns reference to the current layer. Note that this reference may
            become invalid after a call to AddLayer().
            </summary>
            <example>
                <code source="examples\vbnet\ex_sellayer.vb" lang="vbnet" />
                <code source="examples\cs\ex_sellayer.cs" lang="cs" />
                <code source="examples\py\ex_sellayer.py" lang="py" />
            </example>
        </member>
        <member name="M:Rhino.DocObjects.Tables.LayerTable.SetCurrentLayerIndex(System.Int32,System.Boolean)">
            <summary>
            At all times, there is a "current" layer. Unless otherwise specified, new objects
            are assigned to the current layer. The current layer is never locked, hidden, or deleted.
            </summary>
            <param name="layerIndex">
            Value for new current layer. 0 &lt;= layerIndex &lt; LayerTable.Count.
            The layer's mode is automatically set to NormalMode.
            </param>
            <param name="quiet">
            if true, then no warning message box pops up if the current layer request can't be satisfied.
            </param>
            <returns>true if current layer index successfully set.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.LayerTable.Find(System.String,System.Boolean)">
            <summary>
            Finds the layer with a given name.
            </summary>
            <param name="layerName">name of layer to search for. The search ignores case.</param>
            <param name="ignoreDeletedLayers">true means don't search deleted layers.</param>
            <returns>
            &gt;=0 index of the layer with the given name
            -1  no layer has the given name
            </returns>
            <example>
                <code source="examples\vbnet\ex_addlayer.vb" lang="vbnet" />
                <code source="examples\cs\ex_addlayer.cs" lang="cs" />
                <code source="examples\py\ex_addlayer.py" lang="py" />
            </example>
        </member>
        <member name="M:Rhino.DocObjects.Tables.LayerTable.Find(System.Guid,System.Boolean)">
            <summary>Find a layer with a matching id</summary>
            <param name="layerId">
            </param>
            <param name="ignoreDeletedLayers">If true, deleted layers are not checked</param>
            <returns>
            &gt;=0 index of the layer with the given name
            -1  no layer has the given name
            </returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.LayerTable.Add(Rhino.DocObjects.Layer)">
            <summary>
            Adds a new layer with specified definition to the layer table
            </summary>
            <param name="layer">
            definition of new layer. The information in layer is copied. If layer.Name is empty
            the a unique name of the form "Layer 01" will be automatically created.
            </param>
            <returns>
            &gt;=0 index of new layer
            -1  layer not added because a layer with that name already exists.
            </returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.LayerTable.Add(System.String,System.Drawing.Color)">
            <summary>
            Adds a new layer with specified definition to the layer table
            </summary>
            <param name="layerName">Name for new layer. Cannot be a null or zero-length string.</param>
            <param name="layerColor">Color of new layer. Alpha components will be ignored.</param>
            <returns>
            &gt;=0 index of new layer
            -1  layer not added because a layer with that name already exists.
            </returns>
            <example>
                <code source="examples\vbnet\ex_addlayer.vb" lang="vbnet" />
                <code source="examples\cs\ex_addlayer.cs" lang="cs" />
                <code source="examples\py\ex_addlayer.py" lang="py" />
            </example>
        </member>
        <member name="M:Rhino.DocObjects.Tables.LayerTable.AddReferenceLayer(Rhino.DocObjects.Layer)">
            <summary>
            Adds a new reference layer with specified definition to the layer table
            Reference layers are not saved in files
            </summary>
            <param name="layer">
            definition of new layer. The information in layer is copied. If layer.Name is empty
            the a unique name of the form "Layer 01" will be automatically created.
            </param>
            <returns>
            &gt;=0 index of new layer
            -1  layer not added because a layer with that name already exists.
            </returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.LayerTable.Add">
            <summary>
            Adds a new layer with default definition to the layer table.
            </summary>
            <returns>index of new layer</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.LayerTable.AddReferenceLayer">
            <summary>
            Adds a new reference layer with default definition to the layer table.
            Reference layers are not saved in files
            </summary>
            <returns>index of new layer</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.LayerTable.Modify(Rhino.DocObjects.Layer,System.Int32,System.Boolean)">
            <summary>Modify layer settings</summary>
            <param name="newSettings">This information is copied</param>
            <param name="layerIndex">
            zero based index of layer to set.  This must be in the range 0 &lt;= layerIndex &lt; LayerTable.Count
            </param>
            <param name="quiet">if true, information message boxes pop up when illegal changes are attempted.</param>
            <returns>
            true if successful. false if layerIndex is out of range or the settings attempt
            to lock or hide the current layer.
            </returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.LayerTable.UndoModify(System.Int32,System.UInt32)">
            <summary>
            If the layer has been modified and the modifcation can be undone,
            then UndoModifyLayer() will restore the layer to its previous state.
            </summary>
            <param name="layerIndex">
            </param>
            <param name="undoRecordSerialNumber">
            </param>
            <returns>true if this layer had been modified and the modifications were undone</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.LayerTable.Delete(System.Int32,System.Boolean)">
            <summary>Deletes layer</summary>
            <param name="layerIndex">
            zero based index of layer to delete. This must be in the range 0 &lt;= layerIndex &lt; LayerTable.Count
            </param>
            <param name="quiet">
            If true, no warning message box appears if a layer the layer cannot be
            deleted because it is the current layer or it contains active geometry.
            </param>
            <returns>
            true if successful. false if layer_index is out of range or the the layer cannot be
            deleted because it is the current layer or because it layer contains active geometry.
            </returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.LayerTable.Undelete(System.Int32)">
            <summary>
            Undeletes a layer that has been deleted by DeleteLayer().
            </summary>
            <param name="layerIndex">
            zero based index of layer to undelete.
            This must be in the range 0 &lt;= layerIndex &lt; LayerTable.Count
            </param>
            <returns>true if successful</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.LayerTable.GetUnusedLayerName(System.Boolean)">
            <summary>
            Gets unused layer name used as default when creating new layers.
            </summary>
            <param name="ignoreDeleted">
            if this is true then may use a name used by a deleted layer.
            </param>
            <returns>
            </returns>
            <example>
                <code source="examples\vbnet\ex_addlayer.vb" lang="vbnet" />
                <code source="examples\cs\ex_addlayer.cs" lang="cs" />
                <code source="examples\py\ex_addlayer.py" lang="py" />
            </example>
        </member>
        <member name="P:Rhino.DocObjects.Tables.LightTable.Document">
            <summary>Document that owns this light table</summary>
        </member>
        <member name="P:Rhino.DocObjects.Tables.LightTable.Count">
            <summary>Number of lights in the light table.  Does not include Sun or Skylight</summary>
        </member>
        <member name="P:Rhino.DocObjects.Linetype.Name">
            <summary>The name of this linetype</summary>
        </member>
        <member name="P:Rhino.DocObjects.Linetype.LinetypeIndex">
            <summary>The index of this linetype.</summary>
        </member>
        <member name="P:Rhino.DocObjects.Linetype.PatternLength">
            <summary>Total length of one repeat of the pattern</summary>
        </member>
        <member name="P:Rhino.DocObjects.Linetype.SegmentCount">
            <summary>Number of segments in the pattern</summary>
        </member>
        <member name="P:Rhino.DocObjects.Linetype.Id">
            <summary>
            Gets the ID of this linetype object.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.Linetype.IsDeleted">
            <summary>
            Gets a value indicating whether this linetype has been deleted and is
            currently in the Undo buffer.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.Linetype.IsReference">
            <summary>
            Gets a value indicting whether this linetype is a referenced linetype.
            Referenced linetypes are part of referenced documents.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.Linetype.IsModified">
            <summary>
            true if this linetype has been modified by LinetypeTable.ModifyLinetype()
            and the modifications can be undone.
            </summary>
        </member>
        <member name="M:Rhino.DocObjects.Linetype.Default">
            <summary>
            Set linetype to default settings
            </summary>
        </member>
        <member name="M:Rhino.DocObjects.Linetype.AppendSegment(System.Double,System.Boolean)">
            <summary>Adds a segment to the pattern</summary>
            <param name="length">
            </param>
            <param name="isSolid">
            If true, the length is interpreted as a line. If false,
            the length is interpreted as a space
            </param>
            <returns>index of the added segment</returns>
        </member>
        <member name="M:Rhino.DocObjects.Linetype.RemoveSegment(System.Int32)">
            <summary>Removes a segment in the linetype</summary>
            <param name="index">Zero based index of the segment to remove</param>
            <returns>True if the segment index was removed</returns>
        </member>
        <member name="M:Rhino.DocObjects.Linetype.SetSegment(System.Int32,System.Double,System.Boolean)">
            <summary>Sets the length and type of the segment at index</summary>
            <param name="index">Zero based index of the segment</param>
            <param name="length">
            </param>
            <param name="isSolid">
            </param>
            <returns>True on success</returns>
        </member>
        <member name="M:Rhino.DocObjects.Linetype.GetSegment(System.Int32,System.Double@,System.Boolean@)">
            <summary>
            Get segment information at index
            </summary>
            <param name="index">
            </param>
            <param name="length">
            </param>
            <param name="isSolid">
            </param>
            <exception cref="T:System.IndexOutOfRangeException">
            </exception>
        </member>
        <member name="P:Rhino.DocObjects.Tables.LinetypeTable.Item(System.Int32)">
            <summary>
            Conceptually, the linetype table is an array of linetypes.
            The operator[] can be used to get individual linetypes. A linetype is
            either active or deleted and this state is reported by Linetype.IsDeleted
            </summary>
            <param name="index">zero based array index</param>
            <returns>
            Refererence to the linetype.  If index is out of range, the current
            linetype is returned. Note that this reference may become invalid after
            AddLinetype() is called.
            </returns>
        </member>
        <member name="P:Rhino.DocObjects.Tables.LinetypeTable.Document">
            <summary>Document that owns this table</summary>
        </member>
        <member name="P:Rhino.DocObjects.Tables.LinetypeTable.Count">
            <summary>
            Returns number of linetypes in the linetypes table, including deleted linetypes.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.Tables.LinetypeTable.ActiveCount">
            <summary>
            Returns number of linetypes in the linetypes table, excluding deleted linetypes
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.Tables.LinetypeTable.CurrentLinetypeIndex">
            <summary>
            At all times, there is a "current" linetype.  Unless otherwise specified,
            new objects are assigned to the current linetype. If the current linetype
            source is LinetypeFromLayer the object's layer's linetype is used instead
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.Tables.LinetypeTable.LinetypeScale">
            <summary>
            For display in Rhino viewports, the linetypes are scaled by a single scale
            factor for all viewports. This is not used for printing, where all linetype
            patterns are scaled to print in their defined size 1:1 on the paper.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.Tables.LinetypeTable.CurrentLinetypeSource">
            <summary>
            Source used by an object to determine its current linetype to be used by new objects.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.Tables.LinetypeTable.CurrentLinetype">
            <summary>
            At all times, there is a "current" linetype. Unless otherwise specified,
            new objects are assigned to the current linetype. The current linetype
            is never deleted.
            Returns reference to the current linetype. Note that this reference may
            become invalid after a call to AddLinetype().
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.Tables.LinetypeTable.ContinuousLinetypeName">
            <summary>
            Returns the text name of the continuous linetype
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.Tables.LinetypeTable.ByLayerLinetypeName">
            <summary>
            Returns the text name of the bylayer linetype
            </summary>
        </member>
        <member name="M:Rhino.DocObjects.Tables.LinetypeTable.SetCurrentLinetypeIndex(System.Int32,System.Boolean)">
            <summary>
            At all times, there is a "current" linetype. Unless otherwise specified, new objects
            are assigned to the current linetype. The current linetype is never deleted.
            </summary>
            <param name="linetypeIndex">
            Value for new current linetype. 0 &lt;= linetypeIndex &lt; LinetypeTable.Count.
            </param>
            <param name="quiet">
            if true, then no warning message box pops up if the current linetype request can't be satisfied.
            </param>
            <returns>true if current linetype index successfully set.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.LinetypeTable.LinetypeIndexForObject(Rhino.DocObjects.RhinoObject)">
            <summary>
            Returns the effective linetype index to be used to find the
            linetype definition to draw an object. If an object's linetype
            source is LinetypeFromObject, the linetype index in the object's
            attributes is used. If an object's linetype source is LinetypeFromLayer
            the linetype index from the object's layer is used.
            </summary>
            <param name="rhinoObject">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.LinetypeTable.Find(System.String,System.Boolean)">
            <summary>Finds the linetype with a given name</summary>
            <param name="name">search ignores case</param>
            <param name="ignoreDeletedLinetypes">If true, deleted linetypes are not checked</param>
            <returns>
            &gt;=0 index of the linetype with the given name
            -1  no linetype has the given name
            </returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.LinetypeTable.Find(System.Guid,System.Boolean)">
            <summary>Find a linetype with a matching id</summary>
            <param name="id">
            </param>
            <param name="ignoreDeletedLinetypes">If true, deleted linetypes are not checked</param>
            <returns>
            &gt;=0 index of the linetype with the given name
            -1  no linetype has the given name
            </returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.LinetypeTable.Add(Rhino.DocObjects.Linetype)">
            <summary>
            Adds a new linetype with specified definition to the linetype table.
            </summary>
            <param name="linetype">
            Definition of new linetype.  The information in linetype is copied.
            If linetype.Name is empty then a unique name of the form "Linetype 01"
            will be automatically created.
            </param>
            <returns>
            index of new linetype or -1 on error
            </returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.LinetypeTable.Add(System.String,System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Adds a new linetype with specified definition to the linetype table.
            </summary>
            <param name="name">
            </param>
            <param name="segmentLengths">Positive values are dashes, negative values are gaps</param>
            <returns>
            index of new linetype or -1 on error
            </returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.LinetypeTable.AddReferenceLinetype(Rhino.DocObjects.Linetype)">
            <summary>
            Reference linetypes are not saved in files
            </summary>
            <param name="linetype">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.LinetypeTable.Modify(Rhino.DocObjects.Linetype,System.Int32,System.Boolean)">
            <summary>Modify linetype settings</summary>
            <param name="linetype">new settings.  This information is copied.</param>
            <param name="index">zero based index of linetype to set</param>
            <param name="quiet">
            if true, information message boxes pop up when illegal changes are attempted.
            </param>
            <returns>
            true if successful. false if linetype_index is out of range or the
            settings attempt to lock or hide the current linetype.
            </returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.LinetypeTable.UndoModify(System.Int32)">
            <summary>
            If the linetype has been modified and the modifcation can be undone,
            then UndoModify() will restore the linetype to its previous state.
            </summary>
            <param name="index">
            </param>
            <returns>
            true if this linetype had been modified and the modifications were undone
            </returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.LinetypeTable.Delete(System.Int32,System.Boolean)">
            <summary>Deletes linetype</summary>
            <param name="index">zero based index of linetype to delete</param>
            <param name="quiet">
            If true, no warning message box appears if a linetype the
            linetype cannot be deleted because it is the current linetype
            or it contains active geometry.
            </param>
            <returns>
            true if successful. false if linetype_index is out of range or the
            linetype cannot be deleted because it is the current linetype or
            because it linetype is referenced by active geometry.
            </returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.LinetypeTable.Delete(System.Collections.Generic.IEnumerable{System.Int32},System.Boolean)">
            <summary>Deletes multiple linetypes</summary>
            <param name="indices">
            </param>
            <param name="quiet">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.LinetypeTable.Undelete(System.Int32)">
            <summary>Undeletes a linetype that has been deleted</summary>
            <param name="index">
            </param>
            <returns>true if successful</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.LinetypeTable.GetUnusedLinetypeName(System.Boolean)">
            <summary>
            Gets unused linetype name used as default when creating new linetypes.
            </summary>
            <param name="ignoreDeleted">
            if this is true then may use a name used by a deleted linetype
            </param>
            <returns>
            </returns>
        </member>
        <member name="P:Rhino.DocObjects.Material.IsDeleted">
            <summary>
            Deleted materials are kept in the runtime material table so that undo
            will work with materials.  Call IsDeleted to determine to determine if
            a material is deleted.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.Material.IsReference">
            <summary>
            Rhino allows multiple files to be viewed simultaneously. Materials in the
            document are "normal" or "reference". Reference materials are not saved.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.Material.IsDefaultMaterial">
            <summary>
            By default Rhino layers and objects are assigned the default rendering material.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.Material.UseCount">
            <summary>
            Number of objects and layers that use this material.
            </summary>
        </member>
        <member name="M:Rhino.DocObjects.Material.Default">
            <summary>
            Set material to default settings
            </summary>
        </member>
        <member name="M:Rhino.DocObjects.Material.GetBumpTexture">
            <summary>
            may be null if no bump texture has been added to this material
            </summary>
            <returns>
            </returns>
        </member>
        <member name="P:Rhino.DocObjects.Tables.MaterialTable.Item(System.Int32)">
            <summary>
            Conceptually, the material table is an array of materials.
            The operator[] can be used to get individual materials. A material is
            either active or deleted and this state is reported by Material.IsDeleted
            </summary>
            <param name="index">zero based array index</param>
            <returns>
            If index is out of range, the current material is returned.
            </returns>
        </member>
        <member name="P:Rhino.DocObjects.Tables.MaterialTable.Document">
            <summary>Document that owns this table</summary>
        </member>
        <member name="P:Rhino.DocObjects.Tables.MaterialTable.Count">
            <summary>
            Returns number of materials in the material table, including deleted materials.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.Tables.MaterialTable.CurrentMaterialIndex">
            <summary>
            At all times, there is a "current" material.  Unless otherwise
            specified, new objects are assigned to the current material.
            The current material is never locked, hidden, or deleted.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.Tables.MaterialTable.CurrentMaterialSource">
            <summary>
            </summary>
        </member>
        <member name="M:Rhino.DocObjects.Tables.MaterialTable.Add">
            <summary>
            Adds a new material to the table based on the default material
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.MaterialTable.Find(System.String,System.Boolean)">
            <summary>
            Finds a meterial with a given name
            </summary>
            <param name="materialName">Name of the material to search for. The search ignores case.</param>
            <param name="ignoreDeletedMaterials">true means don't search deleted materials</param>
            <returns>
            &gt;=0 index of the material with the given name
            -1  no material has the given name
            </returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.MaterialTable.Find(System.Guid,System.Boolean)">
            <summary>Find a material with a matching id</summary>
            <param name="materialId">
            </param>
            <param name="ignoreDeletedMaterials">If true, deleted materials are not checked</param>
            <returns>
            &gt;=0 index of the material with the given name
            -1  no material has the given name
            </returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.MaterialTable.Modify(Rhino.DocObjects.Material,System.Int32,System.Boolean)">
            <summary>Modify material settings</summary>
            <param name="newSettings">This information is copied</param>
            <param name="materialIndex">
            zero based index of material to set.  This must be in the range 0 &lt;= layerIndex &lt; MaterialTable.Count
            </param>
            <param name="quiet">if true, information message boxes pop up when illegal changes are attempted.</param>
            <returns>
            true if successful. false if materialIndex is out of range or the settings attempt
            to lock or hide the current material.
            </returns>
        </member>
        <member name="T:Rhino.UI.MouseCallback">
            <summary>
            Used for intercepting mouse events in the Rhino viewports
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.ObjectAttributes.Mode">
            <summary>
            An object must be in one of three modes: normal, locked or hidden.
            If an object is in normal mode, then the object's layer controls visibility
            and selectability. If an object is locked, then the object's layer controls
            visibility by the object cannot be selected. If the object is hidden, it is
            not visible and it cannot be selected.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.ObjectAttributes.IsInstanceDefinitionObject">
            <summary>
            Use this query to determine if an object is part of an instance definition.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.ObjectAttributes.Visible">
            <summary>object visibility</summary>
        </member>
        <member name="P:Rhino.DocObjects.ObjectAttributes.LinetypeSource">
            <summary>
            The Linetype used to display an object is specified in one of two ways.
            If LinetypeSource is ON::linetype_from_layer, then the object's layer ON_Layer::Linetype() is used.
            If LinetypeSource is ON::linetype_from_object, then value of m_linetype is used.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.ObjectAttributes.ColorSource">
            <summary>
            The color used to display an object is specified in one of three ways.
            If ColorSource is ON::color_from_layer, then the object's layer ON_Layer::Color() is used.
            If ColorSource is ON::color_from_object, then value of m_color is used.
            If ColorSource is ON::color_from_material, then the diffuse color of the object's
            render material is used.  See ON_3dmObjectAttributes::MaterialSource() to
            determine where to get the definition of the object's render material.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.ObjectAttributes.PlotColorSource">
            <summary>
            The color used to plot an object on paper is specified in one of three ways.
            If PlotColorSource is ON::plot_color_from_layer, then the object's layer ON_Layer::PlotColor() is used.
            If PlotColorSource is ON::plot_color_from_object, then value of PlotColor() is used.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.ObjectAttributes.DisplayMode">
            <summary>
            objects can be displayed in one of three ways: wireframe, shaded, or render preview.
            If the display mode is ON::default_display, then the display mode of the viewport
            detrmines how the object is displayed. If the display mode is ON::wireframe_display,
            ON::shaded_display, or ON::renderpreview_display, then the object is forced to
            display in that mode.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.ObjectAttributes.ObjectId">
            <summary>
            Every object has a UUID (universally unique identifier). The default value is Guid.Empty.
            When an object is added to a model, the value is checked.  If the value is NULL, a
            new UUID is created. If the value is not NULL but it is already used by another object
            in the model, a new UUID is created. If the value is not NULL and it is not used by
            another object in the model, then that value persists. When an object is updated, by
            a move for example, the value of ObjectId persists.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.ObjectAttributes.Name">
            <summary>
            objects have optional text names.  More than one object in
            a model can have the same name and some objects may have no name.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.ObjectAttributes.LayerIndex">
            <summary>
            Layer definitions in an OpenNURBS model are stored in a layer table.
            The layer table is conceptually an array of ON_Layer classes.  Every
            OpenNURBS object in a model is on some layer.  The object's layer
            is specified by zero based indicies into the ON_Layer array.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.ObjectAttributes.LinetypeIndex">
            <summary>
            Linetype definitions in an OpenNURBS model are stored in a linetype table.
            The linetype table is conceptually an array of ON_Linetype classes. Every
            OpenNURBS object in a model references some linetype.  The object's linetype
            is specified by zero based indicies into the ON_Linetype array.
            index 0 is reserved for continuous linetype (no pattern)
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.ObjectAttributes.MaterialIndex">
            <summary>
            If you want something simple and fast, set m_material_index to the index of
            the rendering material and ignore m_rendering_attributes. If you are developing
            a high quality plug-in renderer, and a user is assigning one of your fabulous
            rendering materials to this object, then add rendering material information to
            the m_rendering_attributes.m_materials[] array.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.ObjectAttributes.MaterialSource">
            <summary>
            Determine if the simple material should come from the object or from it's layer.
            High quality rendering plug-ins should use m_rendering_attributes.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.ObjectAttributes.ObjectColor">
            <summary>
            If ON::color_from_object == ColorSource, then color is the object's display color.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.ObjectAttributes.PlotColor">
            <summary>
            If plot_color_from_object == PlotColorSource, then PlotColor is the object's plotting color.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.ObjectAttributes.PlotWeight">
            <summary>
            Plot weight in millimeters.
            =0.0 means use the default width
            &lt;0.0 means don't plot (visible for screen display, but does not show on plot)
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.ObjectAttributes.ObjectDecoration">
            <summary>
            Used to indicate an object has a decoration (like an arrowhead on a curve)
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.ObjectAttributes.WireDensity">
            <summary>
            When a surface object is displayed in wireframe, m_wire_density controls
            how many isoparametric wires are used.
            value    number of isoparametric wires
            0        boundary and knot wires
            1        boundary and knot wires and, if there are no interior knots, a single interior wire.
            N&gt;=2     boundary and knot wires and (N+1) interior wires
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.ObjectAttributes.ViewportId">
            <summary>
            If ViewportId is nil, the object is active in all viewports. If ViewportId is not nil, then
            this object is only active in a specific view. This field is primarily used to assign page
            space objects to a specific page, but it can also be used to restrict model space to a
            specific view.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.ObjectAttributes.Space">
            <summary>
            Starting with V4, objects can be in either model space or page space.
            If an object is in page space, then ViewportId is not nil and
            identifies the page it is on.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.ObjectAttributes.GroupCount">
            <summary>number of groups object belongs to</summary>
        </member>
        <member name="M:Rhino.DocObjects.ObjectAttributes.Duplicate">
            <summary>
            Create a copy of this ObjectAttributes
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:Rhino.DocObjects.ObjectAttributes.GetGroupList">
            <summary>
            Returns an array of GroupCount group indices.  If GroupCount is zero, then GetGroupList() returns null.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:Rhino.DocObjects.ObjectAttributes.AddToGroup(System.Int32)">
            <summary>
            Adds object to the group with specified index by appending index to
            group list (If the object is already in group, nothing is changed.)
            </summary>
            <param name="groupIndex">
            </param>
        </member>
        <member name="M:Rhino.DocObjects.ObjectAttributes.RemoveFromGroup(System.Int32)">
            <summary>
            removes object from the group with specified index. If the
            object is not in the group, nothing is changed.
            </summary>
            <param name="groupIndex">
            </param>
        </member>
        <member name="M:Rhino.DocObjects.ObjectAttributes.RemoveFromAllGroups">
            <summary>Removes object from all groups</summary>
        </member>
        <member name="M:Rhino.DocObjects.ObjectAttributes.SetUserString(System.String,System.String)">
            <summary>
            Attach a user string (key,value combination) to this geometry
            </summary>
            <param name="key">id used to retrieve this string</param>
            <param name="value">string associated with key</param>
            <returns>true on success</returns>
        </member>
        <member name="M:Rhino.DocObjects.ObjectAttributes.GetUserString(System.String)">
            <summary>
            Get user string
            </summary>
            <param name="key">id used to retrieve the string</param>
            <returns>string associated with the key if successful. null if no key was found</returns>
        </member>
        <member name="M:Rhino.DocObjects.ObjectAttributes.GetUserStrings">
            <summary>
            Get all (key, value) user strings attached
            </summary>
            <returns>
            </returns>
        </member>
        <member name="P:Rhino.Display.RhinoPageView.ActiveViewport">
            <summary>
            The ActiveViewport is the same as the MainViewport for standard RhinoViews. In
            a RhinoPageView, the active viewport may be the RhinoViewport of a child detail object.
            Most of the time, you will use ActiveViewport unless you explicitly need to work with
            the main viewport.
            </summary>
        </member>
        <member name="P:Rhino.Display.RhinoPageView.ActiveViewportID">
            <summary>
            Returns viewport ID for the active viewport. Faster than ActiveViewport function when
            working with page views.
            </summary>
        </member>
        <member name="P:Rhino.Display.RhinoPageView.PageIsActive">
            <summary>
            True if the page is active instead of any detail views. This occurs
            when the MainViewport.Id == ActiveViewportID
            </summary>
            <example>
                <code source="examples\vbnet\ex_activeviewport.vb" lang="vbnet" />
                <code source="examples\cs\ex_activeviewport.cs" lang="cs" />
                <code source="examples\py\ex_activeviewport.py" lang="py" />
            </example>
        </member>
        <member name="P:Rhino.Display.RhinoPageView.PageName">
            <summary>Same as the MainViewport.Name</summary>
            <example>
                <code source="examples\vbnet\ex_activeviewport.vb" lang="vbnet" />
                <code source="examples\cs\ex_activeviewport.cs" lang="cs" />
                <code source="examples\py\ex_activeviewport.py" lang="py" />
            </example>
        </member>
        <member name="M:Rhino.Display.RhinoPageView.AddDetailView(System.String,Rhino.Geometry.Point2d,Rhino.Geometry.Point2d,Rhino.Display.DefinedViewportProjection)">
            <summary>
            Create a detail view object that is displayed on this page and adds it to the doc
            </summary>
            <param name="title">
            </param>
            <param name="corner0">corners of the detail view in world coordinates</param>
            <param name="corner1">corners of the detail view in world coordinates</param>
            <param name="initialProjection">
            </param>
            <returns>newly created detail view on success. null on error</returns>
        </member>
        <member name="M:Rhino.Display.RhinoPageView.GetDetailViews">
            <summary>
            Get a list of the detail view objects associated with this layout
            </summary>
            <returns>
            </returns>
        </member>
        <member name="P:Rhino.PlugIns.PlugIn.Assembly">
            <summary>Source assembly for this plug-in</summary>
        </member>
        <member name="M:Rhino.PlugIns.PlugIn.GetLoadedPlugIn(System.Guid)">
            <summary>
            Only searches through list of RhinoCommon plug-ins
            </summary>
            <param name="id">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Rhino.PlugIns.PlugIn.Find(System.Reflection.Assembly)">
            <summary>
            Find the plug-in instance that was loaded from a given assembly
            </summary>
            <param name="pluginAssembly">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Rhino.PlugIns.PlugIn.GetCommands">
            <summary>All of the commands associated with this plug-in</summary>
        </member>
        <member name="M:Rhino.PlugIns.PlugIn.ShouldCallWriteDocument(Rhino.FileIO.FileWriteOptions)">
            <summary>
            Called whenever a Rhino is about to save a .3dm file.
            If you want to save plug-in document data when a model is
            saved in a version 5 .3dm file, then you must override this
            function to return true and you must override WriteDocument().
            </summary>
            <param name="options">
            </param>
            <returns>
            True if the plug-in wants to save document user data in the
            version 5 .3dm file.  The default returns false.
            </returns>
        </member>
        <member name="M:Rhino.PlugIns.PlugIn.WriteDocument(Rhino.RhinoDoc,Rhino.FileIO.BinaryArchiveWriter,Rhino.FileIO.FileWriteOptions)">
            <summary>
            Called when Rhino is saving a .3dm file to allow the plug-in
            to save document user data.
            </summary>
            <param name="doc">
            </param>
            <param name="archive">
            OpenNURBS file archive object Rhino is using to write the file.
            Use BinaryArchiveWriter.Write*() functions to write plug-in data.
            OR use the ArchivableDictionary
            If any BinaryArchiveWriter.Write*() functions throw an exception,
            then archive.WriteErrorOccured will be true and you should immediately return.
            Setting archive.WriteErrorOccured to true will cause Rhino to stop saving the file.
            </param>
            <param name="options">
            </param>
        </member>
        <member name="M:Rhino.PlugIns.PlugIn.ReadDocument(Rhino.RhinoDoc,Rhino.FileIO.BinaryArchiveReader,Rhino.FileIO.FileReadOptions)">
            <summary>
            Called whenever a Rhino document is being loaded and plug-in user data was
            encountered written by a plug-in with this plug-in's GUID.
            </summary>
            <param name="doc">
            </param>
            <param name="archive">
            OpenNURBS file archive object Rhino is using to read this file.
            Use BinaryArchiveReader.Read*() functions to read plug-in data.
            If any BinaryArchive.Read*() functions throws an exception then
            archive.ReadErrorOccurve will be true and you should immediately return.
            </param>
            <param name="options">Describes what is being written</param>
        </member>
        <member name="M:Rhino.PlugIns.PlugIn.OptionsDialogPages(System.Collections.Generic.List{Rhino.UI.OptionsDialogPage})">
            <summary>
            Override this function if you want to extend the options dialog. This function is
            called whenever the user brings up the Options dialog.
            </summary>
            <param name="pages">list of pages to add your custom options dialog page(s) to</param>
        </member>
        <member name="M:Rhino.PlugIns.RenderPlugIn.Render(Rhino.RhinoDoc,Rhino.Commands.RunMode,System.Boolean)">
            <summary>
            Called by Render and RenderPreview commands if this plug-in is set as the default render engine.
            </summary>
            <param name="doc">
            </param>
            <param name="mode">
            </param>
            <param name="fastPreview">If true, lower quality faster render expected</param>
            <returns>
            </returns>
        </member>
        <member name="T:Rhino.PlugIns.LicenseUtils">
            <summary>
            License Manager Utilities
            </summary>
        </member>
        <member name="M:Rhino.PlugIns.LicenseUtils.Initialize">
            <summary>
            Initializes the license manager
            </summary>
        </member>
        <member name="M:Rhino.PlugIns.LicenseUtils.SetLanguage(System.Int32)">
            <summary>
            Sets the license manager's language id.
            </summary>
        </member>
        <member name="M:Rhino.PlugIns.LicenseUtils.Echo(System.String)">
            <summary>
            Tests connectivity with the Zoo.
            </summary>
        </member>
        <member name="M:Rhino.PlugIns.LicenseUtils.GetLicense(System.Guid,System.String,Rhino.PlugIns.ValidateProductKeyDelegate)">
            <summary>
            Verifies that the valid product license is available for use.
            If the product is installed as a standalone node, the local
            license will be validated. If the product is installed as a
            network node, a loaner license will be requested by the
            system's assigned Zoo server.
            </summary>
            <param name="productId">
            The Guid of the product whose license you want to verify
            or request from a Zoo server.
            </param>
            <param name="productTitle">
            A localized product title, such as "Rhinoceros 5.0", that can
            be used in license request forms or message boxes, if needed.
            </param>
            <param name="validateDelegate">
            Since the license client knows nothing about your product license,
            you will need to valiate your product license by supplying a
            callback function, or delegate, that can be called for valiation.
            </param>
            <returns>
            True if the license was obtained and validated successful.
            False if not successful or on error.
            </returns>
        </member>
        <member name="M:Rhino.PlugIns.LicenseUtils.ReturnLicense(System.Guid)">
            <summary>
            Returns a loaned out license to the Zoo server from which
            it was borrowed.
            </summary>
            <param name="productId">
            The Guid of the product that you want to return.
            </param>
            <returns>
            True if the license was returned successful.
            False if not successful or on error.
            </returns>
        </member>
        <member name="M:Rhino.PlugIns.LicenseUtils.CheckOutLicense(System.Guid)">
            <summary>
            Checks out a license that is on loan from a Zoo server
            on a permanent basis.
            </summary>
            <param name="productId">
            The Guid of the product that you want to check out.
            </param>
            <returns>
            True if the license was checked out successful.
            False if not successful or on error.
            </returns>
        </member>
        <member name="M:Rhino.PlugIns.LicenseUtils.CheckInLicense(System.Guid)">
            <summary>
            Checks in a previously checked out license to
            the Zoo server from which it was checked out.
            </summary>
            <param name="productId">
            The Guid of the product that you want to check in.
            </param>
            <returns>
            True if the license was checked in successful.
            False if not successful or on error.
            </returns>
        </member>
        <member name="M:Rhino.PlugIns.LicenseUtils.ConvertLicense(System.Guid)">
            <summary>
            Converts a product license from a standalone node
            to a network node.
            </summary>
            <param name="productId">
            The Guid of the product that you want to check in.
            </param>
            <returns>
            True if the license was successfully converted.
            False if not successful or on error.
            </returns>
        </member>
        <member name="T:Rhino.PlugIns.ValidateResult">
            <summary>
            ValidateProductKeyDelegate result code
            </summary>
        </member>
        <member name="T:Rhino.PlugIns.ValidateProductKeyDelegate">
            <summary>
            Validates a product key or license
            </summary>
        </member>
        <member name="T:Rhino.PlugIns.LicenseData">
            <summary>
            Zoo plugin license data
            </summary>
        </member>
        <member name="M:Rhino.PlugIns.LicenseData.#ctor">
            <summary>
            Public constructor
            </summary>
        </member>
        <member name="M:Rhino.PlugIns.LicenseData.#ctor(System.String,System.String,System.String)">
            <summary>
            Public constructor
            </summary>
        </member>
        <member name="M:Rhino.PlugIns.LicenseData.#ctor(System.String,System.String,System.String,System.Int32)">
            <summary>
            Public constructor
            </summary>
        </member>
        <member name="M:Rhino.PlugIns.LicenseData.#ctor(System.String,System.String,System.String,System.Int32,System.Nullable{System.DateTime})">
            <summary>
            Public constructor
            </summary>
        </member>
        <member name="P:Rhino.PlugIns.LicenseData.ProductLicense">
            <summary>
            The actual product license.
            This is provided by the plugin that validated the license.
            </summary>
        </member>
        <member name="P:Rhino.PlugIns.LicenseData.SerialNumber">
            <summary>
            The "for display only" product license.
            This is provided by the plugin that validated the license.
            </summary>
        </member>
        <member name="P:Rhino.PlugIns.LicenseData.LicenseTitle">
            <summary>
            The title of the license.
            This is provided by the plugin that validated the license.
            (e.g. "Rhinoceros 5.0 Commercial")
            </summary>
        </member>
        <member name="P:Rhino.PlugIns.LicenseData.LicenseCount">
            <summary>
            The number of instances supported by this license.
            This is provided by the plugin that validated the license.
            </summary>
        </member>
        <member name="P:Rhino.PlugIns.LicenseData.DateToExpire">
            <summary>
            The date and time the license is set to expire.
            This is provided by the plugin that validated the license.
            This time value should be in Coordinated Universal Time (UTC).
            </summary>
        </member>
        <member name="M:Rhino.PlugIns.LicenseData.IsValid">
            <summary>
            Public validator
            </summary>
        </member>
        <member name="M:Rhino.PlugIns.LicenseData.IsNotValid(Rhino.PlugIns.LicenseData)">
            <summary>
            Indicates whether a LicenseData object is either null or invalid.
            </summary>
        </member>
        <member name="M:Rhino.PlugIns.LicenseData.IsValid(Rhino.PlugIns.LicenseData)">
            <summary>
            Indicates whether a LicenseData object is not null and valid.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.GripObject.Moved">
            <summary>
            True if the grip has moved from OriginalLocation
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.GripObject.Weight">
            <summary>
            The weight of a NURBS control point grip or RhinoMath.UnsetValue
            if the grip is not a NURBS control point grip
            </summary>
        </member>
        <member name="M:Rhino.DocObjects.GripObject.Move(Rhino.Geometry.Transform)">
            <summary>
            Move the grip to a new location
            </summary>
            <param name="xform">
            Transformation appliead to the OriginalLocation point
            </param>
        </member>
        <member name="M:Rhino.DocObjects.GripObject.Move(Rhino.Geometry.Vector3d)">
            <summary>
            Move the grip to a new location
            </summary>
            <param name="delta">
            Translation applied to the OriginalLocation point
            </param>
        </member>
        <member name="M:Rhino.DocObjects.GripObject.Move(Rhino.Geometry.Point3d)">
            <summary>
            Move the grip to a new location
            </summary>
            <param name="newLocation">
            New location for grip
            </param>
        </member>
        <member name="M:Rhino.DocObjects.GripObject.UndoMove">
            <summary>
            Undoes any grip moves made by calling Move
            </summary>
        </member>
        <member name="T:Rhino.DocObjects.RhinoObject">
            <summary>
            RhinoObjects should only ever be creatable by the RhinoDoc
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.RhinoObject.NextRuntimeSerialNumber">
            <summary>
            Get the runtime serial number that will be assigned to
            the next Rhino Object that is created.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.RhinoObject.IsValid">
            <summary>
            Tests an object to see if its data members are correctly initialized.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.RhinoObject.Document">
            <summary>
            Gets the document that owns this object
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.RhinoObject.Geometry">
            <summary>
            All rhino objects are composed of geometry and attributes.
            Get the underlying geometry for this object
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.RhinoObject.IsDeletable">
            <summary>
            Some objects cannot be deleted, like grips on lights and annotation objects.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.RhinoObject.IsDeleted">
            <summary>
            true if the object is deleted. Deleted objects are kept by the document
            for undo purposes. Call RhinoDoc.UndeleteObject to undelete an object
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.RhinoObject.IsInstanceDefinitionGeometry">
            <summary>
            true if the object is used as part of an instance definition.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.RhinoObject.IsNormal">
            <summary>
            An object must be in one of three modes: normal, locked or hidden.
            If an object is in normal mode, then the object's layer controls visibility
            and selectability. If an object is locked, then the object's layer controls
            visibility by the object cannot be selected. If the object is hidden, it is
            not visible and it cannot be selected.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.RhinoObject.IsLocked">
            <summary>
            An object must be in one of three modes: normal, locked or hidden.
            If an object is in normal mode, then the object's layer controls visibility
            and selectability. If an object is locked, then the object's layer controls
            visibility by the object cannot be selected. If the object is hidden, it is
            not visible and it cannot be selected.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.RhinoObject.IsHidden">
            <summary>
            An object must be in one of three modes: normal, locked or hidden.
            If an object is in normal mode, then the object's layer controls visibility
            and selectability. If an object is locked, then the object's layer controls
            visibility by the object cannot be selected. If the object is hidden, it is
            not visible and it cannot be selected.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.RhinoObject.IsReference">
            <summary>
            Determine if an object is a reference object. An object from a work session
            reference model is a reference object and cannot be modified. An object is
            a reference object if, and only if, it is on a reference layer.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.RhinoObject.Visible">
            <summary>object visibility</summary>
        </member>
        <member name="P:Rhino.DocObjects.RhinoObject.Id">
            <summary>
            Every object has a UUID (universally unique identifier). The default value is Guid.Empty.
            When an object is added to a model, the value is checked.  If the value is Guid.Empty, a
            new UUID is created. If the value is not NULL but it is already used by another object
            in the model, a new UUID is created. If the value is not Guid.Empty and it is not used by
            another object in the model, then that value persists. When an object is updated, by
            a move for example, the value of ObjectId persists.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.RhinoObject.Name">
            <summary>
            Rhino objects have optional text names.  More than one object in
            a model can have the same name and some objects may have no name.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.RhinoObject.GroupCount">
            <summary>number of groups object belongs to</summary>
        </member>
        <member name="P:Rhino.DocObjects.RhinoObject.GripsOn">
            <summary>
            State of object's default editing grips
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.RhinoObject.GripsSelected">
            <summary>
            True if grips are turned on and at least one is selected
            </summary>
        </member>
        <member name="M:Rhino.DocObjects.RhinoObject.CommitChanges">
            <summary>
            Moves changes made to this RhinoObject into the RhinoDoc
            </summary>
            <returns>
            true if changes were made
            </returns>
        </member>
        <member name="M:Rhino.DocObjects.RhinoObject.GetGroupList">
            <summary>
            Returns an array of GroupCount group indices.  If GroupCount is zero, then GetGroupList() returns null.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:Rhino.DocObjects.RhinoObject.IsSelected(System.Boolean)">
            <summary>Check selection state</summary>
            <param name="checkSubObjects">
            (false is good default)
            If true and the entire object is not selected, and some subset of the object
            is selected, like some edges of a surface, then 3 is returned.
            If false and the entire object is not selected, then zero is returned.
            </param>
            <returns>
            0 = object is not selected.
            1 = object is selected.
            2 = entire object is selected persistently.
            3 = one or more proper sub-objects are selected.
            </returns>
        </member>
        <member name="M:Rhino.DocObjects.RhinoObject.IsSubObjectSelected(Rhino.Geometry.ComponentIndex)">
            <summary>Check sub-object selection state</summary>
            <param name="componentIndex">index of subobject to check</param>
            <returns>
            </returns>
            <remarks>subobject cannot be persistently selected</remarks>
        </member>
        <member name="M:Rhino.DocObjects.RhinoObject.GetSelectedSubObjects">
            <summary>Get a list of all selected sub-objects</summary>
            <returns>
            </returns>
        </member>
        <member name="M:Rhino.DocObjects.RhinoObject.IsSelectable(System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>Reports if an object can be selected</summary>
            <param name="ignoreSelectionState">
            If true, then selected objects are selectable.
            If false, then selected objects are not selectable.
            </param>
            <param name="ignoreGripsState">
            If true, then objects with grips on can be selected.
            If false, then the value returned by the object's IsSelectableWithGripsOn() function decides if the object can be selected.
            </param>
            <param name="ignoreLayerLocking">
            If true, then objects on locked layers are selectable.
            If false, then objects on locked layers are not selectable.
            </param>
            <param name="ignoreLayerVisibility">
            If true, then objects on hidden layers are selectable.
            If false, then objects on hidden layers are not selectable.
            </param>
            <returns>true if object is capable of being selected</returns>
            <remarks>
            Objects that are locked, hidden, or on locked or hidden layers
            cannot be selected. If IsSelectableWithGripsOn() returns false,
            then an that object is not selectable if it has grips turned on.
            </remarks>
        </member>
        <member name="M:Rhino.DocObjects.RhinoObject.IsSelectable">
            <summary>Reports if an object can be selected</summary>
            <returns>true if object is capable of being selected</returns>
            <remarks>
            Objects that are locked, hidden, or on locked or hidden layers
            cannot be selected. If IsSelectableWithGripsOn() returns false,
            then an that object is not selectable if it has grips turned on.
            </remarks>
        </member>
        <member name="M:Rhino.DocObjects.RhinoObject.IsSubObjectSelectable(Rhino.Geometry.ComponentIndex,System.Boolean)">
            <summary>Reports if a subobject can be selected</summary>
            <param name="componentIndex">index of subobject to check</param>
            <param name="ignoreSelectionState">
            If true, then selected objects are selectable.
            If false, then selected objects are not selectable.
            </param>
            <returns>
            </returns>
            <remarks>
            Objects that are locked, hidden, or on locked or hidden layers
            cannot be selected. If IsSelectableWithGripsOn() returns false,
            then an that object is not selectable if it has grips turned on.
            </remarks>
        </member>
        <member name="M:Rhino.DocObjects.RhinoObject.Select(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>Reports if an object can be selected</summary>
            <param name="on">
            </param>
            <param name="syncHighlight">
            If true, then the object is hightlighted if it is selected
            and not hightlighted if is is not selected.
            </param>
            <param name="persistentSelect">
            Objects that are persistently selected stay selected when a command terminates.
            </param>
            <param name="ignoreGripsState">
            If true, then objects with grips on can be selected.
            If false, then the value returned by the object's IsSelectableWithGripsOn() function
            decides if the object can be selected when it has grips turned on.
            </param>
            <param name="ignoreLayerLocking">
            If true, then objects on locked layers can be selected.
            If false, then objects on locked layers cannot be selected.
            </param>
            <param name="ignoreLayerVisibility">
            If true, then objects on hidden layers can be selectable.
            If false, then objects on hidden layers cannot be selected.
            </param>
            <returns>
            0: object is not selected
            1: object is selected
            2: object is selected persistently
            </returns>
            <remarks>
            Objects that are locked, hidden, or on locked or hidden layers
            cannot be selected. If IsSelectableWithGripsOn() returns false,
            then an that object is not selectable if it has grips turned on.
            </remarks>
        </member>
        <member name="M:Rhino.DocObjects.RhinoObject.Select(System.Boolean)">
            <summary>Reports if an object can be selected</summary>
            <param name="on">
            </param>
            <returns>
            0: object is not selected
            1: object is selected
            2: object is selected persistently
            </returns>
            <remarks>
            Objects that are locked, hidden, or on locked or hidden layers
            cannot be selected. If IsSelectableWithGripsOn() returns false,
            then an that object is not selectable if it has grips turned on.
            </remarks>
            <example>
                <code source="examples\vbnet\ex_orientonsrf.vb" lang="vbnet" />
                <code source="examples\cs\ex_orientonsrf.cs" lang="cs" />
                <code source="examples\py\ex_orientonsrf.py" lang="py" />
            </example>
        </member>
        <member name="M:Rhino.DocObjects.RhinoObject.Select(System.Boolean,System.Boolean)">
            <summary>Reports if an object can be selected</summary>
            <param name="on">
            </param>
            <param name="syncHighlight">
            If true, then the object is hightlighted if it is selected
            and not hightlighted if is is not selected.
            </param>
            <returns>
            0: object is not selected
            1: object is selected
            2: object is selected persistently
            </returns>
            <remarks>
            Objects that are locked, hidden, or on locked or hidden layers
            cannot be selected. If IsSelectableWithGripsOn() returns false,
            then an that object is not selectable if it has grips turned on.
            </remarks>
        </member>
        <member name="M:Rhino.DocObjects.RhinoObject.SelectSubObject(Rhino.Geometry.ComponentIndex,System.Boolean,System.Boolean)">
            <summary>Reports if an object can be selected</summary>
            <param name="componentIndex">index of subobject to check</param>
            <param name="select">
            </param>
            <param name="syncHighlight">
            (default=true)
            If true, then the object is hightlighted if it is selected
            and not hightlighted if is is not selected.
            </param>
            <returns>
            0: object is not selected
            1: object is selected
            2: object is selected persistently
            </returns>
            <remarks>
            Objects that are locked, hidden, or on locked or hidden layers
            cannot be selected. If IsSelectableWithGripsOn() returns false,
            then an that object is not selectable if it has grips turned on.
            </remarks>
        </member>
        <member name="M:Rhino.DocObjects.RhinoObject.UnselectAllSubObjects">
            <summary>
            Returns number of unselected subobjects
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:Rhino.DocObjects.RhinoObject.IsHighlighted(System.Boolean)">
            <summary>Check highlight state</summary>
            <param name="checkSubObjects">
            If true and the entire object is not highlighted, and some subset of the object
            is highlighted, like some edges of a surface, then 3 is returned.
            If false and the entire object is not highlighted, then zero is returned.
            </param>
            <returns>
            0 object is not highlighted
            1 entire object is highlighted
            3 one or more proper sub-objects are highlighted
            </returns>
        </member>
        <member name="M:Rhino.DocObjects.RhinoObject.GetHighlightedSubObjects">
            <summary>
            Get a list of all highlighted sub-objects
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:Rhino.DocObjects.RhinoObject.UnhighlightAllSubObjects">
            <summary>
            Returns number of changed subobjects
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:Rhino.DocObjects.RhinoObject.GetGrips">
            <summary>
            Returns grips for this object IF grips are enabled. If grips are not
            enabled, returns null.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:Rhino.DocObjects.RhinoObject.ShortDescription(System.Boolean)">
            <summary>
            Localized short description os an object
            </summary>
            <param name="plural">
            </param>
            <returns>
            </returns>
        </member>
        <member name="T:Rhino.DocObjects.SelectionMethod">
            <summary>
            Enumerates different kinds of selection methods.
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.SelectionMethod.Other">
            <summary>
            Selected by non-mouse method (SelAll, etc.)
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.SelectionMethod.MousePick">
            <summary>
            Selected by a mouse click on the object.
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.SelectionMethod.WindowBox">
            <summary>
            Selected by a mouse selection window box.
            Window selection indicates the object is completely contained by the selection rectangle.
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.SelectionMethod.CrossingBox">
            <summary>
            Selected by a mouse selection crossing box.
            A crossing selection indicates the object intersects with the selection rectangle.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.ObjRef.ObjectId">
            <summary>Returns the id of the referenced Rhino object.</summary>
        </member>
        <member name="P:Rhino.DocObjects.ObjRef.RuntimeSerialNumber">
            <summary>
            If &gt; 0, then this is the value of a Rhino object's serial number field.
            The serial number is used instead of the pointer to prevent crashes in
            cases when the RhinoObject is deleted but an ObjRef continues to reference
            the Rhino object. The value of RuntimeSerialNumber is not saved in archives
            because it generally changes if you save and reload an archive.
            </summary>
        </member>
        <member name="M:Rhino.DocObjects.ObjRef.Surface">
            <example>
                <code source="examples\vbnet\ex_orientonsrf.vb" lang="vbnet" />
                <code source="examples\cs\ex_orientonsrf.cs" lang="cs" />
                <code source="examples\py\ex_orientonsrf.py" lang="py" />
            </example>
        </member>
        <member name="M:Rhino.DocObjects.ObjRef.Object">
            <summary>Returns the referenced Rhino object.</summary>
            <example>
                <code source="examples\vbnet\ex_orientonsrf.vb" lang="vbnet" />
                <code source="examples\cs\ex_orientonsrf.cs" lang="cs" />
                <code source="examples\py\ex_orientonsrf.py" lang="py" />
            </example>
        </member>
        <member name="M:Rhino.DocObjects.ObjRef.SelectionMethod">
            <summary>
            Get the method used to select this object.
            </summary>
            <returns>The method used to select this object.</returns>
        </member>
        <member name="M:Rhino.DocObjects.ObjRef.SelectionPoint">
            <summary>
            If the object was selected by picking a point on it, then
            SelectionPoint() returns the point where the selection
            occured, otherwise it returns Point3d.Unset.
            </summary>
            <returns>The point where the selection occured or Point3d.Unset
            on failure.</returns>
        </member>
        <member name="M:Rhino.DocObjects.ObjRef.CurveParameter(System.Double@)">
            <summary>
            If the reference geometry is a curve or edge with a selection
            point, then this gets the parameter of the selection point.
            </summary>
            <param name="parameter">The parameter of the selection point.</param>
            <returns>If the selection point was on a curve or edge, then the
            curve/edge is returned, otherwise null.</returns>
            <remarks>
            If a curve was selected and CurveParameter is called and the
            SelectionMethod() is not 1 (point pick on object), the curve will
            be returned and parameter will be set to the start parameter of
            the picked curve. This can be misleading so it may be necessary
            to call SelectionMethod() first, before calling CurveParameter
            to get the desired information.</remarks>
        </member>
        <member name="M:Rhino.DocObjects.ObjRef.SurfaceParameter(System.Double@,System.Double@)">
            <summary>
            If the reference geometry is a surface, brep with one face,
            or surface edge with a selection point, then this gets the
            surface paramters of the selection point.
            </summary>
            <param name="u">
            </param>
            <param name="v">
            </param>
            <returns>
            If the selection point was on a surface, the the surface is returned.
            </returns>
        </member>
        <member name="P:Rhino.Geometry.Interval.Item(System.Int32)">
            <summary>
            Gets or sets the indexed bound of this Interval.
            </summary>
            <param name="index">Bound index (0 = lower; 1 = upper)</param>
        </member>
        <member name="P:Rhino.Geometry.Interval.Unset">
            <summary>
            Gets an Interval whose limits are RhinoMath.UnsetValue.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Interval.T0">
            <summary>
            Gets or sets the lower bound of the Interval.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Interval.T1">
            <summary>
            Gets or sets the upper bound of the Interval.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Interval.Min">
            <summary>
            Gets the smaller of T0 and T1.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Interval.Max">
            <summary>
            Gets the larger of T0 and T1.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Interval.Mid">
            <summary>
            Gets the average of T0 and T1.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Interval.Length">
            <summary>
            Gets the (signed) length of the numeric range.
            If the interval is decreasing, a negative length will be returned.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Interval.IsValid">
            <summary>
            Gets a value indicating whether or not this Interval is valid.
            Valid intervals must contain valid numbers.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Interval.IsSingleton">
            <summary>
            Returns true if T0 == T1 != ON.UnsetValue.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Interval.IsIncreasing">
            <summary>
            Returns true if T0 &lt; T1
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Interval.IsDecreasing">
            <summary>
            Returns true if T[0] &gt; T[1]
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Interval.CompareTo(Rhino.Geometry.Interval)">
            <returns>
            0  this is identical to other
            -1  this[0] &lt; other[0]
            +1  this[0] &gt; other[0]
            -1  this[0] == other[0] and this[1] &lt; other[1]
            +1  this[0] == other[0] and this[1] &gt; other[1]
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Interval.Grow(System.Double)">
            <summary>
            Grow the Interval to include the given number.
            </summary>
            <param name="value">Number to include in this interval.</param>
        </member>
        <member name="M:Rhino.Geometry.Interval.MakeIncreasing">
            <summary>
            Ensures this interval is either singleton or increasing.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Interval.Reverse">
            <summary>
            Changes interval to [-T1, -T0].
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Interval.Swap">
            <summary>
            Swaps T0 and T1.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Interval.ParameterAt(System.Double)">
            <summary>Convert normalized parameter to interval value, or pair of values.</summary>
            <returns>Interval parameter min*(1.0-normalizedParameter) + max*normalizedParameter</returns>
            <seealso>NormalizedParameterAt</seealso>
        </member>
        <member name="M:Rhino.Geometry.Interval.ParameterIntervalAt(Rhino.Geometry.Interval)">
            <summary>Convert normalized parameter to interval value, or pair of values.</summary>
            <returns>Interval parameter min*(1.0-normalizedParameter) + max*normalized_paramete</returns>
            <seealso>NormalizedParameterAt</seealso>
        </member>
        <member name="M:Rhino.Geometry.Interval.NormalizedParameterAt(System.Double)">
            <summary>Convert interval value, or pair of values, to normalized parameter.</summary>
            <returns>Normalized parameter x so that min*(1.0-x) + max*x = intervalParameter.</returns>
            <seealso>ParameterAt</seealso>
        </member>
        <member name="M:Rhino.Geometry.Interval.NormalizedIntervalAt(Rhino.Geometry.Interval)">
            <summary>Convert interval value, or pair of values, to normalized parameter.</summary>
            <returns>Normalized parameter x so that min*(1.0-x) + max*x = intervalParameter.</returns>
            <seealso>ParameterAt</seealso>
        </member>
        <member name="M:Rhino.Geometry.Interval.IncludesParameter(System.Double)">
            <summary>
            Test a parameter for Interval inclusion.
            </summary>
            <param name="t">Parameter to test.</param>
            <returns>True if t is contained within or is coincident with the limits of this Interval.</returns>
        </member>
        <member name="M:Rhino.Geometry.Interval.IncludesParameter(System.Double,System.Boolean)">
            <summary>
            Test a parameter for Interval inclusion.
            </summary>
            <param name="t">Parameter to test.</param>
            <param name="strict">If true, the parameter must be fully on the inside of the Interval.</param>
            <returns>True if t is contained within the limits of this Interval.</returns>
        </member>
        <member name="M:Rhino.Geometry.Interval.IncludesInterval(Rhino.Geometry.Interval)">
            <summary>
            Test another interval for Interval inclusion.
            </summary>
            <param name="interval">Interval to test</param>
            <returns>True if the other interval is contained within or is coincident with the limits of this Interval.</returns>
        </member>
        <member name="M:Rhino.Geometry.Interval.IncludesInterval(Rhino.Geometry.Interval,System.Boolean)">
            <summary>
            Test another interval for Interval inclusion.
            </summary>
            <param name="interval">Interval to test.</param>
            <param name="strict">If true, the other interval must be fully on the inside of the Interval.</param>
            <returns>True if the other interval is contained within the limits of this Interval.</returns>
        </member>
        <member name="M:Rhino.Geometry.Interval.FromIntersection(Rhino.Geometry.Interval,Rhino.Geometry.Interval)">
            <summary>
            If the intersection is not empty, then
            intersection = [max(a.Min(),b.Min()), min(a.Max(),b.Max())]
            The interval [ON.UnsetValue,ON.UnsetValue] is considered to be
            the empty set interval.  The result of any intersection involving an
            empty set interval or disjoint intervals is the empty set interval.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Interval.FromUnion(Rhino.Geometry.Interval,Rhino.Geometry.Interval)">
            <summary>
            The union of an empty set and an increasing interval is the increasing
            interval.  The union of two empty sets is empty. The union of an empty
            set an a non-empty interval is the non-empty interval.
            The union of two non-empty intervals is
            union = [min(a.Min(),b.Min()), max(a.Max(),b.Max()),]
            Union() returns true if the union is not empty.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Point2d.IsValid">
            <summary>
            If any coordinate of a point is UnsetValue, then the point is not valid.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Point3d.#ctor(System.Double,System.Double,System.Double)">
            <summary>Create a point with defined x,y,z values</summary>
            <param name="x">
            </param>
            <param name="y">
            </param>
            <param name="z">
            </param>
            <example>
                <code source="examples\vbnet\ex_addcircle.vb" lang="vbnet" />
                <code source="examples\cs\ex_addcircle.cs" lang="cs" />
                <code source="examples\py\ex_addcircle.py" lang="py" />
            </example>
        </member>
        <member name="P:Rhino.Geometry.Point3d.Item(System.Int32)">
            <summary>
            Gets or sets an indexed coordinate of this point.
            </summary>
            <param name="index">
            The coordinate index. Valid values are:
            <para>0 = X coordinate</para><para>1 = Y coordinate</para><para>2 = Z coordinate</para></param>
        </member>
        <member name="P:Rhino.Geometry.Point3d.X">
            <summary>
            Gets or sets the X coordinate of this point.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Point3d.Y">
            <summary>
            Gets or sets the Y coordinate of this point.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Point3d.Z">
            <summary>
            Gets or sets the Z coordinate of this point.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Point3d.IsValid">
            <summary>
            If any coordinate of a point is UnsetValue, then the point is not valid.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Point3d.MinimumCoordinate">
            <summary>
            Gets the smallest (both positive and negative) coordinate value in this point.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Point3d.MaximumCoordinate">
            <summary>
            Gets the largest (both positive and negative) coordinate value in this point.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Point3d.Interpolate(Rhino.Geometry.Point3d,Rhino.Geometry.Point3d,System.Double)">
            <summary>
            Interpolate between two points.
            </summary>
            <param name="pA">First point.</param>
            <param name="pB">Second point.</param>
            <param name="t">Interpolation parameter.
            If t=0 then this point is set to pA.
            If t=1 then this point is set to pB.
            Values of t in between 0.0 and 1.0 result in points between pA and pB.</param>
        </member>
        <member name="M:Rhino.Geometry.Point3d.DistanceTo(Rhino.Geometry.Point3d)">
            <summary>
            Compute the distance between two points.
            </summary>
            <param name="other">Other point for distance measurement.</param>
            <returns>The distance between this point and other.</returns>
        </member>
        <member name="M:Rhino.Geometry.Point3d.Transform(Rhino.Geometry.Transform)">
            <summary>
            Transform the point. The transformation matrix acts on the left of the point
            i.e., result = transformation*point
            </summary>
            <param name="xform">Transformation to apply.</param>
        </member>
        <member name="M:Rhino.Geometry.Point3d.ArePointsCoplanar(System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d},System.Double)">
            <summary>
            Test if a set of points are coplanar within a certain tolerance
            </summary>
            <param name="points">
            </param>
            <param name="tolerance">A good default is RhinoMath.ZeroTolerance</param>
            <returns>
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Point3d.CullDuplicates(System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d},System.Double)">
            <summary>
            Finds duplicates in the supplied list of points and returns a
            new array of points without duplicates.
            </summary>
            <param name="points">
            </param>
            <param name="tolerance">
            The minimum distance between points. Points that fall within this
            tolerance will be discarded.</param>
            <returns>Array of points with duplicates removed, or null on error</returns>
        </member>
        <member name="M:Rhino.Geometry.Point3d.SortAndCullPointList(System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d},System.Double)">
            <summary>
            Sort a list of points so they will be connected in a "reasonable polyline" order. Also remove
            points from the list that are closer together than a minimum distance
            </summary>
            <param name="points">points to sort</param>
            <param name="minimumDistance">minimum distance to use. Throw out ones closer than this</param>
            <returns>new list of sorted points</returns>
        </member>
        <member name="P:Rhino.Geometry.Vector3d.Item(System.Int32)">
            <summary>
            Gets or sets the component at the given index.
            </summary>
            <param name="index">Index of vector component. Valid values are:
            <para>0 = X-component</para><para>1 = Y-component</para><para>2 = Z-component</para></param>
        </member>
        <member name="P:Rhino.Geometry.Vector3d.X">
            <summary>
            Gets or sets the X component of the vector.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Vector3d.Y">
            <summary>
            Gets or sets the Y component of the vector.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Vector3d.Z">
            <summary>
            Gets or sets the Z component of the vector.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Vector3d.IsValid">
            <summary>
            Gets a value indicating whether this vector is valid.
            A valid vector must contain valid numbers for x, y and z.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Vector3d.MinimumCoordinate">
            <summary>
            Gets the value of the smallest component.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Vector3d.MaximumCoordinate">
            <summary>
            Gets the value of the largest component.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Vector3d.Length">
            <summary>
            Gets the length of this vector.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Vector3d.SquareLength">
            <summary>
            Gets the squared length of this vector.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Vector3d.IsUnitVector">
            <summary>
            Gets a value indicating whether or not this is a unit vector.
            A unit vector has a length of 1.0.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Vector3d.IsZero">
            <summary>
            Gets a value indicating whether the X, Y, and Z values are all equal to 0.0.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Vector3d.Multiply(Rhino.Geometry.Vector3d,System.Double)">
            <summary>
            provided for languages that do not support operator overloading
            </summary>
            <param name="vector">
            </param>
            <param name="t">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Vector3d.Multiply(System.Double,Rhino.Geometry.Vector3d)">
            <summary>
            provided for languages that do not support operator overloading
            </summary>
            <param name="t">
            </param>
            <param name="vector">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Vector3d.Divide(Rhino.Geometry.Vector3d,System.Double)">
            <summary>
            provided for languages that do not support operator overloading
            </summary>
            <param name="vector">
            </param>
            <param name="t">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Vector3d.Add(Rhino.Geometry.Vector3d,Rhino.Geometry.Vector3d)">
            <summary>
            provided for languages that do not support operator overloading
            </summary>
            <param name="vector1">
            </param>
            <param name="vector2">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Vector3d.Subtract(Rhino.Geometry.Vector3d,Rhino.Geometry.Vector3d)">
            <summary>
            provided for languages that do not support operator overloading
            </summary>
            <param name="vector1">
            </param>
            <param name="vector2">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Vector3d.Multiply(Rhino.Geometry.Vector3d,Rhino.Geometry.Vector3d)">
            <summary>
            provided for languages that do not support operator overloading
            </summary>
            <param name="vector1">
            </param>
            <param name="vector2">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Vector3d.Negate(Rhino.Geometry.Vector3d)">
            <summary>
            provided for languages that do not support operator overloading
            </summary>
            <param name="vector">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Vector3d.CrossProduct(Rhino.Geometry.Vector3d,Rhino.Geometry.Vector3d)">
            <summary>
            Compute the Cross Product of two vectors.
            The cross product is a vector that is perpendicular to both a and b.
            </summary>
            <param name="a">First vector for cross product.</param>
            <param name="b">Second vector for cross product.</param>
            <returns>The cross product of a and b</returns>
        </member>
        <member name="M:Rhino.Geometry.Vector3d.VectorAngle(Rhino.Geometry.Vector3d,Rhino.Geometry.Vector3d)">
            <summary>
            Compute the angle between two vectors.
            </summary>
            <param name="a">First vector for angle.</param>
            <param name="b">Second vector for angle.</param>
            <returns>The angle (in radians) between a and b or RhinoMath.UnsetValue if the input is invalid.</returns>
        </member>
        <member name="M:Rhino.Geometry.Vector3d.IsTiny(System.Double)">
            <summary>
            Test a vector to see if it is very short.
            </summary>
            <param name="tolerance">
            A nonzero value used as the coordinate zero tolerance.
            </param>
            <returns>(Math.Abs(X) &lt;= tiny_tol) AND (Math.Abs(Y) &lt;= tiny_tol) AND (Math.Abs(Z) &lt;= tiny_tol)</returns>
            <example>
                <code source="examples\vbnet\ex_addline.vb" lang="vbnet" />
                <code source="examples\cs\ex_addline.cs" lang="cs" />
                <code source="examples\py\ex_addline.py" lang="py" />
            </example>
        </member>
        <member name="M:Rhino.Geometry.Vector3d.Unitize">
            <summary>
            Unitize this vector. A unit vector has a length of 1.0.
            An invalid or zero length vector cannot be unitized.
            </summary>
            <returns>True on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Vector3d.Transform(Rhino.Geometry.Transform)">
            <summary>
            Transform the vector in place. The transformation matrix acts on
            the left of the vector; i.e., result = transformation*vector
            </summary>
            <param name="transformation">Transformation matrix to apply.</param>
        </member>
        <member name="M:Rhino.Geometry.Vector3d.Rotate(System.Double,Rhino.Geometry.Vector3d)">
            <summary>
            Rotate this vector around an axis.
            </summary>
            <param name="angleRadians">Angle of rotation (in radians).</param>
            <param name="rotationAxis">Axis of rotation.</param>
            <returns>True on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Vector3d.Reverse">
            <summary>
            Reverse (invert) this vector. If this vector is invalid, the
            reverse will also be invalid and false will be returned.
            </summary>
            <returns>True on success, false if the vector is invalid.</returns>
        </member>
        <member name="M:Rhino.Geometry.Vector3d.IsParallelTo(Rhino.Geometry.Vector3d)">
            <summary>
            Test to see whether this vector is parallel to within one degree of another one.
            </summary>
            <param name="other">Vector to compare to.</param>
            <returns>
            Parallel indicator:
            <para>+1 = both vectors are parallel.</para><para>0 = vectors are not parallel or at least one of the vectors is zero.</para><para>-1 = vectors are anti-parallel.</para></returns>
        </member>
        <member name="M:Rhino.Geometry.Vector3d.IsParallelTo(Rhino.Geometry.Vector3d,System.Double)">
            <summary>
            Test to see whether this vector is parallel to within a custom angle tolerance of another one.
            </summary>
            <param name="other">Vector to compare to.</param>
            <param name="angleTolerance">Angle tolerance (in radians)</param>
            <returns>
            Parallel indicator:
            <para>+1 = both vectors are parallel.</para><para>0 = vectors are not parallel or at least one of the vectors is zero.</para><para>-1 = vectors are anti-parallel.</para></returns>
        </member>
        <member name="M:Rhino.Geometry.Vector3d.IsPerpendicularTo(Rhino.Geometry.Vector3d)">
            <summary>
            Test to see whether this vector is perpendicular to within one degree of another one.
            </summary>
            <param name="other">Vector to compare to.</param>
            <returns>True if both vectors are perpendicular, false if otherwise.</returns>
        </member>
        <member name="M:Rhino.Geometry.Vector3d.IsPerpendicularTo(Rhino.Geometry.Vector3d,System.Double)">
            <summary>
            Test to see whether this vector is perpendicular to within a custom angle tolerance of another one.
            </summary>
            <param name="other">Vector to compare to.</param>
            <param name="angleTolerance">Angle tolerance (in radians)</param>
            <returns>True if both vectors are perpendicular, false if otherwise.</returns>
        </member>
        <member name="M:Rhino.Geometry.Vector3d.PerpendicularTo(Rhino.Geometry.Vector3d)">
            <summary>
            Set this vector to be perpendicular to another vector.
            Result is not unitized.
            </summary>
            <param name="other">
            </param>
            <returns>True on success, false if input vector is zero or invalid.</returns>
        </member>
        <member name="F:Rhino.ApplicationSettings.LicenseNode.Network">
            <summary>
            Network (obtains license from Zoo server)
            </summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.LicenseNode.NetworkCheckedOut">
            <summary>
            Network (has license checked out from Zoo server)
            </summary>
        </member>
        <member name="T:Rhino.RhinoApp">
            <summary>.NET RhinoApp is parallel to C++ CRhinoApp</summary>
        </member>
        <member name="P:Rhino.RhinoApp.SdkVersion">
            <summary>
            Rhino SDK 9 digit SDK version number in the form YYYYMMDDn
            Rhino will only load plug-ins that were build with exactly the
            same version of the SDK.
            </summary>
        </member>
        <member name="P:Rhino.RhinoApp.SdkServiceRelease">
            <summary>
            Rhino SDK 9 digit SDK service release number in the form YYYYMMDDn
            Service service release of the Rhino SDK supported by this executable. Rhino will only
            load plug-ins that require a service release of &lt;= this release number.
            For example, SR1 will load all plug-ins made with any SDK released up through and including
            the SR1 SDK. But, SR1 will not load a plug-in built using the SR2 SDK. If an "old" Rhino
            tries to load a "new" plug-in, the user is told that they have to get a free Rhino.exe
            update in order for the plug-in to load. Rhino.exe updates are available from http://www.rhino3d.com.
            </summary>
        </member>
        <member name="P:Rhino.RhinoApp.ExeVersion">
            <summary>Major version of Rhino executable 4, 5, ...</summary>
        </member>
        <member name="P:Rhino.RhinoApp.ExeServiceRelease">
            <summary>
            Service release version of Rhino executable (0, 1, 2, ...)
            The integer is the service release number of Rhino.  For example,
            this function returns "0" if Rhino V4SR0 is running and returns
            "1" if Rhino V4SR1 is running.
            </summary>
        </member>
        <member name="P:Rhino.RhinoApp.SerialNumber">
            <summary>
            The product serial number, as seen in Rhino's ABOUT dialog box.
            </summary>
        </member>
        <member name="P:Rhino.RhinoApp.InstallationType">
            <summary>The product installation type, as seen in Rhino's ABOUT dialog box.</summary>
        </member>
        <member name="P:Rhino.RhinoApp.CommandPrompt">
            <summary>Rhino command prompt.</summary>
        </member>
        <member name="P:Rhino.RhinoApp.CommandHistoryWindowText">
            <summary>
            Text in Rhino's command history window
            </summary>
        </member>
        <member name="M:Rhino.RhinoApp.Write(System.String)">
            <summary>Print formatted text in the command window</summary>
        </member>
        <member name="M:Rhino.RhinoApp.Write(System.String,System.Object)">
            <summary>Print formatted text in the command window</summary>
        </member>
        <member name="M:Rhino.RhinoApp.Write(System.String,System.Object,System.Object)">
            <summary>Print formatted text in the command window</summary>
        </member>
        <member name="M:Rhino.RhinoApp.Write(System.String,System.Object,System.Object,System.Object)">
            <summary>Print formatted text in the command window</summary>
        </member>
        <member name="M:Rhino.RhinoApp.WriteLine">
            <summary>Print a newline in the command window</summary>
        </member>
        <member name="M:Rhino.RhinoApp.WriteLine(System.String)">
            <summary>Print text in the command window</summary>
            <example>
                <code source="examples\vbnet\ex_addlayer.vb" lang="vbnet" />
                <code source="examples\cs\ex_addlayer.cs" lang="cs" />
                <code source="examples\py\ex_addlayer.py" lang="py" />
            </example>
        </member>
        <member name="M:Rhino.RhinoApp.WriteLine(System.String,System.Object)">
            <summary>Print formatted text with a newline in the command window</summary>
            <example>
                <code source="examples\vbnet\ex_addlayer.vb" lang="vbnet" />
                <code source="examples\cs\ex_addlayer.cs" lang="cs" />
                <code source="examples\py\ex_addlayer.py" lang="py" />
            </example>
        </member>
        <member name="M:Rhino.RhinoApp.WriteLine(System.String,System.Object,System.Object)">
            <summary>Print formatted text with a newline in the command window</summary>
        </member>
        <member name="M:Rhino.RhinoApp.WriteLine(System.String,System.Object,System.Object,System.Object)">
            <summary>Print formatted text with a newline in the command window</summary>
        </member>
        <member name="M:Rhino.RhinoApp.SetCommandPrompt(System.String,System.String)">
            <summary>Set Rhino command prompt</summary>
            <param name="prompt">
            </param>
            <param name="promptDefault">
            text that appears in angle brackets and indicates what will happen if the user pressed ENTER.
            </param>
        </member>
        <member name="M:Rhino.RhinoApp.SetCommandPrompt(System.String)">
            <summary>Set Rhino command prompt</summary>
            <param name="prompt">
            </param>
        </member>
        <member name="M:Rhino.RhinoApp.ClearCommandHistoryWindow">
            <summary>
            Clear the text in Rhino's command history window
            </summary>
        </member>
        <member name="M:Rhino.RhinoApp.SendKeystrokes(System.String,System.Boolean)">
            <summary>Sends a string of printable characters, including spaces, to Rhino's command line.</summary>
            <param name="characters">[in] A string to characters to send to the command line. This can be null.</param>
            <param name="appendReturn">[in] Append a return character to the end of the string.</param>
        </member>
        <member name="M:Rhino.RhinoApp.Exit">
            <summary>Exits, or closes, Rhino.</summary>
        </member>
        <member name="M:Rhino.RhinoApp.RunScript(System.String,System.Boolean)">
            <summary>Run a Rhino command script.</summary>
            <param name="script">[in] script to run</param>
            <param name="echo">
            Controls how the script is echoed in the command output window.
            false = silent - nothing is echoed
            true = verbatim - the script is echoed literally
            </param>
            <remarks>
            Rhino acts as if each character in the script string had been typed in the command prompt.
            When RunScript is called from a "script runner" command, it completely runs the
            script before returning. When RunScript is called outside of a command, it returns and the
            script is run. This way menus and buttons can use RunScript to execute complicated functions.
            </remarks>
        </member>
        <member name="M:Rhino.RhinoApp.Wait">
            <summary>
            Pause to keep Windows message pump alive so views will update
            and windows will repaint
            </summary>
        </member>
        <member name="M:Rhino.RhinoApp.MainWindowHandle">
            <summary>
            Gets the WindowHandle of the Rhino main window.
            </summary>
        </member>
        <member name="M:Rhino.RhinoApp.GetPlugInObject(System.Guid)">
            <summary>
            Get the object that is returned by PlugIn.GetPlugInObject for a given
            plug-in. This function attempts to find and load a plug-in with a given Id.
            When a plug-in is found, it's GetPlugInObject function is called and the
            result is returned here.
            Note the plug-in must have already been installed in Rhino or the plug-in manager
            will not know where to look for a plug-in with a matching id.
            </summary>
            <param name="pluginId">Guid for a given plug-in</param>
            <returns>
            Result of PlugIn.GetPlugInObject for a given plug-in on success.
            </returns>
        </member>
        <member name="M:Rhino.RhinoApp.GetPlugInObject(System.String)">
            <summary>
            Get the object that is returned by PlugIn.GetPlugInObject for a given
            plug-in. This function attempts to find and load a plug-in with a given name.
            When a plug-in is found, it's GetPlugInObject function is called and the
            result is returned here.
            Note the plug-in must have already been installed in Rhino or the plug-in manager
            will not know where to look for a plug-in with a matching name.
            </summary>
            <param name="plugin">Name of a plug-in</param>
            <returns>
            Result of PlugIn.GetPlugInObject for a given plug-in on success.
            </returns>
        </member>
        <member name="F:Rhino.RhinoMath.ZeroTolerance">
            <summary>
            Gets the Zero Tolerance constant (1.0e-12).
            </summary>
        </member>
        <member name="F:Rhino.RhinoMath.UnsetValue">
            <summary>
            Gets the Rhino standard Unset value. Use this value rather than Double.NaN when
            a bogus floating point value is required.
            </summary>
        </member>
        <member name="F:Rhino.RhinoMath.UnsetSingle">
            <summary>
            Gets the single precision floating point number that is considered 'unset' in Rhino.
            </summary>
        </member>
        <member name="M:Rhino.RhinoMath.ToRadians(System.Double)">
            <summary>
            Convert an angle from degrees to radians.
            </summary>
            <param name="degrees">Degrees to convert (180 degrees equals pi radians).</param>
        </member>
        <member name="M:Rhino.RhinoMath.ToDegrees(System.Double)">
            <summary>
            Convert an angle from radians to degrees.
            </summary>
            <param name="radians">Radians to convert (180 degrees equals pi radians).</param>
        </member>
        <member name="M:Rhino.RhinoMath.IsValidDouble(System.Double)">
            <summary>
            Tests a double value for validity. Since Rhino does not use Double.NaN by convention,
            this test is more accurate that Double.IsNaN().
            </summary>
            <param name="x">Number to test for validity.</param>
            <returns>True if the number if valid, False if the number is NaN, Infinity or Unset.</returns>
        </member>
        <member name="M:Rhino.RhinoMath.IsValidSingle(System.Single)">
            <summary>
            Tests a single (float) value for validity. Since Rhino does not use Single.NaN by convention,
            this test is more accurate that Single.IsNaN().
            </summary>
            <param name="x">Number to test for validity.</param>
            <returns>True if the number if valid, False if the number is NaN, Infinity or Unset.</returns>
        </member>
        <member name="M:Rhino.RhinoMath.UnitScale(Rhino.UnitSystem,Rhino.UnitSystem)">
            <summary>Scale factor for changing unit "standard" systems</summary>
            <param name="from">
            </param>
            <param name="to">
            </param>
            <returns>
            </returns>
        </member>
        <member name="F:Rhino.UnitSystem.Angstroms">
            <summary>1.0e-10 meters</summary>
        </member>
        <member name="F:Rhino.UnitSystem.Nanometers">
            <summary>1.0e-9 meters</summary>
        </member>
        <member name="F:Rhino.UnitSystem.Microns">
            <summary>1.0e-6 meters</summary>
        </member>
        <member name="F:Rhino.UnitSystem.Millimeters">
            <summary>1.0e-3 meters</summary>
        </member>
        <member name="F:Rhino.UnitSystem.Centimeters">
            <summary>1.0e-2 meters</summary>
        </member>
        <member name="F:Rhino.UnitSystem.Decimeters">
            <summary>1.0e-1 meters</summary>
        </member>
        <member name="F:Rhino.UnitSystem.Dekameters">
            <summary>1.0e+1 meters</summary>
        </member>
        <member name="F:Rhino.UnitSystem.Hectometers">
            <summary>1.0e+2 meters</summary>
        </member>
        <member name="F:Rhino.UnitSystem.Kilometers">
            <summary>1.0e+3 meters</summary>
        </member>
        <member name="F:Rhino.UnitSystem.Megameters">
            <summary>1.0e+6 meters</summary>
        </member>
        <member name="F:Rhino.UnitSystem.Gigameters">
            <summary>1.0e+9 meters</summary>
        </member>
        <member name="F:Rhino.UnitSystem.Microinches">
            <summary>2.54e-8 meters (1.0e-6 inches)</summary>
        </member>
        <member name="F:Rhino.UnitSystem.Mils">
            <summary>2.54e-5 meters (0.001 inches)</summary>
        </member>
        <member name="F:Rhino.UnitSystem.Inches">
            <summary>0.0254 meters</summary>
        </member>
        <member name="F:Rhino.UnitSystem.Feet">
            <summary>0.3408 meters (12 inches)</summary>
        </member>
        <member name="F:Rhino.UnitSystem.Yards">
            <summary>0.9144 meters (36 inches)</summary>
        </member>
        <member name="F:Rhino.UnitSystem.Miles">
            <summary>1609.344 meters (5280 feet)</summary>
        </member>
        <member name="F:Rhino.UnitSystem.PrinterPoint">
            <summary>Printer Distance 1/72 inches (computer points)</summary>
        </member>
        <member name="F:Rhino.UnitSystem.PrinterPica">
            <summary>Printer Distance 1/6 inches (computer picas)</summary>
        </member>
        <member name="F:Rhino.UnitSystem.NauticalMile">
            <summary>
            Terrestrial Distance, 1852 meters
            Approximately 1 minute of arc on a terrestrial great circle.
            See http://en.wikipedia.org/wiki/Nautical_mile.
            </summary>
        </member>
        <member name="F:Rhino.UnitSystem.Astronomical">
            <summary>
            Astronomical Distance
            http://en.wikipedia.org/wiki/Astronomical_unit
            1.495979e+11  // http://units.nist.gov/Pubs/SP811/appenB9.htm
            An astronomical unit (au) is the mean distance from the
            center of the earth to the center of the sun.
            </summary>
        </member>
        <member name="F:Rhino.UnitSystem.Lightyears">
            <summary>
            Light Year
            http://en.wikipedia.org/wiki/Light_year
            9.46073e+15 meters   http://units.nist.gov/Pubs/SP811/appenB9.htm
            A light year is the distance light travels in one Julian year.
            The speed of light is exactly 299792458 meters/second.
            A Julian year is exactly 365.25 * 86400 seconds and is
            approximately the time it takes for one earth orbit.
            </summary>
        </member>
        <member name="F:Rhino.UnitSystem.Parsecs">
            <summary>
            Parallax Second
            http://en.wikipedia.org/wiki/Parsec
            3.085678e+16 meters   http://units.nist.gov/Pubs/SP811/appenB9.htm
            </summary>
        </member>
        <member name="F:Rhino.UnitSystem.CustomUnitSystem">
            <summary>
            Custom unit systems
            x meters with x defined in ON_3dmUnitsAndTolerances.m_custom_unit_scale
            </summary>
        </member>
        <member name="F:Rhino.Geometry.Continuity.C0_continuous">
            <summary>
            Continuous Function : Test for parametric continuity. In particular, all types of curves
            are considered infinitely continuous at the start/end of the evaluation domain.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.Continuity.C1_continuous">
            <summary>
            Continuous first derivative : Test for parametric continuity. In particular,
            all types of curves are considered infinitely continuous at the start/end
            of the evaluation domain.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.Continuity.C2_continuous">
            <summary>
            Continuous first derivative and second derivative : Test for parametric continuity.
            In particular, all types of curves are considered infinitely continuous at the
            start/end of the evaluation domain.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.Continuity.G1_continuous">
            <summary>
            Continuous unit tangent : Test for parametric continuity. In particular, all types of
            curves are considered infinitely continuous at the start/end of the evaluation domain.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.Continuity.G2_continuous">
            <summary>
            Continuous unit tangent and curvature : Test for parametric continuity. In particular,
            all types of curves are considered infinitely continuous at the start/end of the
            evaluation domain.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.Continuity.C0_locus_continuous">
            <summary>
            locus continuous function :
            Continuity tests using the following enum values are identical to tests using the
            preceding enum values on the INTERIOR of a curve's domain. At the END of a curve
            a "locus" test is performed in place of a parametric test. In particular, at the
            END of a domain, all open curves are locus discontinuous. At the END of a domain,
            all closed curves are at least C0_locus_continuous. By convention all Curves
            are considered locus continuous at the START of the evaluation domain. This
            convention is not strictly correct, but it was adopted to make iterative kink
            finding tools easier to use and so that locus discontinuities are reported once
            at the end parameter of a curve rather than twice.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.Continuity.C1_locus_continuous">
            <summary>
            locus continuous first derivative :
            Continuity tests using the following enum values are identical to tests using the
            preceding enum values on the INTERIOR of a curve's domain. At the END of a curve
            a "locus" test is performed in place of a parametric test. In particular, at the
            END of a domain, all open curves are locus discontinuous. At the END of a domain,
            all closed curves are at least C0_locus_continuous. By convention all Curves
            are considered locus continuous at the START of the evaluation domain. This
            convention is not strictly correct, but it was adopted to make iterative kink
            finding tools easier to use and so that locus discontinuities are reported once
            at the end parameter of a curve rather than twice.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.Continuity.C2_locus_continuous">
            <summary>
            locus continuous first and second derivative :
            Continuity tests using the following enum values are identical to tests using the
            preceding enum values on the INTERIOR of a curve's domain. At the END of a curve
            a "locus" test is performed in place of a parametric test. In particular, at the
            END of a domain, all open curves are locus discontinuous. At the END of a domain,
            all closed curves are at least C0_locus_continuous. By convention all Curves
            are considered locus continuous at the START of the evaluation domain. This
            convention is not strictly correct, but it was adopted to make iterative kink
            finding tools easier to use and so that locus discontinuities are reported once
            at the end parameter of a curve rather than twice.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.Continuity.G1_locus_continuous">
            <summary>
            locus continuous unit tangent :
            Continuity tests using the following enum values are identical to tests using the
            preceding enum values on the INTERIOR of a curve's domain. At the END of a curve
            a "locus" test is performed in place of a parametric test. In particular, at the
            END of a domain, all open curves are locus discontinuous. At the END of a domain,
            all closed curves are at least C0_locus_continuous. By convention all Curves
            are considered locus continuous at the START of the evaluation domain. This
            convention is not strictly correct, but it was adopted to make iterative kink
            finding tools easier to use and so that locus discontinuities are reported once
            at the end parameter of a curve rather than twice.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.Continuity.G2_locus_continuous">
            <summary>
            locus continuous unit tangent and curvature :
            Continuity tests using the following enum values are identical to tests using the
            preceding enum values on the INTERIOR of a curve's domain. At the END of a curve
            a "locus" test is performed in place of a parametric test. In particular, at the
            END of a domain, all open curves are locus discontinuous. At the END of a domain,
            all closed curves are at least C0_locus_continuous. By convention all Curves
            are considered locus continuous at the START of the evaluation domain. This
            convention is not strictly correct, but it was adopted to make iterative kink
            finding tools easier to use and so that locus discontinuities are reported once
            at the end parameter of a curve rather than twice.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.Continuity.Cinfinity_continuous">
            <summary>
            analytic discontinuity
            </summary>
        </member>
        <member name="T:Rhino.DocObjects.ActiveSpace">
            <summary>Defines the current working space.</summary>
        </member>
        <member name="F:Rhino.DocObjects.ActiveSpace.ModelSpace">
            <summary>3d modeling or "world" space</summary>
        </member>
        <member name="F:Rhino.DocObjects.ActiveSpace.PageSpace">
            <summary>page/layout/paper/printing space</summary>
        </member>
        <member name="F:Rhino.DocObjects.ObjectMode.Normal">
            <summary>object mode comes from layer</summary>
        </member>
        <member name="F:Rhino.DocObjects.ObjectMode.Hidden">
            <summary>not visible, object cannot be selected or changed</summary>
        </member>
        <member name="F:Rhino.DocObjects.ObjectMode.Locked">
            <summary>visible, object cannot be selected or changed</summary>
        </member>
        <member name="F:Rhino.DocObjects.ObjectMode.InstanceDefinitionObject">
            <summary>
            object is part of an InstanceDefinition. The InstanceDefinition
            m_object_uuid[] array will contain this object attribute's uuid.
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.ObjectColorSource.ColorFromLayer">
            <summary>use color assigned to layer</summary>
        </member>
        <member name="F:Rhino.DocObjects.ObjectColorSource.ColorFromObject">
            <summary>use color assigned to object</summary>
        </member>
        <member name="F:Rhino.DocObjects.ObjectColorSource.ColorFromMaterial">
            <summary>use diffuse render material color</summary>
        </member>
        <member name="F:Rhino.DocObjects.ObjectColorSource.ColorFromParent">
            <summary>
            for objects with parents (like objects in instance references, use parent linetype)
            if no parent, treat as color_from_layer
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.ObjectPlotColorSource.PlotColorFromLayer">
            <summary>use plot color assigned to layer</summary>
        </member>
        <member name="F:Rhino.DocObjects.ObjectPlotColorSource.PlotColorFromObject">
            <summary>use plot color assigned to object</summary>
        </member>
        <member name="F:Rhino.DocObjects.ObjectPlotColorSource.PlotColorFromDisplay">
            <summary>use display color</summary>
        </member>
        <member name="F:Rhino.DocObjects.ObjectPlotColorSource.PlotColorFromParent">
            <summary>
            for objects with parents (like objects in instance references, use parent plot color)
            if no parent, treat as plot_color_from_layer
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.ObjectPlotWeightSource.PlotWeightFromLayer">
            <summary>use plot color assigned to layer</summary>
        </member>
        <member name="F:Rhino.DocObjects.ObjectPlotWeightSource.PlotWeightFromObject">
            <summary>use plot color assigned to object</summary>
        </member>
        <member name="F:Rhino.DocObjects.ObjectPlotWeightSource.PlotWeightFromParent">
            <summary>
            for objects with parents (like objects in instance references, use parent plot color)
            if no parent, treat as plot_color_from_layer
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.ObjectLinetypeSource.LinetypeFromLayer">
            <summary>use line style assigned to layer</summary>
        </member>
        <member name="F:Rhino.DocObjects.ObjectLinetypeSource.LinetypeFromObject">
            <summary>use line style assigned to object</summary>
        </member>
        <member name="F:Rhino.DocObjects.ObjectLinetypeSource.LinetypeFromParent">
            <summary>
            for objects with parents (like objects in instance references, use parent linetype)
            if not parent, treat as linetype_from_layer.
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.ObjectMaterialSource.MaterialFromLayer">
            <summary>use material assigned to layer</summary>
        </member>
        <member name="F:Rhino.DocObjects.ObjectMaterialSource.MaterialFromObject">
            <summary>use material assigned to object</summary>
        </member>
        <member name="F:Rhino.DocObjects.ObjectMaterialSource.MaterialFromParent">
            <summary>
            for objects with parents, like definition geometry in instance
            references and faces in polysurfaces, this value indicates the
            material definition should come from the parent. If the object
            does not have an obvious "parent", then treat it the same as
            material_from_layer.
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.ObjectType.Grip">
            <summary>Selection filter value - not a real object type</summary>
        </member>
        <member name="F:Rhino.DocObjects.ObjectType.PolysrfFilter">
            <summary>Selection filter value - not a real object type</summary>
        </member>
        <member name="F:Rhino.DocObjects.ObjectType.EdgeFilter">
            <summary>Selection filter value - not a real object type</summary>
        </member>
        <member name="F:Rhino.DocObjects.ObjectType.PolyedgeFilter">
            <summary>Selection filter value - not a real object type</summary>
        </member>
        <member name="F:Rhino.DocObjects.ObjectDecoration.StartArrowhead">
            <summary>arrow head at start</summary>
        </member>
        <member name="F:Rhino.DocObjects.ObjectDecoration.EndArrowhead">
            <summary>arrow head at end</summary>
        </member>
        <member name="F:Rhino.DocObjects.ObjectDecoration.BothArrowhead">
            <summary>arrow head at start and end</summary>
        </member>
        <member name="F:Rhino.Geometry.LightStyle.CameraDirectional">
            <summary>
            Light location and direction in camera coordinates.
            +x points to right, +y points up, +z points towards camera
            </summary>
        </member>
        <member name="F:Rhino.Geometry.LightStyle.CameraPoint">
            <summary>
            Light location and direction in camera coordinates.
            +x points to right, +y points up, +z points towards camera
            </summary>
        </member>
        <member name="F:Rhino.Geometry.LightStyle.CameraSpot">
            <summary>
            Light location and direction in camera coordinates.
            +x points to right, +y points up, +z points towards camera
            </summary>
        </member>
        <member name="F:Rhino.Geometry.LightStyle.WorldDirectional">
            <summary>Light location and direction in world coordinates</summary>
        </member>
        <member name="F:Rhino.Geometry.LightStyle.WorldPoint">
            <summary>Light location and direction in world coordinates</summary>
        </member>
        <member name="F:Rhino.Geometry.LightStyle.WorldSpot">
            <summary>Light location and direction in world coordinates</summary>
        </member>
        <member name="F:Rhino.Geometry.LightStyle.Ambient">
            <summary>Pure ambient light</summary>
        </member>
        <member name="P:Rhino.Geometry.ComponentIndex.ComponentIndexType">
            <summary>
            The interpretation of Index depends on the Type value.
            Type             m_index interpretation (0 based indices)
            no_type            used when context makes it clear what array is being index
            brep_vertex        Brep.m_V[] array index
            brep_edge          Brep.m_E[] array index
            brep_face          Brep.m_F[] array index
            brep_trim          Brep.m_T[] array index
            brep_loop          Brep.m_L[] array index
            mesh_vertex        Mesh.m_V[] array index
            meshtop_vertex     MeshTopology.m_topv[] array index
            meshtop_edge       MeshTopology.m_tope[] array index
            mesh_face          Mesh.m_F[] array index
            idef_part          InstanceDefinition.m_object_uuid[] array index
            polycurve_segment  PolyCurve::m_segment[] array index
            dim_linear_point   LinearDimension2::POINT_INDEX
            dim_radial_point   RadialDimension2::POINT_INDEX
            dim_angular_point  AngularDimension2::POINT_INDEX
            dim_ordinate_point OrdinateDimension2::POINT_INDEX
            dim_text_point     TextEntity2 origin point
            </summary>
        </member>
        <member name="P:Rhino.Geometry.ComponentIndex.Index">
            <summary>
            The interpretation of m_index depends on the m_type value.
            m_type             m_index interpretation (0 based indices)
            no_type            used when context makes it clear what array is being index
            brep_vertex        Brep.m_V[] array index
            brep_edge          Brep.m_E[] array index
            brep_face          Brep.m_F[] array index
            brep_trim          Brep.m_T[] array index
            brep_loop          Brep.m_L[] array index
            mesh_vertex        Mesh.m_V[] array index
            meshtop_vertex     MeshTopology.m_topv[] array index
            meshtop_edge       MeshTopology.m_tope[] array index
            mesh_face          Mesh.m_F[] array index
            idef_part          InstanceDefinition.m_object_uuid[] array index
            polycurve_segment  PolyCurve::m_segment[] array index
            dim_linear_point   LinearDimension2::POINT_INDEX
            dim_radial_point   RadialDimension2::POINT_INDEX
            dim_angular_point  AngularDimension2::POINT_INDEX
            dim_ordinate_point OrdinateDimension2::POINT_INDEX
            dim_text_point     TextEntity2 origin point
            </summary>
        </member>
        <member name="T:Rhino.UI.OpenFileDialog">
            <summary>
            Similar to the System.Windows.Forms.OpenFileDialog, but with customized
            Rhino user interface
            </summary>
        </member>
        <member name="M:Rhino.UI.OpenFileDialog.#ctor">
            <summary>Create a new open file dialog</summary>
            <example>
                <code source="examples\vbnet\ex_addbackgroundbitmap.vb" lang="vbnet" />
                <code source="examples\cs\ex_addbackgroundbitmap.cs" lang="cs" />
                <code source="examples\py\ex_addbackgroundbitmap.py" lang="py" />
            </example>
        </member>
        <member name="P:Rhino.UI.OpenFileDialog.DefaultExt">
            <summary>
            The default file name extension. The returned string does not include the period
            </summary>
        </member>
        <member name="P:Rhino.UI.OpenFileDialog.FileName">
            <summary>
            Gets or sets a string containing the file name selected in the file dialog box.
            </summary>
            <example>
                <code source="examples\vbnet\ex_addbackgroundbitmap.vb" lang="vbnet" />
                <code source="examples\cs\ex_addbackgroundbitmap.cs" lang="cs" />
                <code source="examples\py\ex_addbackgroundbitmap.py" lang="py" />
            </example>
        </member>
        <member name="P:Rhino.UI.OpenFileDialog.Title">
            <summary>
            Gets or sets the file dialog box title.
            </summary>
        </member>
        <member name="P:Rhino.UI.OpenFileDialog.Filter">
            <summary>
            Gets or sets the current file name filter string, which determines
            the choices that appear in the "Save as file type" or "Files of type"
            box in the dialog box. See System.Windows.Forms.FileDialog for details
            </summary>
            <example>
                <code source="examples\vbnet\ex_addbackgroundbitmap.vb" lang="vbnet" />
                <code source="examples\cs\ex_addbackgroundbitmap.cs" lang="cs" />
                <code source="examples\py\ex_addbackgroundbitmap.py" lang="py" />
            </example>
        </member>
        <member name="P:Rhino.UI.OpenFileDialog.InitialDirectory">
            <summary>
            Gets or sets the initial directory displayed by the file dialog box.
            </summary>
        </member>
        <member name="M:Rhino.UI.OpenFileDialog.ShowDialog">
            <summary>Show the actual dialog to allow the user to select a file</summary>
            <example>
                <code source="examples\vbnet\ex_addbackgroundbitmap.vb" lang="vbnet" />
                <code source="examples\cs\ex_addbackgroundbitmap.cs" lang="cs" />
                <code source="examples\py\ex_addbackgroundbitmap.py" lang="py" />
            </example>
        </member>
        <member name="T:Rhino.UI.SaveFileDialog">
            <summary>
            Similar to the System.Windows.Forms.SaveFileDialog, but with customized
            Rhino user interface
            </summary>
        </member>
        <member name="P:Rhino.UI.SaveFileDialog.DefaultExt">
            <summary>
            The default file name extension. The returned string does not include the period
            </summary>
        </member>
        <member name="P:Rhino.UI.SaveFileDialog.FileName">
            <summary>
            Gets or sets a string containing the file name selected in the file dialog box.
            </summary>
        </member>
        <member name="P:Rhino.UI.SaveFileDialog.Title">
            <summary>
            Gets or sets the file dialog box title.
            </summary>
        </member>
        <member name="P:Rhino.UI.SaveFileDialog.Filter">
            <summary>
            Gets or sets the current file name filter string, which determines
            the choices that appear in the "Save as file type" or "Files of type"
            box in the dialog box. See System.Windows.Forms.FileDialog for details
            </summary>
        </member>
        <member name="P:Rhino.UI.SaveFileDialog.InitialDirectory">
            <summary>
            Gets or sets the initial directory displayed by the file dialog box.
            </summary>
        </member>
        <member name="M:Rhino.Input.Custom.GetString.#ctor">
            <summary>
            Create a new GetString
            </summary>
            <example>
                <code source="examples\vbnet\ex_addlayer.vb" lang="vbnet" />
                <code source="examples\cs\ex_addlayer.cs" lang="cs" />
                <code source="examples\py\ex_addlayer.py" lang="py" />
            </example>
        </member>
        <member name="M:Rhino.Input.Custom.GetString.Get">
            <summary>call to get a string</summary>
            <returns>
            </returns>
            <example>
                <code source="examples\vbnet\ex_addlayer.vb" lang="vbnet" />
                <code source="examples\cs\ex_addlayer.cs" lang="cs" />
                <code source="examples\py\ex_addlayer.py" lang="py" />
            </example>
        </member>
        <member name="T:Rhino.Input.Custom.GetOption">
            <summary>
            If you want to explicitly get string input, then use GetString class with
            options. If you only want to get options, then use this class (GetOption)
            </summary>
        </member>
        <member name="M:Rhino.Input.Custom.GetOption.Get">
            <summary>
            Call to get an option. A return value of "option" means the user selected
            a valid option. Use Option() the determine which option
            </summary>
            <returns>
            </returns>
        </member>
        <member name="T:Rhino.Input.Custom.GetNumber">
            <summary>used to get double precision numbers</summary>
        </member>
        <member name="M:Rhino.Input.Custom.GetNumber.#ctor">
            <summary>Create a new GetNumber</summary>
            <example>
                <code source="examples\vbnet\ex_addbackgroundbitmap.vb" lang="vbnet" />
                <code source="examples\cs\ex_addbackgroundbitmap.cs" lang="cs" />
                <code source="examples\py\ex_addbackgroundbitmap.py" lang="py" />
            </example>
        </member>
        <member name="M:Rhino.Input.Custom.GetNumber.Get">
            <summary>Call to get a number</summary>
            <returns>
            </returns>
            <example>
                <code source="examples\vbnet\ex_addbackgroundbitmap.vb" lang="vbnet" />
                <code source="examples\cs\ex_addbackgroundbitmap.cs" lang="cs" />
                <code source="examples\py\ex_addbackgroundbitmap.py" lang="py" />
            </example>
        </member>
        <member name="M:Rhino.Input.Custom.GetNumber.SetLowerLimit(System.Double,System.Boolean)">
            <summary>
            Set a lower limit on the number that can be returned.
            By default there is no lower limit.
            </summary>
            <param name="lowerLimit">smallest acceptable number</param>
            <param name="strictlyGreaterThan">
            If true, then the returned number will be &gt; lower_limit
            </param>
            <example>
                <code source="examples\vbnet\ex_addbackgroundbitmap.vb" lang="vbnet" />
                <code source="examples\cs\ex_addbackgroundbitmap.cs" lang="cs" />
                <code source="examples\py\ex_addbackgroundbitmap.py" lang="py" />
            </example>
        </member>
        <member name="M:Rhino.Input.Custom.GetNumber.SetUpperLimit(System.Double,System.Boolean)">
            <summary>
            Set an upper limit on the number that can be returned.
            By default there is no upper limit.
            </summary>
            <param name="upperLimit">largest acceptable number</param>
            <param name="strictlyLessThan">If true, then the returned number will be &lt; upper_limit</param>
        </member>
        <member name="T:Rhino.Input.Custom.GetInteger">
            <summary>used to get integer numbers</summary>
        </member>
        <member name="M:Rhino.Input.Custom.GetInteger.Get">
            <summary>
            Call to get an integer
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:Rhino.Input.Custom.GetInteger.SetLowerLimit(System.Int32,System.Boolean)">
            <summary>
            Set a lower limit on the number that can be returned.
            By default there is no lower limit.
            </summary>
            <param name="lowerLimit">smallest acceptable number</param>
            <param name="strictlyGreaterThan">
            If true, then the returned number will be &gt; lower_limit
            </param>
        </member>
        <member name="M:Rhino.Input.Custom.GetInteger.SetUpperLimit(System.Int32,System.Boolean)">
            <summary>
            Set an upper limit on the number that can be returned.
            By default there is no upper limit.
            </summary>
            <param name="upperLimit">largest acceptable number</param>
            <param name="strictlyLessThan">If true, then the returned number will be &lt; upper_limit</param>
        </member>
        <member name="T:Rhino.Input.Custom.GetObject">
            <summary>
            The GetObject class is the tool commands use to interactively select objects.
            </summary>
            <example>
            GetObject go = new GetObject();
            go.GetObjects(1,0);
            if( go.CommandResult() != Command.Result.Success )
            ... use canceled or some other type of input was provided
            int object_count = go.ObjectCount();
            for( int i=0; i&lt;object_count; i++ )
            {
            ObjectReference objref = go.Object(i);
            ON_Geometry geo = objref.Geometry();
            ...
            }
            </example>
        </member>
        <member name="M:Rhino.Input.Custom.GetObject.#ctor">
            <example>
                <code source="examples\vbnet\ex_addobjectstogroup.vb" lang="vbnet" />
                <code source="examples\cs\ex_addobjectstogroup.cs" lang="cs" />
                <code source="examples\py\ex_addobjectstogroup.py" lang="py" />
            </example>
        </member>
        <member name="P:Rhino.Input.Custom.GetObject.GeometryFilter">
            <summary>
            The geometry type filter controls which types of geometry
            (points, curves, surfaces, meshes, etc.) can be selected.
            The default geometry type filter permits selection of all
            types of geometry.
            NOTE: the filter can be a bitwise combination of multiple ObjectTypes
            </summary>
            <example>
                <code source="examples\vbnet\ex_orientonsrf.vb" lang="vbnet" />
                <code source="examples\cs\ex_orientonsrf.cs" lang="cs" />
                <code source="examples\py\ex_orientonsrf.py" lang="py" />
            </example>
        </member>
        <member name="P:Rhino.Input.Custom.GetObject.GeometryAttributeFilter">
            <summary>
            The geometry attribute filter provides a secondary filter that
            can be used to restrict which objects can be selected. Control
            of the type of geometry (points, curves, surfaces, meshes, etc.)
            is provided by GetObject.SetGeometryFilter. The geometry attribute
            filter is used to require the selected geometry to have certain
            attributes (open, closed, etc.). The default attribute filter
            permits selection of all types of geometry.
            </summary>
        </member>
        <member name="P:Rhino.Input.Custom.GetObject.DeselectAllBeforePostSelect">
            <summary>
            True if pre-selected input will be deselected before
            post-selection begins when no pre-selected input is valid.
            </summary>
            <example>
                <code source="examples\vbnet\ex_orientonsrf.vb" lang="vbnet" />
                <code source="examples\cs\ex_orientonsrf.cs" lang="cs" />
                <code source="examples\py\ex_orientonsrf.py" lang="py" />
            </example>
        </member>
        <member name="P:Rhino.Input.Custom.GetObject.OneByOnePostSelect">
            <summary>
            In one-by-one post selection, the user is forced
            to select objects by post picking them one at a time.
            </summary>
            <example>
                <code source="examples\vbnet\ex_orientonsrf.vb" lang="vbnet" />
                <code source="examples\cs\ex_orientonsrf.cs" lang="cs" />
                <code source="examples\py\ex_orientonsrf.py" lang="py" />
            </example>
        </member>
        <member name="P:Rhino.Input.Custom.GetObject.SubObjectSelect">
            <summary>
            By default, GetObject.Input will permit a user to select
            sub-objects (like a curve in a b-rep or a curve in a group).
            If you only want the user to select "top" level objects,
            then call EnableSubObjectSelect = false.
            </summary>
            <example>
                <code source="examples\vbnet\ex_orientonsrf.vb" lang="vbnet" />
                <code source="examples\cs\ex_orientonsrf.cs" lang="cs" />
                <code source="examples\py\ex_orientonsrf.py" lang="py" />
            </example>
        </member>
        <member name="P:Rhino.Input.Custom.GetObject.ChooseOneQuestion">
            <summary>
            By default, if a call to Input is permitted to select different parts
            of the same object, like a polysurface and an edge of that polysurface,
            then the top-most object is automatically selected. If you want the
            choose-one-object mechanism to include pop up in these cases, then call
            EnableChooseOneQuestion = true before calling GetObjects().
            </summary>
        </member>
        <member name="P:Rhino.Input.Custom.GetObject.BottomObjectPreference">
            <summary>
            By default, if a call to Input is permitted to select different parts of
            the same object, like a polysurface, a surface and an edge, then the
            top-most object is prefered. (polysurface beats face beats edge). If
            you want the bottom most object to be prefered, then call
            EnableBottomObjectPreference = true before calling GetObjects().
            </summary>
        </member>
        <member name="P:Rhino.Input.Custom.GetObject.GroupSelect">
            <summary>
            By default, groups are ignored in GetObject. If you want your call to
            GetObjects() to select every object in a group that has any objects
            selected, then enable group selection.
            </summary>
            <example>
                <code source="examples\vbnet\ex_orientonsrf.vb" lang="vbnet" />
                <code source="examples\cs\ex_orientonsrf.cs" lang="cs" />
                <code source="examples\py\ex_orientonsrf.py" lang="py" />
            </example>
        </member>
        <member name="P:Rhino.Input.Custom.GetObject.ReferenceObjectSelect">
            <summary>
            By default, reference objects can be selected. If you do not want to be
            able to select reference objects, then call EnableReferenceObjectSelect=false
            </summary>
        </member>
        <member name="P:Rhino.Input.Custom.GetObject.AlreadySelectedObjectSelect">
            <summary>
            Allow selecting objects that are already selected. By default, GetObjects() disallows
            selection of objects that are already selected to avoid putting the same object
            in the selection set more than once. Calling EnableAlreadySelectedObjectSelect = true
            overrides that restriction and allows selected objects to be selected and
            returned by GetObjects. This is useful because, coupled with the return immediately
            mode of GetObjects( 1, -1), it is possible to select a selected object to deselect
            when the selected objects are being managed outside GetObjects() as in the case of
            CRhinoPolyEdge::GetEdge().
            </summary>
        </member>
        <member name="P:Rhino.Input.Custom.GetObject.ObjectCount">
            <summary>
            Gets the number of objects that were selected.
            </summary>
        </member>
        <member name="P:Rhino.Input.Custom.GetObject.SerialNumber">
            <summary>
            Each instance of GetObject has a unique runtime serial number that
            is used to identify object selection events associated with that instance.
            </summary>
        </member>
        <member name="M:Rhino.Input.Custom.GetObject.CustomGeometryFilter(Rhino.DocObjects.RhinoObject,Rhino.Geometry.GeometryBase,Rhino.Geometry.ComponentIndex)">
            <summary>
            Checks geometry to see if it can be selected.
            Override to provide fancy filtering.
            </summary>
            <param name="rhObject">parent object being considered</param>
            <param name="geometry">geometry being considered</param>
            <param name="componentIndex">
            if &gt;= 0, geometry is a proper sub-part of object-&gt;Geometry() with componentIndex
            </param>
            <returns>The default always returns true</returns>
        </member>
        <member name="M:Rhino.Input.Custom.GetObject.PassesGeometryAttributeFilter(Rhino.DocObjects.RhinoObject,Rhino.Geometry.GeometryBase,Rhino.Geometry.ComponentIndex)">
            <summary>
            Checks geometry to see if it passes the basic GeometryAttributeFilter.
            </summary>
            <param name="rhObject">parent object being considered</param>
            <param name="geometry">geometry being considered</param>
            <param name="componentIndex">if &gt;= 0, geometry is a proper sub-part of object-&gt;Geometry() with componentIndex.</param>
            <returns>
            true if the geometry passes the filter returned by GeometryAttributeFilter().
            </returns>
        </member>
        <member name="M:Rhino.Input.Custom.GetObject.EnablePreSelect(System.Boolean,System.Boolean)">
            <summary>
            Control the pre selection behavior GetObjects.
            </summary>
            <param name="enable">if true, pre-selection is enabled</param>
            <param name="ignoreUnacceptablePreselectedObjects">
            If true and some acceptable objects are pre-selected, then any unacceptable
            pre-selected objects are ignored. If false and any unacceptable are pre-selected,
            then the user is forced to post-select.
            </param>
            <remarks>
            By default, if valid input is pre-selected when GetObjects() is called, then that input
            is returned and the user is not given the opportunity to post-select. If you want
            to force the user to post-select, then call EnablePreSelect(false).
            </remarks>
        </member>
        <member name="M:Rhino.Input.Custom.GetObject.EnablePostSelect(System.Boolean)">
            <summary>
            Control the availability of post selection in GetObjects.
            </summary>
            <remarks>
            By default, if no valid input is pre-selected when GetObjects is called, then
            the user is given the chance to post select. If you want to force the user to pre-select,
            then call EnablePostSelect(false).
            </remarks>
        </member>
        <member name="M:Rhino.Input.Custom.GetObject.EnableSelPrevious(System.Boolean)">
            <summary>
            By default, any object selected during a command becomes part of the
            "previous selection set" and can be reselected by the SelPrev command.
            If you need to select objects but do not want them to be selected by
            a subsquent call to SelPrev, then call EnableSelPrev = false
            </summary>
        </member>
        <member name="M:Rhino.Input.Custom.GetObject.EnableHighlight(System.Boolean)">
            <summary>
            By default, any object post-pick selected by GetObjects() is highlighted.
            If you want to post-pick objects and not have them automatically highlight,
            then call EnableHighlight = false
            </summary>
        </member>
        <member name="M:Rhino.Input.Custom.GetObject.EnableIgnoreGrips(System.Boolean)">
            <summary>
            By default, post selection will select objects with grips on. If you do
            not want to be able to post select objects with grips on, then call
            EnableIgnoreGrips = false. The ability to preselect an object with grips
            on is determined by the value returned by the virtual
            RhinoObject.IsSelectableWithGripsOn.
            </summary>
        </member>
        <member name="M:Rhino.Input.Custom.GetObject.EnablePressEnterWhenDonePrompt(System.Boolean)">
            <summary>
            By default, when GetObject.GetObjects is called with minimumNumber &gt; 0
            and maximumNumber = 0, the command prompt automatically includes "Press Enter
            when done" after the user has selected at least minimumNumber of objects. If
            you want to prohibit the addition of the "Press Enter when done", then call
            EnablePressEnterWhenDonePrompt = false;
            </summary>
        </member>
        <member name="M:Rhino.Input.Custom.GetObject.SetPressEnterWhenDonePrompt(System.String)">
            <summary>
            The default prompt when EnablePressEnterWhenDonePrompt is enabled is "Press Enter
            when done". Use this function to specify a different string to be appended.
            </summary>
            <param name="prompt">
            </param>
        </member>
        <member name="M:Rhino.Input.Custom.GetObject.Get">
            <summary>
            Call to select a single object
            </summary>
            <returns>
            Success - objects selected.
            Cancel - user pressed ESCAPE to cancel the get.
            See GetResults for other possible values that may be returned when options, numbers,
            etc., are acceptable responses.
            </returns>
        </member>
        <member name="M:Rhino.Input.Custom.GetObject.GetMultiple(System.Int32,System.Int32)">
            <summary>Call to select objects.</summary>
            <param name="minimumNumber">minimum number of objects to select.</param>
            <param name="maximumNumber">
            maximum number of objects to select.
            If 0, then the user must press enter to finish object selection.
            If -1, then object selection stops as soon as there are at least minimumNumber of object selected.
            If &gt;0, then the picking stops when there are maximumNumber objects.  If a window pick, crossing
            pick, or Sel* command attempts to add more than maximumNumber, then the attempt is ignored.
            </param>
            <returns>
            Success - objects selected.
            Cancel - user pressed ESCAPE to cancel the get.
            See GetResults for other possible values that may be returned when options, numbers,
            etc., are acceptable responses.
            </returns>
            <example>
                <code source="examples\vbnet\ex_addobjectstogroup.vb" lang="vbnet" />
                <code source="examples\cs\ex_addobjectstogroup.cs" lang="cs" />
                <code source="examples\py\ex_addobjectstogroup.py" lang="py" />
            </example>
        </member>
        <member name="M:Rhino.Input.Custom.GetObject.Object(System.Int32)">
            <example>
                <code source="examples\vbnet\ex_orientonsrf.vb" lang="vbnet" />
                <code source="examples\cs\ex_orientonsrf.cs" lang="cs" />
                <code source="examples\py\ex_orientonsrf.py" lang="py" />
            </example>
        </member>
        <member name="M:Rhino.Input.Custom.GetObject.EnableClearObjectsOnEntry(System.Boolean)">
            <summary>
            By default the picked object list is cleared when GetObject.GetObjects() is called.
            If you are reusing a GetObject class and do not want the existing object list
            cleared when you call Input, then call EnableClearObjectsOnEntry(false) before
            calling GetObjects().
            </summary>
            <param name="enable">
            </param>
        </member>
        <member name="M:Rhino.Input.Custom.GetObject.EnableUnselectObjectsOnExit(System.Boolean)">
            <summary>
            By default any objects in the object list are unselected when GetObject.GetObjects()
            exits with any return code besides Object. If you want to leave the objects
            selected when non-object input is returned, then call EnableClearObjectsOnExit(false)
            before calling GetObjects().
            </summary>
            <param name="enable">
            </param>
        </member>
        <member name="T:Rhino.Input.Custom.GeometryAttributeFilter">
            <summary>
            If an object passes the geometry TYPE filter, then the geometry ATTRIBUTE
            filter is applied.
            </summary>
        </member>
        <member name="F:Rhino.Input.Custom.GeometryAttributeFilter.WireCurve">
            <summary>
            3d wire curve
            If you want to accept only wire or edge curves, then
            specify wire_curve or edge_curve, otherwise both wire
            and edge curves will pass the attribute filter.
            </summary>
        </member>
        <member name="F:Rhino.Input.Custom.GeometryAttributeFilter.EdgeCurve">
            <summary>
            3d curve of a surface edge
            If you want to accept only wire or edge curves, then
            specify wire_curve or edge_curve, otherwise both wire
            and edge curves will pass the attribute filter.
            </summary>
        </member>
        <member name="F:Rhino.Input.Custom.GeometryAttributeFilter.ClosedCurve">
            <summary>
            Closed Curves and Edges are acceptable
            If you want to accept only closed or open curves, then
            specify either closed_curve or open_curve.  Otherwise both
            closed and open curves will pass the attribute filter.
            </summary>
        </member>
        <member name="F:Rhino.Input.Custom.GeometryAttributeFilter.OpenCurve">
            <summary>
            Open Curves and Edges are acceptable
            If you want to accept only closed or open curves, then
            specify either closed_curve or open_curve.  Otherwise both
            closed and open curves will pass the attribute filter.
            </summary>
        </member>
        <member name="F:Rhino.Input.Custom.GeometryAttributeFilter.SeamEdge">
            <summary>
            seam edges are acceptable
            attributes of acceptable trimming edge objects (associated with an ON_BrepTrim).
            If none of these attributes are explicitly specified, then
            any kind of trimming edge will pass the attribute filter.
            </summary>
        </member>
        <member name="F:Rhino.Input.Custom.GeometryAttributeFilter.ManifoldEdge">
            <summary>
            edges with 2 different surfaces pass
            attributes of acceptable trimming edge objects (associated with an ON_BrepTrim).
            If none of these attributes are explicitly specified, then
            any kind of trimming edge will pass the attribute filter.
            </summary>
        </member>
        <member name="F:Rhino.Input.Custom.GeometryAttributeFilter.NonmanifoldEdge">
            <summary>
            edges with 3 or more surfaces pass
            attributes of acceptable trimming edge objects (associated with an ON_BrepTrim).
            If none of these attributes are explicitly specified, then
            any kind of trimming edge will pass the attribute filter.
            </summary>
        </member>
        <member name="F:Rhino.Input.Custom.GeometryAttributeFilter.MatedEdge">
            <summary>
            any mated edge passes
            attributes of acceptable trimming edge objects (associated with an ON_BrepTrim).
            If none of these attributes are explicitly specified, then
            any kind of trimming edge will pass the attribute filter.
            </summary>
        </member>
        <member name="F:Rhino.Input.Custom.GeometryAttributeFilter.SurfaceBoundaryEdge">
            <summary>
            boundary edges on surface sides pass
            attributes of acceptable trimming edge objects (associated with an ON_BrepTrim).
            If none of these attributes are explicitly specified, then
            any kind of trimming edge will pass the attribute filter.
            </summary>
        </member>
        <member name="F:Rhino.Input.Custom.GeometryAttributeFilter.TrimmingBoundaryEdge">
            <summary>
            boundary edges that trim a surface pass
            attributes of acceptable trimming edge objects (associated with an ON_BrepTrim).
            If none of these attributes are explicitly specified, then
            any kind of trimming edge will pass the attribute filter.
            </summary>
        </member>
        <member name="F:Rhino.Input.Custom.GeometryAttributeFilter.BoundaryEdge">
            <summary>
            ant boundary edge passes
            attributes of acceptable trimming edge objects (associated with an ON_BrepTrim).
            If none of these attributes are explicitly specified, then
            any kind of trimming edge will pass the attribute filter.
            </summary>
        </member>
        <member name="F:Rhino.Input.Custom.GeometryAttributeFilter.ClosedSurface">
            <summary>
            If you want to accept only closed or open surfaces, then
            specify either closed_surface or open_surface.  Otherwise both
            closed and open surfaces will pass the attribute filter.
            </summary>
        </member>
        <member name="F:Rhino.Input.Custom.GeometryAttributeFilter.OpenSurface">
            <summary>
            If you want to accept only closed or open surfaces, then
            specify either closed_surface or open_surface.  Otherwise both
            closed and open surfaces will pass the attribute filter.
            </summary>
        </member>
        <member name="F:Rhino.Input.Custom.GeometryAttributeFilter.TrimmedSurface">
            <summary>
            If you want to accept only trimmed or untrimmed surfaces, then
            specify either trimmed_surface or untrimmed_surface.  Otherwise
            both trimmed and untrimmed surfaces will pass the attribute filter.
            </summary>
        </member>
        <member name="F:Rhino.Input.Custom.GeometryAttributeFilter.UntrimmedSurface">
            <summary>
            If you want to accept only trimmed or untrimmed surfaces, then
            specify either trimmed_surface or untrimmed_surface.  Otherwise
            both trimmed and untrimmed surfaces will pass the attribute filter.
            </summary>
        </member>
        <member name="F:Rhino.Input.Custom.GeometryAttributeFilter.SubSurface">
            <summary>
            If you want to accept only sub-surfaces of (multi-surface)
            polysrf, then specify sub_surface.  If you do not want to
            accept sub-surfaces, then specify top_surface.  Otherwise
            sub-surfaces and top surfaces will pass the attribute filter.
            </summary>
        </member>
        <member name="F:Rhino.Input.Custom.GeometryAttributeFilter.TopSurface">
            <summary>
            If you want to accept only sub-surfaces of (multi-surface)
            polysrf, then specify sub_surface.  If you do not want to
            accept sub-surfaces, then specify top_surface.  Otherwise
            sub-surfaces and top surfaces will pass the attribute filter.
            </summary>
        </member>
        <member name="F:Rhino.Input.Custom.GeometryAttributeFilter.ManifoldPolysrf">
            <summary>
            If you want to accept only manifold or nonmanifold polysrfs,
            then specify manifold_polysrf or nonmanifold_polysrf. Otherwise
            both manifold and nonmanifold polysrfs will pass the attribute
            filter.
            </summary>
        </member>
        <member name="F:Rhino.Input.Custom.GeometryAttributeFilter.NonmanifoldPolysrf">
            <summary>
            If you want to accept only manifold or nonmanifold polysrfs,
            then specify manifold_polysrf or nonmanifold_polysrf. Otherwise
            both manifold and nonmanifold polysrfs will pass the attribute
            filter.
            </summary>
        </member>
        <member name="F:Rhino.Input.Custom.GeometryAttributeFilter.ClosedPolysrf">
            <summary>
            If you want to accept only closed or open polysrfs, then
            specify either closed_polysrf or open_polysrf.  Otherwise both
            closed and open polysrfs will pass the attribute filter.
            </summary>
        </member>
        <member name="F:Rhino.Input.Custom.GeometryAttributeFilter.OpenPolysrf">
            <summary>
            If you want to accept only closed or open polysrfs, then
            specify either closed_polysrf or open_polysrf.  Otherwise both
            closed and open polysrfs will pass the attribute filter.
            </summary>
        </member>
        <member name="F:Rhino.Input.Custom.GeometryAttributeFilter.ClosedMesh">
            <summary>
            If you want to accept only closed or open meshs, then
            specify either closed_mesh or open_mesh.  Otherwise both
            closed and open meshs will pass the attribute filter.
            </summary>
        </member>
        <member name="F:Rhino.Input.Custom.GeometryAttributeFilter.OpenMesh">
            <summary>
            If you want to accept only closed or open meshs, then
            specify either closed_mesh or open_mesh.  Otherwise both
            closed and open meshs will pass the attribute filter.
            </summary>
        </member>
        <member name="F:Rhino.Input.Custom.GeometryAttributeFilter.BoundaryInnerLoop">
            <summary>all trimming edges are boundary edges</summary>
        </member>
        <member name="F:Rhino.Input.Custom.GeometryAttributeFilter.MatedInnerLoop">
            <summary>all trimming edges are mated</summary>
        </member>
        <member name="F:Rhino.Input.Custom.GeometryAttributeFilter.InnerLoop">
            <summary>any inner loop is acceptable</summary>
        </member>
        <member name="F:Rhino.Input.Custom.GeometryAttributeFilter.BoundaryOuterLoop">
            <summary>all trimming edges are boundary edges</summary>
        </member>
        <member name="F:Rhino.Input.Custom.GeometryAttributeFilter.MatedOuterLoop">
            <summary>all trimming edges are mated</summary>
        </member>
        <member name="F:Rhino.Input.Custom.GeometryAttributeFilter.OuterLoop">
            <summary>any outer loop is acceptable</summary>
        </member>
        <member name="F:Rhino.Input.Custom.GeometryAttributeFilter.SpecialLoop">
            <summary>slit, crvonsrf, ptonsrf, etc.</summary>
        </member>
        <member name="M:Rhino.Input.Custom.GetPoint.#ctor">
            <summary>Create a new GetPoint</summary>
            <example>
                <code source="examples\vbnet\ex_addline.vb" lang="vbnet" />
                <code source="examples\cs\ex_addline.cs" lang="cs" />
                <code source="examples\py\ex_addline.py" lang="py" />
            </example>
        </member>
        <member name="E:Rhino.Input.Custom.GetPoint.MouseMove">
            <summary>
            Called every time the mouse moves. MouseMove is called once per mouse move and is called
            BEFORE any calls to OnDynamicDraw. If you are doing anything that takes a long time,
            periodically call InterruptMouseMove() to see if you should stop. If the view is such
            that the 2d screen point can't be mapped to a 3d point, the 'point' argument will be Unset
            </summary>
        </member>
        <member name="E:Rhino.Input.Custom.GetPoint.MouseDown">
            <summary>
            Called during Get2dRectangle, Get2dLine, and GetPoint(..,true) when the mouse down event for
            the initial point occurs. This function is not called during ordinary point getting because
            the mouse down event terminates an ordinary point get and returns a GetResult.Point result.
            </summary>
        </member>
        <member name="E:Rhino.Input.Custom.GetPoint.DynamicDraw">
            <summary>
            Event to use if you want to dynamically draw things as the mouse/digitizer moves.
            Every time the mouse moves, DynamicDraw will be called once per viewport. The
            calls to DynamicDraw happen AFTER the call to MouseMove.
            If you are drawing anything that takes a long time, periodically call
            InterruptMouseMove() to see if you should stop.
            </summary>
        </member>
        <member name="P:Rhino.Input.Custom.GetPoint.DynamicDrawColor">
            <summary>
            Color used by CRhinoGetPoint::DynamicDraw to draw the current point and
            the line from the base point to the current point.
            </summary>
        </member>
        <member name="M:Rhino.Input.Custom.GetPoint.SetBasePoint(Rhino.Geometry.Point3d,System.Boolean)">
            <summary>
            Set base point used by ortho snap, from snap, planar snap, etc.
            </summary>
            <param name="basePoint">
            </param>
            <param name="showDistanceInStatusBar">
            if true, then the distance from base_point to the current point will be in the
            status bar distance pane.
            </param>
            <example>
                <code source="examples\vbnet\ex_addline.vb" lang="vbnet" />
                <code source="examples\cs\ex_addline.cs" lang="cs" />
                <code source="examples\py\ex_addline.py" lang="py" />
            </example>
        </member>
        <member name="M:Rhino.Input.Custom.GetPoint.ConstrainDistanceFromBasePoint(System.Double)">
            <summary>
            Set distance constraint from base point
            </summary>
            <param name="distance">
            pass UnsetValue to clear this constraint. Pass 0.0 to disable the
            ability to set this constraint by typing a number during GetPoint.
            </param>
            <remarks>
            If the base point is set and the distance from base point constraint
            is &gt; 0, then the picked point is constrained to be this distance
            from the base point.
            </remarks>
        </member>
        <member name="M:Rhino.Input.Custom.GetPoint.DrawLineFromPoint(Rhino.Geometry.Point3d,System.Boolean)">
            <summary>
            Use DrawLineFromPoint() if you want a dynamic line drawn from a point to the point being picked.
            </summary>
            <param name="startPoint">
            The line is drawn from startPoint to the point being picked. If the base
            point has not been set, then it is set to startPoint.
            </param>
            <param name="showDistanceInStatusBar">
            if true, the distance from the basePoint to the point begin picked is shown in the status bar.
            </param>
            <remarks>
            Calling DrawLineFromPoint automatically enables drawing the line. Use
            EnableDrawLineFromPoint() to toggle the line drawing state.
            </remarks>
            <example>
                <code source="examples\vbnet\ex_addline.vb" lang="vbnet" />
                <code source="examples\cs\ex_addline.cs" lang="cs" />
                <code source="examples\py\ex_addline.py" lang="py" />
            </example>
        </member>
        <member name="M:Rhino.Input.Custom.GetPoint.EnableDrawLineFromPoint(System.Boolean)">
            <summary>
            Controls drawing of dynamic a line from the start point
            </summary>
            <param name="enable">
            if true, a dynamic line is drawn from the DrawLineFromPoint startPoint to the point being picked.
            </param>
        </member>
        <member name="M:Rhino.Input.Custom.GetPoint.PermitOrthoSnap(System.Boolean)">
            <summary>
            Controls availability of ortho snap. Default is true.
            </summary>
            <param name="permit">
            if true, then GetPoint pays attention to the Rhino "ortho snap" and "planar snap" settings
            reported by ModelAidSettings.Ortho and ModelAidSettings.Planar
            </param>
        </member>
        <member name="M:Rhino.Input.Custom.GetPoint.PermitFromOption(System.Boolean)">
            <summary>
            Control the availability of the built-in "From" option. By default, the "From" option is enabled.
            </summary>
            <param name="permit">
            if true, then the "From" option is automatically avaiable in GetPoint.
            </param>
            <remarks>
            The GetPoint "From" option is never visible on the command line and the user must
            type the complete option name to activate the "From" option. When the GetPoint "From"
            snap is enabled, the user set/change the base point during GetPoint by typing "From" and
            picking a point.
            A related option is the builit-in distance from base point constraint that is can be set
            before GetPoint is called by passing a value to GetPoint::ConstrainDistanceFromBasePoint
            or during GetPoint by entering a number.
            </remarks>
        </member>
        <member name="M:Rhino.Input.Custom.GetPoint.PermitConstraintOptions(System.Boolean)">
            <summary>
            Control the availability of the built-in linear, planar, curve, and surface
            constraint options like "Along", "AlongPerp", "AlongTan", "AlongParallel",
            "Between", "OnCrv", "OnSrf", ".x", ".y", ".z", ".xy", etc.
            </summary>
            <param name="permit">
            if true, then the built-in contraint options are automatically avaiable in GetPoint.
            </param>
            <remarks>
            By default, these built-in constraint options are availble unless an explicit
            constraint is added by calling one of the GetPoint::Constrain functions. Calling
            GetPoint::ClearConstraints automatically enables the built-in constraint options.
            The built-in constraint options are never visible on the command line and the
            user must type the complete option name to activate these options.
            </remarks>
        </member>
        <member name="M:Rhino.Input.Custom.GetPoint.PermitTabMode(System.Boolean)">
            <summary>
            Permit use of the tab key to define a line constraint.
            </summary>
            <param name="permit">if true, then the built-in tab key mode is available.</param>
            <remarks>By default, use of the tab key is supported.</remarks>
        </member>
        <member name="M:Rhino.Input.Custom.GetPoint.PermitElevatorMode(System.Int32)">
            <summary>
            Permit use of the control key to define a line constraint.
            </summary>
            <param name="permitMode">
            0: no elevator modes are permitted
            1: fixed plane elevator mode (like the Line command)
            2: cplane elevator mode (like object dragging)
            </param>
        </member>
        <member name="M:Rhino.Input.Custom.GetPoint.PermitObjectSnap(System.Boolean)">
            <summary>
            By default, object snaps like "end", "near", etc. are controled by the user.
            If you want to disable this ability, then call PermitObjectSnap(false).
            </summary>
            <param name="permit">true to permit snapping to objects.</param>
        </member>
        <member name="M:Rhino.Input.Custom.GetPoint.AddSnapPoint(Rhino.Geometry.Point3d)">
            <summary>
            Add a point to the list of osnap points
            </summary>
            <param name="point">
            </param>
            <returns>Total number of snap points</returns>
            <remarks>
            When point osnap is enabled, GetPoint will snap to points in the Rhino model.
            If you want the user to be able to snap to additional points, then use
            GetPoint::AddSnapPoints to specify the locations of these additional points.
            </remarks>
        </member>
        <member name="M:Rhino.Input.Custom.GetPoint.AddSnapPoints(Rhino.Geometry.Point3d[])">
            <summary>
            Add points to the list of osnap points
            </summary>
            <param name="points">
            </param>
            <returns>Total number of snap points</returns>
            <remarks>
            When point osnap is enabled, GetPoint will snap to points in the Rhino model.
            If you want the user to be able to snap to additional points, then use
            GetPoint::AddSnapPoints to specify the locations of these additional points.
            </remarks>
        </member>
        <member name="M:Rhino.Input.Custom.GetPoint.AddConstructionPoint(Rhino.Geometry.Point3d)">
            <summary>
            Add a point to the list of construction points
            </summary>
            <param name="point">
            </param>
            <returns>Total number of construction points</returns>
            <remarks>
            Construction points are like snap points except that they get snapped to even when
            point osnap is off.  Typically, there are only a few construction points while there
            can be many snap points. For example, when polylines are drawn the start point is a
            construction point and the other points are snap points.
            </remarks>
        </member>
        <member name="M:Rhino.Input.Custom.GetPoint.AddConstructionPoints(Rhino.Geometry.Point3d[])">
            <summary>
            Add points to the list of construction points
            </summary>
            <param name="points">
            </param>
            <returns>Total number of construction points</returns>
            <remarks>
            Construction points are like snap points except that they get snapped to even when
            point osnap is off.  Typically, there are only a few construction points while there
            can be many snap points. For example, when polylines are drawn the start point is a
            construction point and the other points are snap points.
            </remarks>
        </member>
        <member name="M:Rhino.Input.Custom.GetPoint.ClearSnapPoints">
            <summary>
            Remove all snap points.
            </summary>
            <remarks>
            When point osnap is enabled, GetPoint will snap to points in the Rhino model.
            If you want the user to be able to snap to additional points, then use GetPoint::AddSnapPoints
            tp specify the locations of these additional points.
            </remarks>
        </member>
        <member name="M:Rhino.Input.Custom.GetPoint.ClearConstructionPoints">
            <summary>
            Remove all construction points
            </summary>
            <remarks>
            Construction points are like snap points except that they get snapped to
            even when point osnap is off. Typically, there are only a few construction
            points while there can be many snap points. For example, when polylines
            are drawn the start point is a construction point and the other points are
            snap points.
            </remarks>
        </member>
        <member name="M:Rhino.Input.Custom.GetPoint.GetSnapPoints">
            <summary>
            Get current snap points.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:Rhino.Input.Custom.GetPoint.GetConstructionPoints">
            <summary>
            Get current construction points
            </summary>
            <returns>
            </returns>
            <remarks>
            Construction points are like snap points except that they get snapped to
            even when point osnap is off. Typically, there are only a few construction
            points while there can be many snap points. For example, when polylines
            are drawn the start point is a construction point and the other points are
            snap points.
            </remarks>
        </member>
        <member name="M:Rhino.Input.Custom.GetPoint.EnableCurveSnapTangentBar(System.Boolean,System.Boolean)">
            <summary>
            Controls display of the curve snap tangent bar icon
            </summary>
            <param name="drawTangentBarAtSnapPoint">
            true to draw a tangent bar icon whenever GetPoint snaps to a curve
            </param>
            <param name="drawEndPoints">
            true to draw points at the end of the tangent bar
            </param>
            <remarks>
            The tangent bar is drawn by GetPoint::DynamicDraw. If you override GetPoint::DynamicDraw,
            then you must call the base class function.
            </remarks>
        </member>
        <member name="M:Rhino.Input.Custom.GetPoint.EnableCurveSnapPerpBar(System.Boolean,System.Boolean)">
            <summary>
            Controls display of the curve snap perpendicular bar icon.
            </summary>
            <param name="drawPerpBarAtSnapPoint">
            true to draw a tangent bar icon  whenever GetPoint snaps to a curve
            </param>
            <param name="drawEndPoints">
            true to draw points at the end of the tangent bar
            </param>
        </member>
        <member name="M:Rhino.Input.Custom.GetPoint.EnableCurveSnapArrow(System.Boolean,System.Boolean)">
            <summary>
            Controls display of the curve snap arrow icon
            </summary>
            <param name="drawDirectionArrowAtSnapPoint">
            true to draw arrow icon whenever GetPoint snaps to a curve
            </param>
            <param name="reverseArrow">
            true if arrow icon direction should be the reverse of the first derivative direction
            </param>
            <remarks>
            The tangent bar is drawn by GetPoint::DynamicDraw. If you override GetPoint::DynamicDraw,
            then you must call the base class function.
            </remarks>
        </member>
        <member name="M:Rhino.Input.Custom.GetPoint.EnableSnapToCurves(System.Boolean)">
            <summary>
            If you want GetPoint() to try to snap to curves when the mouse is near a curve
            (like the center point in the Circle command when the AroundCurve option is on),
            then enable the snap to curves option.
            </summary>
            <param name="enable">
            </param>
        </member>
        <member name="M:Rhino.Input.Custom.GetPoint.Constrain(Rhino.Geometry.Point3d,Rhino.Geometry.Point3d)">
            <summary>constrain the picked point to lie on a line</summary>
            <param name="from">
            </param>
            <param name="to">
            </param>
            <returns>true if constraint could be applied</returns>
        </member>
        <member name="M:Rhino.Input.Custom.GetPoint.Constrain(Rhino.Geometry.Line)">
            <summary>constrain the picked point to lie on a line</summary>
            <param name="line">
            </param>
            <returns>true if constraint could be applied</returns>
        </member>
        <member name="M:Rhino.Input.Custom.GetPoint.Constrain(Rhino.Geometry.Arc)">
            <summary>constrain the picked point to lie on an arc</summary>
            <param name="arc">
            </param>
            <returns>true if constraint could be applied</returns>
        </member>
        <member name="M:Rhino.Input.Custom.GetPoint.Constrain(Rhino.Geometry.Circle)">
            <summary>constrain the picked point to lie on a circle</summary>
            <param name="circle">
            </param>
            <returns>true if constraint could be applied</returns>
        </member>
        <member name="M:Rhino.Input.Custom.GetPoint.Constrain(Rhino.Geometry.Plane,System.Boolean)">
            <summary>constrain the picked point to lie on a plane</summary>
            <param name="plane">
            </param>
            <param name="allowElevator">
            </param>
            <returns>true if constraint could be applied</returns>
        </member>
        <member name="M:Rhino.Input.Custom.GetPoint.Constrain(Rhino.Geometry.Sphere)">
            <summary>constrain the picked point to lie on a sphere</summary>
            <param name="sphere">
            </param>
            <returns>true if constraint could be applied</returns>
        </member>
        <member name="M:Rhino.Input.Custom.GetPoint.Constrain(Rhino.Geometry.Cylinder)">
            <summary>constrain the picked point to lie on a cylinder</summary>
            <param name="cylinder">
            </param>
            <returns>true if constraint could be applied</returns>
        </member>
        <member name="M:Rhino.Input.Custom.GetPoint.Constrain(Rhino.Geometry.Curve,System.Boolean)">
            <summary>constrain the picked point to lie on a curve</summary>
            <param name="curve">
            </param>
            <param name="allowPickingPointOffObject">
            defines whether the point pick is allowed to happen off object. When false,
            a "no no" cursor is shown when the cursor is not on the object. When true,
            a normal point picking cursor is used and the marker is visible also when
            the cursor is not on the object.
            </param>
            <returns>true if constraint could be applied</returns>
        </member>
        <member name="M:Rhino.Input.Custom.GetPoint.Constrain(Rhino.Geometry.Surface,System.Boolean)">
            <summary>constrain the picked point to lie on a surface</summary>
            <param name="surface">
            </param>
            <param name="allowPickingPointOffObject">
            defines whether the point pick is allowed to happen off object. When false,
            a "no no" cursor is shown when the cursor is not on the object. When true,
            a normal point picking cursor is used and the marker is visible also when
            the cursor is not on the object.
            </param>
            <returns>true if constraint could be applied</returns>
            <example>
                <code source="examples\vbnet\ex_orientonsrf.vb" lang="vbnet" />
                <code source="examples\cs\ex_orientonsrf.cs" lang="cs" />
                <code source="examples\py\ex_orientonsrf.py" lang="py" />
            </example>
        </member>
        <member name="M:Rhino.Input.Custom.GetPoint.Constrain(Rhino.Geometry.Brep,System.Int32,System.Int32,System.Boolean)">
            <summary>constrain the picked point to lie on a brep</summary>
            <param name="brep">
            </param>
            <param name="wireDensity">
            When wire_density&lt;0, isocurve intersection snapping is turned off, when wire_density&gt;=0, the value
            defines the isocurve density used for isocurve intersection snapping.
            </param>
            <param name="faceIndex">
            When face_index &lt;0, constrain to whole brep. When face_index &gt;=0, constrain to individual face.
            </param>
            <param name="allowPickingPointOffObject">
            defines whether the point pick is allowed to happen off object. When false,
            a "no no" cursor is shown when the cursor is not on the object. When true,
            a normal point picking cursor is used and the marker is visible also when
            the cursor is not on the object.
            </param>
            <returns>true if constraint could be applied</returns>
        </member>
        <member name="M:Rhino.Input.Custom.GetPoint.ConstrainToConstructionPlane(System.Boolean)">
            <summary>
            If enabled, the picked point is constrained to be on the active construction plane.
            If the base point is set, then the point is constrained to be on the plane that contains
            the base point and is parallel to the active construction plane. By default this
            constraint is enabled.
            </summary>
            <param name="throughBasePoint">
            </param>
            <returns>
            if true and the base point is set, then the point is constrained to be on the plane parallel
            to the construction plane that passes through the base point, even when planar mode is off.
            If throughBasePoint is false, then the base point shift only happens if planar mode is on.
            </returns>
            <example>
                <code source="examples\vbnet\ex_addbackgroundbitmap.vb" lang="vbnet" />
                <code source="examples\cs\ex_addbackgroundbitmap.cs" lang="cs" />
                <code source="examples\py\ex_addbackgroundbitmap.py" lang="py" />
            </example>
        </member>
        <member name="M:Rhino.Input.Custom.GetPoint.ConstrainToTargetPlane">
            <summary>
            Constrain point to lie on a plane that is parallel to the
            viewing plane and passes through the view's target point.
            </summary>
        </member>
        <member name="M:Rhino.Input.Custom.GetPoint.ClearConstraints">
            <summary>
            Remove any explicit constraints added by calls to GetPoint::Constraint() and enable
            the built-in constraint options.
            </summary>
        </member>
        <member name="M:Rhino.Input.Custom.GetPoint.InterruptMouseMove">
            <summary>
            If you have lengthy computations in OnMouseMove() and/or DymanicDraw()
            overrides, then periodically call InterruptMouseMove() to see if you
            should interrupt your work because the mouse has moved again.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:Rhino.Input.Custom.GetPoint.Get(System.Boolean)">
            <summary>
            After setting up options and so on, call GetPoint::Get to get a 3d point
            </summary>
            <param name="onMouseUp">
            If false, the point is returned when the left mouse button goes down.
            If true, the point is returned when the left mouse button goes up.
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Rhino.Input.Custom.GetPoint.Get">
            <summary>
            After setting up options and so on, call GetPoint::Get to get a 3d point
            </summary>
            <example>
                <code source="examples\vbnet\ex_addline.vb" lang="vbnet" />
                <code source="examples\cs\ex_addline.cs" lang="cs" />
                <code source="examples\py\ex_addline.py" lang="py" />
            </example>
        </member>
        <member name="M:Rhino.Input.Custom.GetPoint.PointOnObject">
            <summary>
            Call this function to see if the point was on an object. If the point was
            on an object an ObjRef is returned; otherwise null is returned
            </summary>
            <returns>
            </returns>
        </member>
        <member name="T:Rhino.Collections.ArchivableDictionary">
            <summary>
            Dictionary Structure
            BEGINCHUNK (TCODE_ANONYMOUS_CHUNK)
            |- version (int)
            |- entry count (int)
            for entry count entries
            |- BEGINCHUNK (TCODE_ANONYMOUS_CHUNK)
            |- type (OnBinaryArchiveDictionary::ItemType)
            |- key (string)
            |- entry contents
            |- ENDCHUNK (TCODE_ANONYMOUS_CHUNK)
            ENDCHUNK (TCODE_ANONYMOUS_CHUNK)
            </summary>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.#ctor">
            <summary>Create an instance of a dictionary for writing to a 3dm archive</summary>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.#ctor(System.Int32)">
            <summary>Create an instance of a dictionary for writing to a 3dm archive</summary>
            <param name="version">
            Custom version used to help the plug-in developer determine which version of
            a dictionary is being written. One good way to write version information is to
            use a date style integer (YYYYMMDD)
            </param>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.#ctor(System.Int32,System.String)">
            <summary>Create an instance of a dictionary for writing to a 3dm archive</summary>
            <param name="version">
            custom version used to help the plug-in developer determine which version of
            a dictionary is being written. One good way to write version information is to
            use a date style integer (YYYYMMDD)
            </param>
            <param name="name">
            Optional name to associate with this dictionary.
            NOTE: if this dictionary is set as a subdictionary, the name will be changed to
            the subdictionary key entry
            </param>
        </member>
        <member name="P:Rhino.Collections.ArchivableDictionary.Keys">
            <summary>Entry names</summary>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.Read(Rhino.FileIO.BinaryArchiveReader)">
            <summary>Read a dictionary from an archive.</summary>
            <param name="archive">
            The archive to read from. The archive position should be at the beginning of
            the dictionary
            </param>
            <returns>new filled dictionary on success. null on failure</returns>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.Write(Rhino.FileIO.BinaryArchiveWriter)">
            <summary>
            Write this dictionary to an archive
            </summary>
            <param name="archive">The archive to write to</param>
            <returns>true on success</returns>
        </member>
        <member name="T:Rhino.FileIO.BinaryArchiveException">
            <summary>
            Thrown by BinaryArchiveReader and BinaryArchiveWriter classes when
            an IO error has occured
            </summary>
        </member>
        <member name="P:Rhino.FileIO.BinaryArchiveWriter.Archive3dmVersion">
            <summary>
            If a 3dm archive is being read or written, then this is the
            version of the 3dm archive format (1, 2, 3, 4 or 5).
            0     a 3dm archive is not being read/written
            1     a version 1 3dm archive is being read/written
            2     a version 2 3dm archive is being read/written
            3     a version 3 3dm archive is being read/written
            4     a version 4 3dm archive is being read/written
            5     an old version 5 3dm archive is being read
            50    a version 5 3dm archive is being read/written
            </summary>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveWriter.Write3dmChunkVersion(System.Int32,System.Int32)">
            <summary>
            A chunk version is a single byte that encodes a major.minor
            version number.  Useful when creating I/O code for 3dm chunks
            that may change in the future.  Increment the minor version
            number if new information is added to the end of the chunk.
            Increment the major version if the format of the chunk changes
            in some other way.
            </summary>
            <param name="major">0 to 15</param>
            <param name="minor">0 to 16</param>
            <returns>true on successful read</returns>
        </member>
        <member name="P:Rhino.FileIO.BinaryArchiveReader.Archive3dmVersion">
            <summary>
            If a 3dm archive is being read or written, then this is the
            version of the 3dm archive format (1, 2, 3, 4 or 5).
            0     a 3dm archive is not being read/written
            1     a version 1 3dm archive is being read/written
            2     a version 2 3dm archive is being read/written
            3     a version 3 3dm archive is being read/written
            4     a version 4 3dm archive is being read/written
            5     an old version 5 3dm archive is being read
            50    a version 5 3dm archive is being read/written
            </summary>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveReader.Read3dmChunkVersion(System.Int32@,System.Int32@)">
            <summary>
            A chunk version is a single byte that encodes a major.minor
            version number.  Useful when creating I/O code for 3dm chunks
            that may change in the future.  Increment the minor version
            number if new information is added to the end of the chunk.
            Increment the major version if the format of the chunk changes
            in some other way.
            </summary>
            <param name="major">0 to 15</param>
            <param name="minor">0 to 16</param>
            <returns>true on successful read</returns>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveReader.BeginReadDictionaryEntry(System.Int32@,System.String@)">
            <summary>
            </summary>
            <param name="entryType">
            </param>
            <param name="entryName">
            </param>
            <returns>
            0: serious IO error
            1: success
            read information and then call EndReadDictionaryEntry()
            2: at end of dictionary
            </returns>
        </member>
        <member name="T:Rhino.Input.GetBoxMode">
            <summary>
            Enumerates all Box getter modes.
            </summary>
        </member>
        <member name="F:Rhino.Input.GetBoxMode.All">
            <summary>
            All modes are allowed.
            </summary>
        </member>
        <member name="F:Rhino.Input.GetBoxMode.Corner">
            <summary>
            The base rectangle is created by picking the two corner points.
            </summary>
        </member>
        <member name="F:Rhino.Input.GetBoxMode.ThreePoint">
            <summary>
            The base rectangle is created by picking three points.
            </summary>
        </member>
        <member name="F:Rhino.Input.GetBoxMode.Vertical">
            <summary>
            The base vertical rectangle is created by picking three points.
            </summary>
        </member>
        <member name="F:Rhino.Input.GetBoxMode.Center">
            <summary>
            The base rectangle is created by picking a center point and a corner point.
            </summary>
        </member>
        <member name="T:Rhino.Input.RhinoGet">
            <summary>
            Base class for GetObject, GetPoint, GetSphere, etc.
            You will never directly create a RhinoGet but you will use its member
            functions after calling GetObject::GetObjects(), GetPoint::GetPoint(), and so on.
            Provides tools to set command prompt, set command options, and specify
            if the "get" can optionally accept numbers, nothing (pressing enter),
            and undo.
            </summary>
        </member>
        <member name="M:Rhino.Input.RhinoGet.InGet(Rhino.RhinoDoc)">
            <summary>
            Returns true if the document is current in a "Get" operation.
            </summary>
            <returns>True if a getter is currently active.</returns>
        </member>
        <member name="M:Rhino.Input.RhinoGet.GetPoint(System.String,System.Boolean,Rhino.Geometry.Point3d@)">
            <summary>
            Get a point coordinate from the document.
            </summary>
            <param name="prompt">Prompt to display in command line during the operation.</param>
            <param name="acceptNothing">if true, the user can press enter</param>
            <param name="point">point value returned here</param>
            <returns>
            Commands.Result.Success - got point
            Commands.Result.Nothing - user pressed enter
            Commands.Result.Cancel - user cancel point getting
            </returns>
            <remarks>
            If you need options or more advanced user interface, then use GetPoint class.
            </remarks>
            <example>
                <code source="examples\vbnet\ex_addnamedview.vb" lang="vbnet" />
                <code source="examples\cs\ex_addnamedview.cs" lang="cs" />
                <code source="examples\py\ex_addnamedview.py" lang="py" />
            </example>
        </member>
        <member name="M:Rhino.Input.RhinoGet.GetPointOnMesh(System.Guid,System.String,System.Boolean,Rhino.Geometry.Point3d@)">
            <summary>
            Get a point constrained to an existing mesh in the document
            </summary>
            <param name="meshObjectId">
            </param>
            <param name="prompt">
            </param>
            <param name="acceptNothing">
            </param>
            <param name="point">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Rhino.Input.RhinoGet.GetPointOnMesh(Rhino.DocObjects.MeshObject,System.String,System.Boolean,Rhino.Geometry.Point3d@)">
            <summary>
            Get a point constrained to an existing mesh in the document
            </summary>
            <param name="meshObject">
            </param>
            <param name="prompt">
            </param>
            <param name="acceptNothing">
            </param>
            <param name="point">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Rhino.Input.RhinoGet.GetColor(System.String,System.Boolean,System.Drawing.Color@)">
            <summary>Easy to use color getter</summary>
            <param name="prompt">command prompt</param>
            <param name="acceptNothing">if true, the user can press enter</param>
            <param name="color">color value returned here. also used as default color</param>
            <returns>
            Commands.Result.Success - got color
            Commands.Result.Nothing - user pressed enter
            Commands.Result.Cancel - user cancel color getting
            </returns>
            <remarks>
            If you need options or more advanced user interface, then use GetColor class.
            </remarks>
        </member>
        <member name="M:Rhino.Input.RhinoGet.GetOneObject(System.String,System.Boolean,Rhino.DocObjects.ObjectType,Rhino.DocObjects.ObjRef@)">
            <summary>Easy to use object getter</summary>
            <param name="prompt">command prompt</param>
            <param name="acceptNothing">if true, the user can press enter</param>
            <param name="filter">geometry filter to use when getting objects</param>
            <param name="rhObject">result of the get. may be null</param>
            <returns>
            Commands.Result.Success - got object
            Commands.Result.Nothing - user pressed enter
            Commands.Result.Cancel - user cancel object getting
            </returns>
            <remarks>
            If you need options or more advanced user interface, then use GetObject class.
            </remarks>
            <example>
                <code source="examples\vbnet\ex_dividebylength.vb" lang="vbnet" />
                <code source="examples\cs\ex_dividebylength.cs" lang="cs" />
                <code source="examples\py\ex_dividebylength.py" lang="py" />
            </example>
        </member>
        <member name="M:Rhino.Input.RhinoGet.GetMultipleObjects(System.String,System.Boolean,Rhino.DocObjects.ObjectType,Rhino.DocObjects.ObjRef[]@)">
            <summary>Easy to use object getter for getting multiple objects</summary>
            <param name="prompt">command prompt</param>
            <param name="acceptNothing">if true, the user can press enter</param>
            <param name="filter">geometry filter to use when getting objects</param>
            <param name="rhObjects">result of the get. may be null</param>
            <returns>
            Commands.Result.Success - got object
            Commands.Result.Nothing - user pressed enter
            Commands.Result.Cancel - user cancel object getting
            </returns>
            <remarks>
            If you need options or more advanced user interface, then use GetObject class.
            </remarks>
        </member>
        <member name="M:Rhino.Input.RhinoGet.GetString(System.String,System.Boolean,System.String@)">
            <summary>Easy to use string getter</summary>
            <param name="prompt">command prompt</param>
            <param name="acceptNothing">if true, the user can press enter</param>
            <param name="outputString">default string set to this value and string value returned here</param>
            <returns>
            Commands.Result.Success - got string
            Commands.Result.Nothing - user pressed enter
            Commands.Result.Cancel - user cancel string getting
            </returns>
            <remarks>
            If you need options or more advanced user interface, then use GetString class.
            </remarks>
            <example>
                <code source="examples\vbnet\ex_addnamedview.vb" lang="vbnet" />
                <code source="examples\cs\ex_addnamedview.cs" lang="cs" />
                <code source="examples\py\ex_addnamedview.py" lang="py" />
            </example>
        </member>
        <member name="M:Rhino.Input.RhinoGet.GetNumber(System.String,System.Boolean,System.Double@,System.Double,System.Double)">
            <summary>
            Easy to use number getter.
            </summary>
            <param name="prompt">command prompt</param>
            <param name="acceptNothing">if true, the user can press enter</param>
            <param name="outputNumber">
            default number is set to this value and number value returned here
            </param>
            <param name="lowerLimit">
            </param>
            <param name="upperLimit">
            </param>
            <returns>
            Commands.Result.Success - got number
            Commands.Result.Nothing - user pressed enter
            Commands.Result.Cancel - user cancel number getting
            </returns>
            <example>
                <code source="examples\vbnet\ex_dividebylength.vb" lang="vbnet" />
                <code source="examples\cs\ex_dividebylength.cs" lang="cs" />
                <code source="examples\py\ex_dividebylength.py" lang="py" />
            </example>
        </member>
        <member name="M:Rhino.Input.RhinoGet.GetNumber(System.String,System.Boolean,System.Double@)">
            <summary>
            Easy to use number getter.
            </summary>
            <param name="prompt">command prompt</param>
            <param name="acceptNothing">if true, the user can press enter</param>
            <param name="outputNumber">
            default number is set to this value and number value returned here
            </param>
            <returns>
            Commands.Result.Success - got number
            Commands.Result.Nothing - user pressed enter
            Commands.Result.Cancel - user cancel number getting
            </returns>
            <example>
                <code source="examples\vbnet\ex_dividebylength.vb" lang="vbnet" />
                <code source="examples\cs\ex_dividebylength.cs" lang="cs" />
                <code source="examples\py\ex_dividebylength.py" lang="py" />
            </example>
        </member>
        <member name="M:Rhino.Input.RhinoGet.GetInteger(System.String,System.Boolean,System.Int32@)">
            <summary>
            Easy to use number getter.
            </summary>
            <param name="prompt">command prompt</param>
            <param name="acceptNothing">if true, the user can press enter</param>
            <param name="outputNumber">
            default number is set to this value and number value returned here
            </param>
            <returns>
            Commands.Result.Success - got number
            Commands.Result.Nothing - user pressed enter
            Commands.Result.Cancel - user cancel number getting
            </returns>
        </member>
        <member name="M:Rhino.Input.RhinoGet.GetInteger(System.String,System.Boolean,System.Int32@,System.Int32,System.Int32)">
            <summary>
            Easy to use number getter.
            </summary>
            <param name="prompt">command prompt</param>
            <param name="acceptNothing">if true, the user can press enter</param>
            <param name="outputNumber">
            default number is set to this value and number value returned here
            </param>
            <param name="lowerLimit">
            </param>
            <param name="upperLimit">
            </param>
            <returns>
            Commands.Result.Success - got number
            Commands.Result.Nothing - user pressed enter
            Commands.Result.Cancel - user cancel number getting
            </returns>
        </member>
        <member name="M:Rhino.Input.RhinoGet.GetPlane(Rhino.Geometry.Plane@)">
            <summary>
            Gets an oriented infinite plane
            </summary>
            <param name="plane">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Rhino.Input.RhinoGet.GetRectangle(Rhino.Geometry.Point3d[]@)">
            <summary>
            Get a 3d rectangle
            </summary>
            <param name="corners">corners of the rectangle in counter-clockwise order</param>
            <returns>Commands.Result.Success if successful</returns>
            <example>
                <code source="examples\vbnet\ex_addclippingplane.vb" lang="vbnet" />
                <code source="examples\cs\ex_addclippingplane.cs" lang="cs" />
                <code source="examples\py\ex_addclippingplane.py" lang="py" />
            </example>
        </member>
        <member name="M:Rhino.Input.RhinoGet.GetRectangle(Rhino.Input.GetBoxMode,Rhino.Geometry.Point3d,System.Collections.Generic.IEnumerable{System.String},Rhino.Geometry.Point3d[]@)">
            <summary>
            Get a 3d rectangle
            </summary>
            <param name="mode">
            </param>
            <param name="firstPoint">first corner used. Pass Point3d.Unset if you do not want to set this</param>
            <param name="prompts">optional prompts to display while getting points. May be null</param>
            <param name="corners">corners of the rectangle in counter-clockwise order</param>
            <returns>Commands.Result.Success if successful</returns>
        </member>
        <member name="M:Rhino.Input.RhinoGet.Get2dRectangle(System.Boolean,System.Drawing.Rectangle@,Rhino.Display.RhinoView@)">
            <summary>
            Get a rectangle in view window coordinates
            </summary>
            <param name="solidPen">
            If true, a solid pen is used for drawing while the user selects a rectangle.
            If false, a dotted pen is used for drawing while the user selects a rectangle
            </param>
            <param name="rectangle">
            user selected rectangle in window coordinates
            </param>
            <param name="rectView">
            view that the user selected the window in
            </param>
            <returns>Success or Cancel</returns>
        </member>
        <member name="M:Rhino.Input.RhinoGet.GetBox(Rhino.Geometry.Box@)">
            <summary>
            Asks the user to select a Box in the viewport.
            </summary>
            <param name="box">If the result is Success, this parameter will be filled out.</param>
            <returns>
            </returns>
        </member>
        <member name="M:Rhino.Input.RhinoGet.GetBox(Rhino.Geometry.Box@,Rhino.Input.GetBoxMode,Rhino.Geometry.Point3d,System.String,System.String,System.String)">
            <summary>
            Asks the user to select a Box in the viewport.
            </summary>
            <param name="box">If the result is Success, this parameter will be filled out.</param>
            <param name="mode">
            </param>
            <param name="basePoint">Optional base point. Supply Point3d.Unset if you don't want to use this</param>
            <param name="prompt1">Optional first prompt. Supply a null to use the default prompt.</param>
            <param name="prompt2">Optional second prompt. Supply a null to use the default prompt.</param>
            <param name="prompt3">Optional third prompt. Supply a null to use the default prompt.</param>
            <returns>
            </returns>
        </member>
        <member name="M:Rhino.Input.RhinoGet.GetLinearDimension(Rhino.Geometry.LinearDimension@)">
            <example>
                <code source="examples\vbnet\ex_addlineardimension.vb" lang="vbnet" />
                <code source="examples\cs\ex_addlineardimension.cs" lang="cs" />
                <code source="examples\py\ex_addlineardimension.py" lang="py" />
            </example>
        </member>
        <member name="M:Rhino.Input.RhinoGet.GetView(System.String,Rhino.Display.RhinoView@)">
            <summary>
            Allow the user to interactively pick a viewport
            </summary>
            <param name="command_prompt">
            </param>
            <param name="view">
            </param>
            <returns>
            </returns>
            <example>
                <code source="examples\vbnet\ex_addnamedview.vb" lang="vbnet" />
                <code source="examples\cs\ex_addnamedview.cs" lang="cs" />
                <code source="examples\py\ex_addnamedview.py" lang="py" />
            </example>
        </member>
        <member name="T:Rhino.Input.GetResult">
            <summary>
            Possible results from GetObject.Input(), GetPoint.Input(), etc...
            </summary>
        </member>
        <member name="F:Rhino.Input.GetResult.Cancel">
            <summary>User wants to cancel current command.</summary>
        </member>
        <member name="F:Rhino.Input.GetResult.Nothing">
            <summary>User pressed enter - typically used to accept defaults.</summary>
        </member>
        <member name="F:Rhino.Input.GetResult.Option">
            <summary>User specified an option - call Option() to get option index.</summary>
        </member>
        <member name="F:Rhino.Input.GetResult.Number">
            <summary>User entered a real number - call Number() to get value.</summary>
        </member>
        <member name="F:Rhino.Input.GetResult.Color">
            <summary>User entered a color - call Color() to get value.</summary>
        </member>
        <member name="F:Rhino.Input.GetResult.Undo">
            <summary>User pressed undo.</summary>
        </member>
        <member name="F:Rhino.Input.GetResult.Miss">
            <summary>User clicked and missed.</summary>
        </member>
        <member name="F:Rhino.Input.GetResult.Point">
            <summary>User picked 3d point - call Point() to get 3d point.</summary>
        </member>
        <member name="F:Rhino.Input.GetResult.Point2d">
            <summary>
            User picked 2d window point in CRhinoGetPoint::Get2dPoint()
            call ON_2dPoint() to get the point and View() to get the view.
            </summary>
        </member>
        <member name="F:Rhino.Input.GetResult.Line2d">
            <summary>
            User picked a 2d line in CRhinoGetPoint::Get2dLine() call Line2d()
            to get the line and View() to get the view.
            </summary>
        </member>
        <member name="F:Rhino.Input.GetResult.Rectangle2d">
            <summary>
            User picked a 2d rectangle in CRhinoGetPoint::Get2dRectangle() call
            Rectangle2d() to get the rectangle and View() to get the view.
            </summary>
        </member>
        <member name="F:Rhino.Input.GetResult.Object">
            <summary>User selected an object - call Object() to get object.</summary>
        </member>
        <member name="F:Rhino.Input.GetResult.String">
            <summary>User typed a string - call String() to get the string.</summary>
        </member>
        <member name="F:Rhino.Input.GetResult.WindowsMessage">
            <summary>
            Windows posted a message id that was in the list passed to
            RhinoGet::AcceptWindowsMessage(). Call CRhinoGet::WndMsg() to get the message.
            </summary>
        </member>
        <member name="F:Rhino.Input.GetResult.Timeout">
            <summary>
            The getter waited for the amount of time specifed in RhinoGet::SetWaitDuration()
            and then gave up.
            </summary>
        </member>
        <member name="F:Rhino.Input.GetResult.Circle">
            <summary>call CRhinoGetCircle::GetCircle() to get the circle.</summary>
        </member>
        <member name="F:Rhino.Input.GetResult.Plane">
            <summary>call CRhinoGetPlane::GetPlane() to get the plane.</summary>
        </member>
        <member name="F:Rhino.Input.GetResult.Cylinder">
            <summary>call CRhinoGetCylinder::GetCylinder() to get the cylinder.</summary>
        </member>
        <member name="F:Rhino.Input.GetResult.Sphere">
            <summary>call CRhinoGetSphere::GetSphere() to get the sphere.</summary>
        </member>
        <member name="F:Rhino.Input.GetResult.Angle">
            <summary>call CRhinoGetAngle::Angle() to get the angle in radians (CRhinoGetAngle() returns this for typed number, too).</summary>
        </member>
        <member name="F:Rhino.Input.GetResult.Distance">
            <summary>call CRhinoGetDistance::Distance() to get the distance value.</summary>
        </member>
        <member name="F:Rhino.Input.GetResult.Direction">
            <summary>call CRhinoGetDirection::Direction() to get the direction vector.</summary>
        </member>
        <member name="F:Rhino.Input.GetResult.Frame">
            <summary>call CRhinoGetFrame::Frame() to get the frame that was picked.</summary>
        </member>
        <member name="F:Rhino.Input.GetResult.ExitRhino">
            <summary>Stop now, do not cleaup, just return ASAP.</summary>
        </member>
        <member name="T:Rhino.Input.Custom.GetBaseClass">
            <summary>
            Base class for GetObject, GetPoint, GetSphere, etc.
            You will never directly create a GetBaseClass but you will use its member
            functions after calling GetObject.Gets(), GetPoint.Get(), and so on.
            Provides tools to set command prompt, set command options, and specify
            if the "get" can optionally accept numbers, nothing (pressing enter),
            and undo.
            </summary>
        </member>
        <member name="M:Rhino.Input.Custom.GetBaseClass.SetCommandPrompt(System.String)">
            <summary>
            Set prompt message that appears in the command prompt window.
            </summary>
            <param name="prompt">command prompt message</param>
            <example>
                <code source="examples\vbnet\ex_addline.vb" lang="vbnet" />
                <code source="examples\cs\ex_addline.cs" lang="cs" />
                <code source="examples\py\ex_addline.py" lang="py" />
            </example>
        </member>
        <member name="M:Rhino.Input.Custom.GetBaseClass.SetCommandPromptDefault(System.String)">
            <summary>
            Set message that describes what default value will be used if the user presses enter.
            This description appears in angle brackets &lt;&gt; in the command prompt window. You do
            not need to provide a default value description unless you explicity enable AcceptNothing.
            </summary>
            <param name="defaultValue">description of default value</param>
            <example>
            ON_3dPoint default_center = new ON_3dPoint(2,3,4);
            GetPoint gp = new GetPoint();
            gp.SetCommandPrompt( "Center point" );
            gp.SetCommandPromptDefault( "(2,3,4)" );
            gp.AcceptNothing(true);
            gp.GetPoint();
            if ( gp.Result() == GetResult.Nothing )
            point = default_center;
            </example>
            <remarks>
            If you have a simple default point, number, or string, it is easier to use SetDefaultPoint,
            SetDefaultNumber, or SetDefaultString. SetCommandPromptDefault and AcceptNothing can be used
            for providing more advanced UI behavior.
            </remarks>
        </member>
        <member name="M:Rhino.Input.Custom.GetBaseClass.SetDefaultPoint(Rhino.Geometry.Point3d)">
            <summary>
            Set a point as default value that will be returned if the user presses the ENTER key during the get.
            </summary>
            <param name="point">value for default point</param>
            <remarks>
            Calling SetDefaultPoint will automatically handle setting the command prompt default and reacting to
            the user pressing ENTER.  If the user presses enter to accept the default point, GetResult.Point is
            returned and RhinoGet.GotDefault() will return true. Calling SetDefaultPoint will clear any previous
            calls to SetDefaultString or SetDefaultNumber.
            </remarks>
        </member>
        <member name="M:Rhino.Input.Custom.GetBaseClass.SetDefaultNumber(System.Double)">
            <summary>
            Set a number as default value that will be returned if the user presses ENTER key during the get.
            </summary>
            <param name="defaultNumber">value for default number</param>
            <remarks>
            Calling SetDefaultNumber will automatically handle setting the command prompt default and
            reacting to the user pressing ENTER. If the user presses ENTER to accept the default number,
            GetResult.Number is returned and RhinoGet.GotDefault() will return true. Calling
            SetDefaultNumber will clear any previous calls to SetDefaultString or SetDefaultPoint.
            </remarks>
        </member>
        <member name="M:Rhino.Input.Custom.GetBaseClass.SetDefaultInteger(System.Int32)">
            <summary>
            Set a number as default value that will be returned if the user presses ENTER key during the get.
            </summary>
            <param name="defaultValue">value for default number</param>
            <remarks>
            Calling SetDefaultInteger will automatically handle setting the command prompt default and
            reacting to the user pressing ENTER. If the user presses ENTER to accept the default integer,
            GetResult.Number is returned and CRhinoGet.GotDefault() will return true. Calling
            SetDefaultNumber will clear any previous calls to SetDefaultString or SetDefaultPoint.
            </remarks>
        </member>
        <member name="M:Rhino.Input.Custom.GetBaseClass.SetDefaultString(System.String)">
            <summary>
            Set a string as default value that will be returned
            if the user presses ENTER key during the get.
            </summary>
            <param name="defaultValue">value for default string</param>
            <remarks>
            Calling SetDefaultString will automatically handle setting the command prompt
            default and reacting to the user pressing ENTER. If the user presses ENTER to
            accept the default string, GetResult.String is returned and RhinoGet.GotDefault()
            will return true. Calling SetDefaultString will clear any previous calls to
            SetDefaultNumber or SetDefaultPoint.
            </remarks>
            <example>
                <code source="examples\vbnet\ex_addlayer.vb" lang="vbnet" />
                <code source="examples\cs\ex_addlayer.cs" lang="cs" />
                <code source="examples\py\ex_addlayer.py" lang="py" />
            </example>
        </member>
        <member name="M:Rhino.Input.Custom.GetBaseClass.SetDefaultColor(System.Drawing.Color)">
            <summary>
            Set a color as default value that will be returned if the user presses ENTER key during the get.
            </summary>
            <param name="defaultColor">value for default color</param>
            <remarks>
            Calling SetDefaultColor will automatically handle setting the command prompt default and
            reacting to the user pressing ENTER.  If the user presses ENTER to accept the default color,
            GetResult.Color is returned and RhinoGet.GotDefault() will return true. Calling
            SetDefaultColor will clear any previous calls to SetDefaultString or SetDefaultPoint.
            </remarks>
        </member>
        <member name="M:Rhino.Input.Custom.GetBaseClass.SetWaitDuration(System.Int32)">
            <summary>
            Set the wait duration (in milliseconds) of the getter. If the duration passes without
            the user making a decision, the GetResult.Timeout code is returned.
            </summary>
            <param name="milliseconds">Number of milliseconds to wait.</param>
        </member>
        <member name="M:Rhino.Input.Custom.GetBaseClass.ClearDefault">
            <summary>
            Clears any defaults set using SetDefaultPoint, SetDefaultNumber, SetDefaultString, or SetCommandPromptDefault
            </summary>
        </member>
        <member name="M:Rhino.Input.Custom.GetBaseClass.GotDefault">
            <summary>
            returns true if user pressed ENTER to accept a default point, number,
            or string set using SetDefaultPoint, SetDefaultNumber, or SetDefaultString.
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:Rhino.Input.Custom.GetBaseClass.AddOption(System.String)">
            <summary>
            Add a command line option
            </summary>
            <param name="englishOption">
            Must only consist of letters and numbers (no characters list periods, spaces, or dashes)
            </param>
            <returns>
            option index value (&gt;0) or 0 if option cannot be added
            </returns>
            <example>
                <code source="examples\vbnet\ex_advanceddisplay.vb" lang="vbnet" />
                <code source="examples\cs\ex_advanceddisplay.cs" lang="cs" />
                <code source="examples\py\ex_advanceddisplay.py" lang="py" />
            </example>
        </member>
        <member name="M:Rhino.Input.Custom.GetBaseClass.AddOption(System.String,System.String)">
            <summary>
            Add a command line option
            </summary>
            <param name="englishOption">
            Must only consist of letters and numbers (no characters list periods, spaces, or dashes)
            </param>
            <param name="englishOptionValue">
            </param>
            <returns>
            option index value (&gt;0) or 0 if option cannot be added
            </returns>
        </member>
        <member name="M:Rhino.Input.Custom.GetBaseClass.AddOptionDouble(System.String,Rhino.Input.Custom.OptionDouble@,System.String)">
            <summary>
            Add a command line option to get numbers and automatically save the value
            </summary>
            <param name="englishName">
            Must only consist of letters and numbers (no characters list periods, spaces, or dashes)
            </param>
            <param name="numberValue">
            </param>
            <param name="prompt">
            option prompt shown if the user selects this option.  If null or empty, then the
            option name is used as the get number prompt.
            </param>
            <returns>
            option index value (&gt;0) or 0 if option cannot be added
            </returns>
        </member>
        <member name="M:Rhino.Input.Custom.GetBaseClass.AddOptionDouble(System.String,Rhino.Input.Custom.OptionDouble@)">
            <summary>
            Add a command line option to get numbers and automatically save the value
            </summary>
            <param name="englishName">
            Must only consist of letters and numbers (no characters list periods, spaces, or dashes)
            </param>
            <param name="numberValue">
            </param>
            <returns>
            option index value (&gt;0) or 0 if option cannot be added
            </returns>
            <example>
                <code source="examples\vbnet\ex_commandlineoptions.vb" lang="vbnet" />
                <code source="examples\cs\ex_commandlineoptions.cs" lang="cs" />
                <code source="examples\py\ex_commandlineoptions.py" lang="py" />
            </example>
        </member>
        <member name="M:Rhino.Input.Custom.GetBaseClass.AddOptionInteger(System.String,Rhino.Input.Custom.OptionInteger@,System.String)">
            <summary>
            Add a command line option to get integers and automatically save the value
            </summary>
            <param name="englishName">
            Must only consist of letters and numbers (no characters list periods, spaces, or dashes)
            </param>
            <param name="intValue">
            </param>
            <param name="prompt">
            option prompt shown if the user selects this option.  If null or empty, then the
            option name is used as the get number prompt.
            </param>
            <returns>
            option index value (&gt;0) or 0 if option cannot be added
            </returns>
        </member>
        <member name="M:Rhino.Input.Custom.GetBaseClass.AddOptionInteger(System.String,Rhino.Input.Custom.OptionInteger@)">
            <summary>
            Add a command line option to get integers and automatically save the value
            </summary>
            <param name="englishName">
            Must only consist of letters and numbers (no characters list periods, spaces, or dashes)
            </param>
            <param name="intValue">
            </param>
            <returns>
            option index value (&gt;0) or 0 if option cannot be added
            </returns>
            <example>
                <code source="examples\vbnet\ex_commandlineoptions.vb" lang="vbnet" />
                <code source="examples\cs\ex_commandlineoptions.cs" lang="cs" />
                <code source="examples\py\ex_commandlineoptions.py" lang="py" />
            </example>
        </member>
        <member name="M:Rhino.Input.Custom.GetBaseClass.AddOptionToggle(System.String,Rhino.Input.Custom.OptionToggle@)">
            <summary>
            Add a command line option to toggle a setting
            </summary>
            <param name="englishName">
            Must only consist of letters and numbers (no characters list periods, spaces, or dashes)
            </param>
            <param name="toggleValue">
            </param>
            <returns>option index value (&gt;0) or 0 if option cannot be added</returns>
            <example>
                <code source="examples\vbnet\ex_commandlineoptions.vb" lang="vbnet" />
                <code source="examples\cs\ex_commandlineoptions.cs" lang="cs" />
                <code source="examples\py\ex_commandlineoptions.py" lang="py" />
            </example>
        </member>
        <member name="M:Rhino.Input.Custom.GetBaseClass.AddOptionList(System.String,System.Collections.Generic.IEnumerable{System.String},System.Int32)">
            <summary>
            Add a command line list option
            </summary>
            <param name="englishOptionName">
            Must only consist of letters and numbers (no characters list periods, spaces, or dashes)
            </param>
            <param name="listValues">
            </param>
            <param name="listCurrentIndex">zero based index of current option</param>
            <returns>option index value (&gt;0) or 0 if option cannot be added.</returns>
        </member>
        <member name="M:Rhino.Input.Custom.GetBaseClass.ClearCommandOptions">
            <summary>Clear all command options</summary>
        </member>
        <member name="M:Rhino.Input.Custom.GetBaseClass.EnableTransparentCommands(System.Boolean)">
            <summary>
            Control the availability of transparent commands during the get.
            </summary>
            <param name="enable">
            If true, then transparent commands can be run during the get.
            If false, then transparent commands cannot be run during the get.
            </param>
            <remarks>
            Some Rhino commands are "transparent" and can be run inside of other
            commands.  Examples of transparent commands include the view
            manipulation commands like ZoomExtents, Top, etc., and the selection
            commands like SelAll, SelPoint, etc.
            By default transparent commands can be run during any get. If you
            want to disable this feature, then call EnableTransparentCommands(false)
            before calling GetString, GetPoint, GetObject, etc.
            </remarks>
        </member>
        <member name="M:Rhino.Input.Custom.GetBaseClass.AcceptNothing(System.Boolean)">
            <summary>
            If you want to allow the user to be able to press enter in order to
            skip selecting a something in GetPoint.Get(), GetObject::GetObjects(),
            etc., then call AcceptNothing( true ) beforehand.
            </summary>
            <param name="enable">
            </param>
            <example>
                <code source="examples\vbnet\ex_addlayer.vb" lang="vbnet" />
                <code source="examples\cs\ex_addlayer.cs" lang="cs" />
                <code source="examples\py\ex_addlayer.py" lang="py" />
            </example>
        </member>
        <member name="M:Rhino.Input.Custom.GetBaseClass.AcceptUndo(System.Boolean)">
            <summary>
            If you want to allow the user to have an undo option in GetPoint.Get(),
            GetObject.GetObjects(), etc., then call AcceptUndo(true) beforehand.
            </summary>
            <param name="enable">
            </param>
        </member>
        <member name="M:Rhino.Input.Custom.GetBaseClass.AcceptNumber(System.Boolean,System.Boolean)">
            <summary>
            If you want to allow the user to be able to type in a number during GetPoint.Get(),
            GetObject::GetObjects(), etc., then call AcceptNumber() beforehand.
            If the user chooses to type in a number, then the result code GetResult.Number is
            returned and you can use RhinoGet.Number() to get the value of the number. If you
            are using GetPoint and you want "0" to return (0,0,0) instead of the number zero,
            then set acceptZero = false.
            </summary>
            <param name="enable">
            </param>
            <param name="acceptZero">
            If you are using GetPoint and you want "0" to return (0,0,0) instead of the number zero,
            then set acceptZero = false.
            </param>
        </member>
        <member name="M:Rhino.Input.Custom.GetBaseClass.AcceptPoint(System.Boolean)">
            <summary>
            If you want to allow the user to be able to type in a point then call AcceptPoint(true)
            before calling GetPoint()/GetObject(). If the user chooses to type in a number, then
            the result code GetResult.Point is returned and you can use RhinoGet.Point()
            to get the value of the point.
            </summary>
            <param name="enable">
            </param>
        </member>
        <member name="M:Rhino.Input.Custom.GetBaseClass.AcceptColor(System.Boolean)">
            <summary>
            If you want to allow the user to be able to type in a color r,g,b or name
            during GetPoint.Get(), GetObject::GetObjects(), etc., then call AcceptColor(true)
            before calling GetPoint()/GetObject(). If the user chooses to type in a color,
            then the result code GetResult.Color is returned and you can use RhinoGet.Color()
            to get the value of the color.  If the get accepts points, then the user will not
            be able to type in r,g,b colors but will be able to type color names.
            </summary>
            <param name="enable">
            </param>
        </member>
        <member name="M:Rhino.Input.Custom.GetBaseClass.AcceptString(System.Boolean)">
            <summary>
            If you want to allow the user to be able to type in a string during GetPoint.Get(),
            GetObject::GetObjects(), etc., then call AcceptString(true) before calling
            GetPoint()/GetObject(). If the user chooses to type in a string, then the result code
            GetResult.String is returned and you can use RhinoGet.String() to get the value of the string.
            </summary>
            <param name="enable">
            </param>
        </member>
        <member name="M:Rhino.Input.Custom.GetBaseClass.Result">
            <summary>returns result of the Get*() call</summary>
            <returns>
            </returns>
        </member>
        <member name="M:Rhino.Input.Custom.GetBaseClass.CommandResult">
            <summary>
            Handy tool for getting command result value from getter results
            </summary>
            <returns>
            </returns>
            <example>
                <code source="examples\vbnet\ex_addbackgroundbitmap.vb" lang="vbnet" />
                <code source="examples\cs\ex_addbackgroundbitmap.cs" lang="cs" />
                <code source="examples\py\ex_addbackgroundbitmap.py" lang="py" />
            </example>
        </member>
        <member name="M:Rhino.Input.Custom.GetBaseClass.Number">
            <summary>
            Used to get number if GetPoint.Get(), GetObject.GetObjects(), etc., returns GetResult.Number
            </summary>
            <returns>
            </returns>
            <example>
                <code source="examples\vbnet\ex_addbackgroundbitmap.vb" lang="vbnet" />
                <code source="examples\cs\ex_addbackgroundbitmap.cs" lang="cs" />
                <code source="examples\py\ex_addbackgroundbitmap.py" lang="py" />
            </example>
        </member>
        <member name="M:Rhino.Input.Custom.GetBaseClass.StringResult">
            <summary>
            Used to get string if GetPoint.Get(), GetObject.GetObjects(), etc., returns GetResult.String
            </summary>
            <returns>
            </returns>
            <example>
                <code source="examples\vbnet\ex_addlayer.vb" lang="vbnet" />
                <code source="examples\cs\ex_addlayer.cs" lang="cs" />
                <code source="examples\py\ex_addlayer.py" lang="py" />
            </example>
        </member>
        <member name="M:Rhino.Input.Custom.GetBaseClass.Point">
            <summary>
            Used to get point if Get*() returns GetResult.Point
            </summary>
            <returns>
            </returns>
            <example>
                <code source="examples\vbnet\ex_addline.vb" lang="vbnet" />
                <code source="examples\cs\ex_addline.cs" lang="cs" />
                <code source="examples\py\ex_addline.py" lang="py" />
            </example>
        </member>
        <member name="M:Rhino.Input.Custom.GetBaseClass.Vector">
            <summary>
            Used to get direction if Get*() returns GetResult.Point (Set by some digitizers, but in general it's (0,0,0)
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:Rhino.Input.Custom.GetBaseClass.Color">
            <summary>Used to get color if Get*() returns GetResult.Color</summary>
            <returns>
            </returns>
        </member>
        <member name="M:Rhino.Input.Custom.GetBaseClass.View">
            <summary>
            Used to get view user clicked in during GetPoint.Get(), GetObject.GetObjects(), etc.
            </summary>
            <returns>
            </returns>
            <example>
                <code source="examples\vbnet\ex_addbackgroundbitmap.vb" lang="vbnet" />
                <code source="examples\cs\ex_addbackgroundbitmap.cs" lang="cs" />
                <code source="examples\py\ex_addbackgroundbitmap.py" lang="py" />
            </example>
        </member>
        <member name="M:Rhino.Input.Custom.GetBaseClass.PickRectangle">
            <summary>
            If the get was a GetObjects() and the mouse was used to select the objects,
            then the returned rect has left &lt; right and top &lt; bottom. This rect
            is the Windows GDI screen coordinates of the picking rectangle.
            RhinoViewport.GetPickXform( pick_rect, pick_xform )
            will calculate the picking transformation that was used.
            In all other cases, left=right=top=bottom=0;
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:Rhino.Input.Custom.GetBaseClass.Point2d">
            <summary>
            Returns location in view of point in selected in GetPoint::Get() or GetPoint::Get2dPoint().
            (0,0) = upper left corner of window
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:Rhino.Input.Custom.GetBaseClass.Rectangle2d">
            <summary>
            Returns location in view of 2d rectangle selected in GetPoint::Get2dRectangle().
            rect.left &lt; rect.right and rect.top &lt; rect.bottom
            (0,0) = upper left corner of window
            </summary>
            <returns>
            </returns>
        </member>
        <member name="M:Rhino.Input.Custom.GetBaseClass.Line2d">
            <summary>
            Returns two points defining location in view window of 2d line selected
            in GetPoint::Get2dLine().
            (0,0) = upper left corner of window
            </summary>
            <returns>
            </returns>
        </member>
        <member name="P:Rhino.Input.Custom.CommandLineOption.CurrentListOptionIndex">
            <example>
                <code source="examples\vbnet\ex_commandlineoptions.vb" lang="vbnet" />
                <code source="examples\cs\ex_commandlineoptions.cs" lang="cs" />
                <code source="examples\py\ex_commandlineoptions.py" lang="py" />
            </example>
        </member>
        <member name="M:Rhino.Input.Custom.CommandLineOption.IsValidOptionName(System.String)">
            <summary>
            Test a string to see if it can be used as an option name in any of the RhinoGet::AddCommandOption...() functions.
            </summary>
            <param name="optionName">
            </param>
            <returns>true if string can be used as an option name</returns>
        </member>
        <member name="M:Rhino.Input.Custom.CommandLineOption.IsValidOptionValueName(System.String)">
            <summary>
            Test a string to see if it can be used as an option value in RhinoGet::AddCommandOption,
            RhinoGet::AddCommandOptionToggle, or RhinoGet::AddCommandOptionList.
            </summary>
            <param name="optionValue">
            </param>
            <returns>true if string can be used as an option value</returns>
        </member>
        <member name="M:Rhino.Input.Custom.OptionToggle.#ctor(System.Boolean,System.String,System.String)">
            <example>
                <code source="examples\vbnet\ex_commandlineoptions.vb" lang="vbnet" />
                <code source="examples\cs\ex_commandlineoptions.cs" lang="cs" />
                <code source="examples\py\ex_commandlineoptions.py" lang="py" />
            </example>
        </member>
        <member name="P:Rhino.Input.Custom.OptionToggle.CurrentValue">
            <example>
                <code source="examples\vbnet\ex_commandlineoptions.vb" lang="vbnet" />
                <code source="examples\cs\ex_commandlineoptions.cs" lang="cs" />
                <code source="examples\py\ex_commandlineoptions.py" lang="py" />
            </example>
        </member>
        <member name="M:Rhino.Input.Custom.OptionDouble.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            </summary>
            <param name="initialValue">
            </param>
            <param name="lowerLimit">
            </param>
            <param name="upperLimit">
            </param>
            <example>
                <code source="examples\vbnet\ex_commandlineoptions.vb" lang="vbnet" />
                <code source="examples\cs\ex_commandlineoptions.cs" lang="cs" />
                <code source="examples\py\ex_commandlineoptions.py" lang="py" />
            </example>
        </member>
        <member name="M:Rhino.Input.Custom.OptionDouble.#ctor(System.Double,System.Boolean,System.Double)">
            <summary>
            </summary>
            <param name="initialValue">
            </param>
            <param name="setLowerLimit">
            if true, limit sets the lower limit and upper limit is undefined
            if false, limit sets the upper limit and lower limit is undefined
            </param>
            <param name="limit">
            </param>
        </member>
        <member name="P:Rhino.Input.Custom.OptionDouble.CurrentValue">
            <example>
                <code source="examples\vbnet\ex_commandlineoptions.vb" lang="vbnet" />
                <code source="examples\cs\ex_commandlineoptions.cs" lang="cs" />
                <code source="examples\py\ex_commandlineoptions.py" lang="py" />
            </example>
        </member>
        <member name="M:Rhino.Input.Custom.OptionInteger.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            </summary>
            <param name="initialValue">
            </param>
            <param name="lowerLimit">
            </param>
            <param name="upperLimit">
            </param>
            <example>
                <code source="examples\vbnet\ex_commandlineoptions.vb" lang="vbnet" />
                <code source="examples\cs\ex_commandlineoptions.cs" lang="cs" />
                <code source="examples\py\ex_commandlineoptions.py" lang="py" />
            </example>
        </member>
        <member name="M:Rhino.Input.Custom.OptionInteger.#ctor(System.Int32,System.Boolean,System.Int32)">
            <summary>
            </summary>
            <param name="initialValue">
            </param>
            <param name="setLowerLimit">
            if true, limit sets the lower limit and upper limit is undefined
            if false, limit sets the upper limit and lower limit is undefined
            </param>
            <param name="limit">
            </param>
        </member>
        <member name="P:Rhino.Input.Custom.OptionInteger.CurrentValue">
            <example>
                <code source="examples\vbnet\ex_commandlineoptions.vb" lang="vbnet" />
                <code source="examples\cs\ex_commandlineoptions.cs" lang="cs" />
                <code source="examples\py\ex_commandlineoptions.py" lang="py" />
            </example>
        </member>
        <member name="P:Rhino.UI.StackedDialogPage.PageControl">
            <summary>
            Return the control that represents this page. This will typically be a custom user control.
            </summary>
        </member>
        <member name="P:Rhino.UI.StackedDialogPage.ShowDefaultsButton">
            <summary>Called when this page is activated.</summary>
            <returns>
            true  : if the page wants the "Defaults" button to appear.
            false : if the page does not want the "Defaults" button to appear.
            Default returns false
            Note: returning false implies that OnDefaults() method will never get called.
            </returns>
        </member>
        <member name="M:Rhino.UI.StackedDialogPage.OnApply">
            <summary>Called when stacked dialog OK button is pressed</summary>
            <returns>
            If return value is true then the dialog will be closed. A return of false means
            there was an error and dialog remains open so page can be properly updated.
            </returns>
        </member>
        <member name="M:Rhino.UI.StackedDialogPage.OnCancel">
            <summary>Called when stacked dialog Cancel button is pressed.</summary>
        </member>
        <member name="M:Rhino.UI.StackedDialogPage.OnActivate(System.Boolean)">
            <summary>Called when this page is activated/deactivated.</summary>
            <param name="active">If true then this page is on top otherwise it is about to be hidden.</param>
            <returns>
            If true then the page is hidden and the requested page is not
            activated otherwise will not allow you to change the current page.
            Default returns true
            </returns>
        </member>
        <member name="M:Rhino.UI.StackedDialogPage.OnDefaults">
            <summary>Called when stacked dialog Defaults button is pressed (see ShowDefaultsButton).</summary>
        </member>
        <member name="T:Rhino.Geometry.SweepOneRail">
            <summary>
            Utility class for generating breps by sweeping cross section curves over a rail curve
            </summary>
        </member>
        <member name="P:Rhino.Geometry.SweepOneRail.ClosedSweep">
            <summary>
            If the input rail is closed, ClosedSweep determines if the swept breps will also
            be closed.
            </summary>
        </member>
        <member name="M:Rhino.PersistentSettingsManager.ReadSettings">
            <summary>
            Reads existing settings for a plugin and its associated commands.
            Clears the dirty flag for the settings.
            </summary>
            <returns>
            True if settings are successfully read. False if there was no existing
            settings file to read, or if a read lock could not be acquired.
            </returns>
        </member>
        <member name="M:Rhino.PersistentSettingsManager.WriteSettings">
            <summary>
            Flushes the current settings to the user's roaming directory.
            If an xml file for the guid already exists, it attempts to update
            the file in order to maintain comments, etc. If the xml is corrupt
            or the file does not exist, it writes out a new file.
            </summary>
            <returns>
            True if settings where flushed to disk, otherwise false.
            </returns>
        </member>
        <member name="T:Rhino.Display.RhinoView">
            <summary>
            A RhinoView represents a single "window" display of a document. A view could
            contain one or many RhinoViewports (many in the case of Layout views with detail viewports).
            Standard Rhino modeling views have one viewport
            </summary>
        </member>
        <member name="P:Rhino.Display.RhinoView.Bounds">
            <summary>
            Gets or sets the size and location of the view including its nonclient elements, in pixels, relative to the parent control.
            </summary>
        </member>
        <member name="P:Rhino.Display.RhinoView.ClientRectangle">
            <summary>
            Gets the rectangle that represents the client area of the view.
            </summary>
        </member>
        <member name="P:Rhino.Display.RhinoView.EnableDrawing">
            <summary>
            Enables drawing. By default, drawing is enabled.  There are some rare
            situations where scipts want to disable drawing for a while.
            </summary>
        </member>
        <member name="P:Rhino.Display.RhinoView.MainViewport">
            <summary>
            A RhinoView contains a "main viewport" that fills the entire view client window.
            RhinoPageViews may also contain nested child RhinoViewports for implementing
            detail viewports.
            The MainViewport will always return this RhinoView's m_vp
            </summary>
        </member>
        <member name="P:Rhino.Display.RhinoView.ActiveViewport">
            <summary>
            The ActiveViewport is the same as the MainViewport for standard RhinoViews. In
            a RhinoPageView, the active viewport may be the RhinoViewport of a child detail object.
            Most of the time, you will use ActiveViewport unless you explicitly need to work with
            the main viewport.
            </summary>
            <example>
                <code source="examples\vbnet\ex_addbackgroundbitmap.vb" lang="vbnet" />
                <code source="examples\cs\ex_addbackgroundbitmap.cs" lang="cs" />
                <code source="examples\py\ex_addbackgroundbitmap.py" lang="py" />
            </example>
        </member>
        <member name="P:Rhino.Display.RhinoView.ActiveViewportID">
            <summary>
            Returns viewport ID for the active viewport. Faster than ActiveViewport function when
            working with page views.
            </summary>
        </member>
        <member name="P:Rhino.Display.RhinoView.TitleVisible">
            <summary>
            Visibility of the viewport title window
            </summary>
        </member>
        <member name="P:Rhino.Display.RhinoView.IsFloatingRhinoView">
            <summary>
            Used by Rhino main frame and doc/view manager to determine if this view is
            in a floating frame or a child of the MDIClient window associated with the
            Rhino main frame window.
            Returns true If this view is in a free floating frame window.
            </summary>
        </member>
        <member name="M:Rhino.Display.RhinoView.Redraw">
            <summary>Redraw this view</summary>
            <remarks>
            If you change something in "this" view like the projection, construction plane,
            background bitmap, etc., then you need to call RhinoView.Redraw() to redraw
            "this" view./ The other views will not be changed. If you change something in
            the document (like adding new geometry to the model), then you need to call
            RhinoDoc.Views.Redraw() to redraw all the views.
            </remarks>
            <example>
                <code source="examples\vbnet\ex_addbackgroundbitmap.vb" lang="vbnet" />
                <code source="examples\cs\ex_addbackgroundbitmap.cs" lang="cs" />
                <code source="examples\py\ex_addbackgroundbitmap.py" lang="py" />
            </example>
        </member>
        <member name="M:Rhino.Display.RhinoView.CreateWireframePreviewImage(System.String,System.Drawing.Size,System.Boolean,System.Boolean)">
            <summary>Creates a bitmap preview image of model.</summary>
            <param name="imagePath">
            [in] The name of the bitmap file to create.  The extension of the imagePath controls
            the format of the bitmap file created (bmp, tga, jpg, pcx, png, tif).
            </param>
            <param name="size">[in] The width and height of the bitmap in pixels.</param>
            <param name="ignoreHighlights">
            </param>
            <param name="drawConstructionPlane">
            </param>
            <returns>true if successful</returns>
        </member>
        <member name="M:Rhino.Display.RhinoView.CreateShadedPreviewImage(System.String,System.Drawing.Size,System.Boolean,System.Boolean,System.Boolean)">
            <summary>Creates a bitmap preview image of model.</summary>
            <param name="imagePath">
            [in] The name of the bitmap file to create.  The extension of the imagePath controls
            the format of the bitmap file created (bmp, tga, jpg, pcx, png, tif).
            </param>
            <param name="size">[in] The width and height of the bitmap in pixels.</param>
            <param name="ignoreHighlights">
            </param>
            <param name="drawConstructionPlane">
            </param>
            <param name="useGhostedShading">
            </param>
            <returns>true if successful</returns>
        </member>
        <member name="M:Rhino.Display.RhinoView.FloatRhinoView(System.Boolean)">
            <summary>
            Change floating state of RhinoView
            </summary>
            <param name="floating">
            if true, then the view will be in a floating frame window. Otherwise
            the view will be embeded in the main frame
            </param>
            <returns>true on success</returns>
        </member>
        <member name="P:Rhino.Display.RhinoViewport.ParentView">
            <summary>
            Gets the parent view, if there is one
            Every RhinoView has an associated RhinoViewport that does all the 3d display work.
            Those associated viewports return the RhinoView as their parent view. However,
            RhinoViewports are used in other image creating contexts that do not have a parent
            RhinoView.  If you call ParentView, you MUST check for NULL return values.
            </summary>
        </member>
        <member name="P:Rhino.Display.RhinoViewport.Id">
            <summary>Unique id for this viewport</summary>
        </member>
        <member name="P:Rhino.Display.RhinoViewport.ChangeCounter">
            <summary>
            The value of change counter is incremented every time the view projection
            or construction plane changes. The user can the mouse and nestable view
            manipulation commands to change a view at any time. The value of change
            counter can be used to detect these changes in code that is sensitive to
            the view projection.
            </summary>
        </member>
        <member name="P:Rhino.Display.RhinoViewport.Name">
            <summary>name associated with this viewport</summary>
            <example>
                <code source="examples\vbnet\ex_addnamedview.vb" lang="vbnet" />
                <code source="examples\cs\ex_addnamedview.cs" lang="cs" />
                <code source="examples\py\ex_addnamedview.py" lang="py" />
            </example>
        </member>
        <member name="P:Rhino.Display.RhinoViewport.CameraTarget">
            <summary>
            Viewport target point
            </summary>
        </member>
        <member name="P:Rhino.Display.RhinoViewport.IsPlanView">
            <summary>
            true if construction plane z axis is parallel to camera direction
            </summary>
        </member>
        <member name="P:Rhino.Display.RhinoViewport.CameraUp">
            <example>
                <code source="examples\vbnet\ex_addnamedview.vb" lang="vbnet" />
                <code source="examples\cs\ex_addnamedview.cs" lang="cs" />
                <code source="examples\py\ex_addnamedview.py" lang="py" />
            </example>
        </member>
        <member name="P:Rhino.Display.RhinoViewport.CameraX">
            <summary>unit to right vector</summary>
        </member>
        <member name="P:Rhino.Display.RhinoViewport.CameraY">
            <summary>unit up vector</summary>
        </member>
        <member name="P:Rhino.Display.RhinoViewport.CameraZ">
            <summary>unit vector in CameraDirection</summary>
        </member>
        <member name="P:Rhino.Display.RhinoViewport.FrustumAspect">
            <summary>frustum's width/height</summary>
        </member>
        <member name="P:Rhino.Display.RhinoViewport.ScreenPortAspect">
            <summary>
            screen port's width/height
            </summary>
        </member>
        <member name="M:Rhino.Display.RhinoViewport.IsVisible(Rhino.Geometry.BoundingBox)">
            <summary>
            returns true if some portion world coordinate bounding box is
            potentially visible in the viewing frustum.
            </summary>
            <param name="bbox">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Rhino.Display.RhinoViewport.IsVisible(Rhino.Geometry.Point3d)">
            <summary>
            returns true if some portion world coordinate point is
            potentially visible in the viewing frustum.
            </summary>
            <param name="point">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Rhino.Display.RhinoViewport.SetScreenSize(System.Int32,System.Int32)">
            <summary>
            Set the size of the RhinoViewport
            </summary>
            <param name="width">
            </param>
            <param name="height">
            </param>
        </member>
        <member name="M:Rhino.Display.RhinoViewport.SetClippingPlanes(Rhino.Geometry.BoundingBox)">
            <summary>
            Set optimal clipping planes to view objects in a world coordinate 3d bounding box
            </summary>
            <param name="box">
            </param>
        </member>
        <member name="M:Rhino.Display.RhinoViewport.SetCameraTarget(Rhino.Geometry.Point3d,System.Boolean)">
            <summary>
            Set viewport target point. By default the camera location
            is translated so that the camera direction vector is parallel
            to the vector from the camera location to the target location.
            </summary>
            <param name="targetLocation">new target location</param>
            <param name="updateCameraLocation">
            if true, the camera location is translated so that the camera direction
            vector is parallel to the vector from the camera location to the target
            location.
            If false, the camera location is not changed.
            </param>
            <remarks>
            In general, Rhino users expect to have the camera direction vector and
            the vector from the camera location to the target location to be parallel.
            If you use the RhinoViewport functions to set the camera location, camera
            direction, and target point, then the relationship between these three
            points and vectors is automatically maintained.  If you directly manipulate
            the camera properties, then you should carefully set the target by calling
            SetTarget() with updateCameraLocation=false.
            </remarks>
        </member>
        <member name="M:Rhino.Display.RhinoViewport.SetCameraLocations(Rhino.Geometry.Point3d,Rhino.Geometry.Point3d)">
            <summary>
            Set viewport camera location and target location. The camera direction vector is
            changed so that it is parallel to the vector from the camera location to
            the target location.
            </summary>
            <param name="targetLocation">new target location</param>
            <param name="cameraLocation">new camera location</param>
        </member>
        <member name="M:Rhino.Display.RhinoViewport.SetCameraLocation(Rhino.Geometry.Point3d,System.Boolean)">
            <summary>
            Set viewport camera location. By default the target location is changed so that
            the vector from the camera location to the target is parallel to the camera direction
            vector.
            </summary>
            <param name="cameraLocation">new camera location</param>
            <param name="updateTargetLocation">
            if true, the target location is changed so that the vector from the camera
            location to the target is parallel to the camera direction vector.
            If false, the target location is not changed. See the remarks section of
            RhinoViewport.SetTarget for important details.
            </param>
            <example>
                <code source="examples\vbnet\ex_addnamedview.vb" lang="vbnet" />
                <code source="examples\cs\ex_addnamedview.cs" lang="cs" />
                <code source="examples\py\ex_addnamedview.py" lang="py" />
            </example>
        </member>
        <member name="M:Rhino.Display.RhinoViewport.SetCameraDirection(Rhino.Geometry.Vector3d,System.Boolean)">
            <summary>
            Set viewport camera direction. By default the target location is changed so that
            the vector from the camera location to the target is parallel to the camera direction.
            </summary>
            <param name="cameraDirection">new camera direction</param>
            <param name="updateTargetLocation">
            if true, the target location is changed so that the vector from the camera
            location to the target is parallel to the camera direction.
            If false, the target location is not changed.
            See the remarks section of RhinoViewport.SetTarget for important details.
            </param>
            <example>
                <code source="examples\vbnet\ex_addnamedview.vb" lang="vbnet" />
                <code source="examples\cs\ex_addnamedview.cs" lang="cs" />
                <code source="examples\py\ex_addnamedview.py" lang="py" />
            </example>
        </member>
        <member name="M:Rhino.Display.RhinoViewport.ConstructionPlane">
            <example>
                <code source="examples\vbnet\ex_addbackgroundbitmap.vb" lang="vbnet" />
                <code source="examples\cs\ex_addbackgroundbitmap.cs" lang="cs" />
                <code source="examples\py\ex_addbackgroundbitmap.py" lang="py" />
            </example>
        </member>
        <member name="M:Rhino.Display.RhinoViewport.SetConstructionPlane(Rhino.DocObjects.ConstructionPlane)">
            <summary>
            Sets the construction plane to cplane.
            </summary>
            <param name="cplane">
            </param>
        </member>
        <member name="M:Rhino.Display.RhinoViewport.PushConstructionPlane(Rhino.DocObjects.ConstructionPlane)">
            <summary>
            Pushes the current construction plane on the viewport's
            construction plane stack and sets the construction plane
            to cplane.
            </summary>
            <param name="cplane">
            </param>
        </member>
        <member name="M:Rhino.Display.RhinoViewport.PopConstructionPlane">
            <summary>
            Sets the construction plane to the plane that was
            active before the last call to PushConstructionPlane.
            </summary>
            <returns>true if a construction plane was popped</returns>
        </member>
        <member name="M:Rhino.Display.RhinoViewport.NextConstructionPlane">
            <summary>
            Sets the construction plane to the plane that was
            active before the last call to PreviousConstructionPlane.
            </summary>
            <returns>true if successful</returns>
        </member>
        <member name="M:Rhino.Display.RhinoViewport.PreviousConstructionPlane">
            <summary>
            Sets the construction plane to the plane that was
            active before the last call to NextConstructionPlane
            or SetConstructionPlane.
            </summary>
            <returns>true if successful</returns>
        </member>
        <member name="M:Rhino.Display.RhinoViewport.SetProjection(Rhino.Display.DefinedViewportProjection,System.String,System.Boolean)">
            <summary>
            Set viewport to a defined projection
            </summary>
            <param name="projection">
            </param>
            <param name="viewName">if not null or empty, the name is set</param>
            <param name="updateConstructionPlane">if true, the construction plane is set to the viewport plane</param>
            <returns>true if successful</returns>
        </member>
        <member name="M:Rhino.Display.RhinoViewport.PushViewProjection">
            <summary>
            Appends the current view projection and target to the viewport's view stack.
            </summary>
            <example>
                <code source="examples\vbnet\ex_addnamedview.vb" lang="vbnet" />
                <code source="examples\cs\ex_addnamedview.cs" lang="cs" />
                <code source="examples\py\ex_addnamedview.py" lang="py" />
            </example>
        </member>
        <member name="M:Rhino.Display.RhinoViewport.PopViewProjection">
            <summary>
            Sets the view projection and target to the settings at the top of
            the view stack and removes those settings from the view stack.
            </summary>
            <returns>true if there were settings that could be popped from the stack</returns>
            <example>
                <code source="examples\vbnet\ex_addnamedview.vb" lang="vbnet" />
                <code source="examples\cs\ex_addnamedview.cs" lang="cs" />
                <code source="examples\py\ex_addnamedview.py" lang="py" />
            </example>
        </member>
        <member name="M:Rhino.Display.RhinoViewport.NextViewProjection">
            <summary>
            Sets the view projection and target to the settings that
            were active before the last call to PrevView.
            </summary>
            <returns>true if the view stack was popped</returns>
        </member>
        <member name="M:Rhino.Display.RhinoViewport.PreviousViewProjection">
            <summary>
            Sets the view projection and target to the settings that
            were active before the last call to NextViewProjection.
            </summary>
            <returns>true if the view stack was popped</returns>
        </member>
        <member name="M:Rhino.Display.RhinoViewport.ZoomExtents">
            <summary>
            Dolly the camera location and so that the view frustum contains all of the
            selected document objects that can be seen in view. If the projection is
            perspective, the camera angle is not changed.
            </summary>
            <returns>true if successful</returns>
        </member>
        <member name="M:Rhino.Display.RhinoViewport.ZoomExtentsSelected">
            <summary>
            Dolly the camera location and so that the view frustum contains all of the
            selected document objects that can be seen in view. If the projection is
            perspective, the camera angle is not changed.
            </summary>
            <returns>true if successful</returns>
        </member>
        <member name="M:Rhino.Display.RhinoViewport.ZoomBoundingBox(Rhino.Geometry.BoundingBox)">
            <summary>
            Zooms the viewport to the given bounding box
            </summary>
            <param name="box">
            </param>
            <returns>true if successful</returns>
        </member>
        <member name="M:Rhino.Display.RhinoViewport.MouseRotateAroundTarget(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Rotate viewport around target
            </summary>
            <param name="mousePreviousPoint">
            </param>
            <param name="mouseCurrentPoint">
            </param>
        </member>
        <member name="M:Rhino.Display.RhinoViewport.MouseRotateCamera(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Rotate view around camera location
            </summary>
            <param name="mousePreviousPoint">
            </param>
            <param name="mouseCurrentPoint">
            </param>
        </member>
        <member name="M:Rhino.Display.RhinoViewport.KeyboardRotate(System.Boolean,System.Double)">
            <summary>
            Keyboard arrow key interaction tool
            </summary>
            <param name="leftRight">left/right rotate if true, up/down rotate if false</param>
            <param name="angleRadians">
            If less than 0, rotation is to left or down.
            If greater than 0, rotation is to right or up
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Rhino.Display.RhinoViewport.KeyboardDolly(System.Boolean,System.Double)">
            <summary>
            Keyboard arrow key interaction tool
            </summary>
            <param name="leftRight">left/right dolly if true, up/down dolly if false</param>
            <param name="amount">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Rhino.Display.RhinoViewport.KeyboardDollyInOut(System.Double)">
            <summary>
            Keyboard arrow key interaction tool
            </summary>
            <param name="amount">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Rhino.Display.RhinoViewport.Magnify(System.Double,System.Boolean)">
            <summary>
            </summary>
            <param name="magnificationFactor">
            </param>
            <param name="mode">
            false = perform a "dolly" magnification by moving the camera towards/away from
            the target so that the amount of the screen subtended by an object changes.
            true = perform a "zoom" magnification by adjusting the "lens" angle
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Rhino.Display.RhinoViewport.Magnify(System.Double,System.Boolean,System.Drawing.Point)">
            <summary>
            </summary>
            <param name="magnificationFactor">
            </param>
            <param name="mode">
            false = perform a "dolly" magnification by moving the camera towards/away from
            the target so that the amount of the screen subtended by an object changes.
            true = perform a "zoom" magnification by adjusting the "lens" angle
            </param>
            <param name="fixedScreenPoint">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Rhino.Display.RhinoViewport.ClientToScreenPort(System.Drawing.Point@)">
            <summary>
            Convert a point in parent RhinoView client window coordinates to the Viewport screen port
            client coordinates. The screen port of a RhinoViewport may not match the client area of
            the parent RhinoView. This occurs in cases when the RhinoViewport is a nested child viewport
            </summary>
            <param name="point">
            point in client coordinates of parent RhinoView window as input. This is
            converted to the screen port client coordinates of the viewport as output
            </param>
            <returns>
            true if the point is inside of the RhinoViewport's screen port rectangle
            </returns>
        </member>
        <member name="M:Rhino.Display.RhinoViewport.Rotate(System.Double,Rhino.Geometry.Vector3d,Rhino.Geometry.Point3d)">
            <summary>
            Rotates about the specified axis. A positive rotation angle results
            in a counter-clockwise rotation about the axis (right hand rule).
            </summary>
            <param name="angleRadians">angle of rotation in radians</param>
            <param name="rotationAxis">direction of the axis of rotation</param>
            <param name="rotationCenter">point on the axis of rotation</param>
            <returns>true if geometry successfully rotated</returns>
        </member>
        <member name="M:Rhino.Display.RhinoViewport.GetCameraFrame(Rhino.Geometry.Plane@)">
            <summary>
            Returns true if current camera orientation is valid
            </summary>
            <param name="frame">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Rhino.Display.RhinoViewport.GetFrustum(System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            </summary>
            <param name="left">left &lt; right</param>
            <param name="right">left &lt; right</param>
            <param name="bottom">bottom &lt; top</param>
            <param name="top">bottom &lt; top</param>
            <param name="nearDistance">0 &lt; nearDistance &lt; farDistance</param>
            <param name="farDistance">0 &lt; nearDistance &lt; farDistance</param>
            <returns>
            </returns>
        </member>
        <member name="M:Rhino.Display.RhinoViewport.GetFrustumCenter(Rhino.Geometry.Point3d@)">
            <summary>
            Returns world coordinates of frustum's center
            </summary>
            <param name="center">
            </param>
            <returns>true if the center was successfully computed</returns>
        </member>
        <member name="M:Rhino.Display.RhinoViewport.GetDepth(Rhino.Geometry.Point3d,System.Double@)">
            <summary>Get clipping distance of a point</summary>
            <param name="point">
            </param>
            <param name="distance">
            </param>
            <returns>
            True if the point is ing the view frustum and near_dist/far_dist were set.
            False if the bounding box does not intesect the view frustum.
            </returns>
        </member>
        <member name="M:Rhino.Display.RhinoViewport.GetDepth(Rhino.Geometry.BoundingBox,System.Double@,System.Double@)">
            <summary>
            Get near and far clipping distances of a bounding box
            </summary>
            <param name="bbox">
            </param>
            <param name="nearDistance">
            </param>
            <param name="farDistance">
            </param>
            <returns>
            True if the bounding box intersects the view frustum and near_dist/far_dist were set.
            False if the bounding box does not intesect the view frustum.
            </returns>
        </member>
        <member name="M:Rhino.Display.RhinoViewport.GetDepth(Rhino.Geometry.Sphere,System.Double@,System.Double@)">
            <summary>
            Get near and far clipping distances of a sphere
            </summary>
            <param name="sphere">
            </param>
            <param name="nearDistance">
            </param>
            <param name="farDistance">
            </param>
            <returns>
            True if the sphere intersects the view frustum and near_dist/far_dist were set.
            False if the sphere does not intesect the view frustum.
            </returns>
        </member>
        <member name="M:Rhino.Display.RhinoViewport.GetFrustumNearPlane(Rhino.Geometry.Plane@)">
            <summary>Get near clipping plane</summary>
            <param name="plane">
            near clipping plane if camera and frustum are valid. The plane's
            frame is the same as the camera's frame. The origin is located at
            the intersection of the camera direction ray and the near clipping
            plane.
            </param>
            <returns>
            true if camera and frustum are valid
            </returns>
        </member>
        <member name="M:Rhino.Display.RhinoViewport.GetFrustumFarPlane(Rhino.Geometry.Plane@)">
            <summary>Get far clipping plane</summary>
            <param name="plane">
            far clipping plane if camera and frustum are valid. The plane's
            frame is the same as the camera's frame. The origin is located at
            the intersection of the camera direction ray and the far clipping
            plane.
            </param>
            <returns>
            true if camera and frustum are valid
            </returns>
        </member>
        <member name="M:Rhino.Display.RhinoViewport.GetFrustumLeftPlane(Rhino.Geometry.Plane@)">
            <summary>Get left world frustum clipping plane</summary>
            <param name="plane">
            frustum left side clipping plane. The normal points into the visible
            region of the frustum. If the projection is perspective, the origin
            is at the camera location, otherwise the origin isthe point on the
            plane that is closest to the camera location.
            </param>
            <returns>True if camera and frustum are valid and plane was set</returns>
        </member>
        <member name="M:Rhino.Display.RhinoViewport.GetFrustumRightPlane(Rhino.Geometry.Plane@)">
            <summary>Get right world frustum clipping plane</summary>
            <param name="plane">
            frustum right side clipping plane. The normal points into the visible
            region of the frustum. If the projection is perspective, the origin
            is at the camera location, otherwise the origin isthe point on the
            plane that is closest to the camera location.
            </param>
            <returns>True if camera and frustum are valid and plane was set</returns>
        </member>
        <member name="M:Rhino.Display.RhinoViewport.GetFrustumBottomPlane(Rhino.Geometry.Plane@)">
            <summary>Get bottom world frustum clipping plane</summary>
            <param name="plane">
            frustum bottom side clipping plane. The normal points into the visible
            region of the frustum. If the projection is perspective, the origin
            is at the camera location, otherwise the origin isthe point on the
            plane that is closest to the camera location.
            </param>
            <returns>True if camera and frustum are valid and plane was set</returns>
        </member>
        <member name="M:Rhino.Display.RhinoViewport.GetFrustumTopPlane(Rhino.Geometry.Plane@)">
            <summary>Get top world frustum clipping plane</summary>
            <param name="plane">
            frustum top side clipping plane. The normal points into the visible
            region of the frustum. If the projection is perspective, the origin
            is at the camera location, otherwise the origin isthe point on the
            plane that is closest to the camera location.
            </param>
            <returns>True if camera and frustum are valid and plane was set</returns>
        </member>
        <member name="M:Rhino.Display.RhinoViewport.GetNearRect">
            <summary>Get corners of near clipping plane rectangle</summary>
            <returns>
            [left_bottom, right_bottom, left_top, right_top] points on success
            null on failure
            </returns>
        </member>
        <member name="M:Rhino.Display.RhinoViewport.GetFarRect">
            <summary>Get corners of far clipping plane rectangle</summary>
            <returns>
            [left_bottom, right_bottom, left_top, right_top] points on success
            null on failure
            </returns>
        </member>
        <member name="M:Rhino.Display.RhinoViewport.GetScreenPort(System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Location of viewport in pixels.  These are provided so you can set the port you are using
            and get the appropriate transformations to and from screen space.
            </summary>
            <param name="portLeft">portLeft != portRight</param>
            <param name="portRight">portLeft != portRight</param>
            <param name="portBottom">portTop != portBottom</param>
            <param name="portTop">portTop != portBottom</param>
            <param name="portNear">
            </param>
            <param name="portFar">
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Rhino.Display.RhinoViewport.GetTransform(Rhino.DocObjects.CoordinateSystem,Rhino.DocObjects.CoordinateSystem)">
            <summary>
            </summary>
            <param name="sourceSystem">
            </param>
            <param name="destinationSystem">
            </param>
            <returns>
            4x4 transformation matrix (acts on the left)
            Identity matrix is returned if this function fails
            </returns>
        </member>
        <member name="M:Rhino.Display.RhinoViewport.GetFrustumLine(System.Double,System.Double,Rhino.Geometry.Line@)">
            <summary>
            Get the world coordinate line in the view frustum that projects to a point on the screen.
            </summary>
            <param name="screenX">(screenx,screeny) = screen location</param>
            <param name="screenY">(screenx,screeny) = screen location</param>
            <param name="worldLine">
            3d world coordinate line segment starting on the near clipping
            plane and ending on the far clipping plane.
            </param>
            <returns>
            true if successful.
            false if view projection or frustum is invalid.
            </returns>
        </member>
        <member name="M:Rhino.Display.RhinoViewport.GetWorldToScreenScale(Rhino.Geometry.Point3d,System.Double@)">
            <summary>
            </summary>
            <param name="pointInFrustum">
            </param>
            <param name="pixelsPerUnit">
            scale = number of pixels per world unit at the 3d point
            </param>
            <returns>
            </returns>
        </member>
        <member name="M:Rhino.Display.RhinoViewport.ClearTraceImage">
            <summary>
            Remove trace image (background bitmap) for this viewport if one exists
            </summary>
        </member>
        <member name="M:Rhino.Display.RhinoViewport.SetTraceImage(System.String,Rhino.Geometry.Plane,System.Double,System.Double,System.Boolean,System.Boolean)">
            <summary>
            Set trace image (background bitmap) for this viewport
            </summary>
            <param name="bitmapFileName">
            </param>
            <param name="plane">
            </param>
            <param name="width">
            </param>
            <param name="height">
            </param>
            <param name="grayscale">
            </param>
            <param name="filtered">true if image should be filtered (bilinear) before displayed</param>
            <returns>true if successful</returns>
            <example>
                <code source="examples\vbnet\ex_addbackgroundbitmap.vb" lang="vbnet" />
                <code source="examples\cs\ex_addbackgroundbitmap.cs" lang="cs" />
                <code source="examples\py\ex_addbackgroundbitmap.py" lang="py" />
            </example>
        </member>
        <member name="F:Rhino.UI.ComboListBox.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rhino.UI.ComboListBox.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rhino.UI.ComboListBox.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Rhino.UI.StringBox.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rhino.UI.StringBox.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rhino.UI.StringBox.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Rhino.UI.Dialogs.KillSplash">
            <summary>
            Destroy the splash screen if it is being displayed
            </summary>
        </member>
        <member name="M:Rhino.UI.Dialogs.PushPickButton(System.Windows.Forms.Form,System.EventHandler{System.EventArgs})">
            <summary>
            Hides a form, calls a provided function, and then shows the form. This works for
            modal forms. Useful for selecting objects or getting points while a modal dialog
            is running
            </summary>
            <param name="form">
            </param>
            <param name="pickFunction">
            </param>
        </member>
        <member name="M:Rhino.UI.Dialogs.ShowSemiModal(System.Windows.Forms.Form)">
            <summary>
            Show a windows form that is modal in the sense that this function does not return until
            the form is closed, but also allows for interaction with other elements of the Rhino
            user interface.
            </summary>
            <param name="form">
            The form must have buttons that are assigned to the "AcceptButton" and "CancelButton".
            </param>
            <returns>One of the System.Windows.Forms.DialogResult values.</returns>
        </member>
        <member name="M:Rhino.UI.Dialogs.ShowTextDialog(System.String,System.String)">
            <summary>
            Display a text dialog similar to the dialog used for the "What" command
            </summary>
            <param name="message">Text to display as the message content.</param>
            <param name="title">Test to display as the form title.</param>
            <returns>One of the System.Windows.Forms.DialogResult values.</returns>
        </member>
        <member name="M:Rhino.UI.Dialogs.ShowMessageBox(System.String,System.String)">
            <summary>
            Same as System.Windows.Froms.MessageBox.Show but using a message box tailored to Rhino.
            </summary>
            <param name="message">Message box text content.</param>
            <param name="title">Message box title text.</param>
            <returns>One of the System.Windows.Forms.DialogResult values.</returns>
        </member>
        <member name="M:Rhino.UI.Dialogs.ShowMessageBox(System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon)">
            <summary>
            Same as System.Windows.Froms.MessageBox.Show but using a message box tailored to Rhino.
            </summary>
            <param name="message">Message box text content.</param>
            <param name="title">Message box title text.</param>
            <param name="buttons">One of the System.Windows.Forms.MessageBoxButtons values that specifies which buttons to display in the message box.</param>
            <param name="icon">One of the System.Windows.Forms.MessageBoxIcon values that specifies which icon to display in the message box.</param>
            <returns>One of the System.Windows.Forms.DialogResult values.</returns>
        </member>
        <member name="M:Rhino.UI.Dialogs.ShowMessageBox(System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon,System.Windows.Forms.MessageBoxDefaultButton)">
            <summary>
            Same as System.Windows.Froms.MessageBox.Show but using a message box tailored to Rhino.
            </summary>
            <param name="message">Message box text content.</param>
            <param name="title">Message box title text.</param>
            <param name="buttons">One of the System.Windows.Forms.MessageBoxButtons values that specifies which buttons to display in the message box.</param>
            <param name="icon">One of the System.Windows.Forms.MessageBoxIcon values that specifies which icon to display in the message box.</param>
            <param name="defaultButton">One of the System.Windows.Forms.MessageBoxDefaultButton values that specifies the default button for the message box.</param>
            <returns>One of the System.Windows.Forms.DialogResult values.</returns>
        </member>
        <member name="M:Rhino.UI.Dialogs.ShowColorDialog(System.Drawing.Color@)">
            <summary>
            Display Rhino's color selection dialog.
            </summary>
            <param name="color">
            [in/out] Default color for dialog, and will receive new color if function returns true.
            </param>
            <returns>True if the color changed. False if the color has not changed or the user pressed cancel.</returns>
        </member>
        <member name="M:Rhino.UI.Dialogs.ShowColorDialog(System.Drawing.Color@,System.Boolean,System.String)">
            <summary>
            Display Rhino's color selection dialog.
            </summary>
            <param name="color">
            [in/out] Default color for dialog, and will receive new color if function returns true.
            </param>
            <param name="includeButtonColors">
            Display button face and text options at top of named color list.
            </param>
            <param name="dialogTitle">The title of the dialog</param>
            <returns>True if the color changed. False if the color has not changed or the user pressed cancel</returns>
        </member>
        <member name="M:Rhino.UI.Dialogs.ShowComboListBox(System.String,System.String,System.Collections.IList)">
            <summary>
            </summary>
            <param name="title">
            </param>
            <param name="message">
            </param>
            <param name="items">
            </param>
            <returns>
            selected item
            null if the user canceled
            </returns>
        </member>
        <member name="M:Rhino.UI.Dialogs.ShowCheckListBox(System.String,System.String,System.Collections.IList,System.Collections.Generic.IList{System.Boolean})">
            <summary>
            </summary>
            <param name="title">
            </param>
            <param name="message">
            </param>
            <param name="items">
            </param>
            <param name="checkState">
            </param>
            <returns>
            </returns>
        </member>
        <member name="F:Rhino.UI.EditBox.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rhino.UI.EditBox.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rhino.UI.EditBox.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Rhino.UI.ListBox.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rhino.UI.ListBox.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rhino.UI.ListBox.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
    </members>
</doc>
